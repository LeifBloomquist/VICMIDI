------- FILE vicmidi.asm LEVEL 1 PASS 2
      1  b0f9 ????						; VIC-20 MIDI Interface
      2  b0f9 ????						; By David Viens and Leif Bloomquist, portions by
      3  b0f9 ????						; Michael Kircher and Viznut
      4  b0f9 ????
      5  b0f9 ????						; ----------------------------------------------------------------------------
      6  b0f9 ????
      7  b0f9 ????				      processor	6502	; VIC-20
      8  b0f9 ????
      9  b0f9 ????						; Assume no memory expansion.	 Compile as Cartridge ROM in Block 5.
     10  a000					      org	$A000	; Block 5
     11  a000
     12  a000							; Macro and equate includes (must be at start)
------- FILE macros.asm LEVEL 2 PASS 2
      0  a000					      include	"macros.asm"
      1  a000
      2  a000							; ==============================================================
      3  a000							; Macro wrapping the fast hex poke
      4  a000							; ==============================================================
      5  a000
      6  a000					      MAC	hexpoke
      7  a000					      lda	#<{1}	; Low byte
      8  a000					      sta	$22
      9  a000					      lda	#>{1}	; High byte
     10  a000					      sta	$23
     11  a000
     12  a000					      lda	{2}	; Note - address
     13  a000					      jsr	hexstr
     14  a000					      ENDM
     15  a000
     16  a000							; ==============================================================
     17  a000							; Macro to position the cursor
     18  a000							; ==============================================================
     19  a000
     20  a000					      MAC	plot
     21  a000					      ldy	#{1}
     22  a000					      ldx	#{2}
     23  a000					      clc
     24  a000					      jsr	$E50A	; PLOT - same on 64 and VIC
     25  a000					      ENDM
     26  a000
     27  a000							; ==============================================================
     28  a000							; Macro to print a string
     29  a000							; ==============================================================
     30  a000
     31  a000					      MAC	printstring
     32  a000					      ldy	#>{0}
     33  a000					      lda	#<{0}
     34  a000					      jsr	STROUT
     35  a000					      ENDM
     36  a000
     37  a000							; ==============================================================
     38  a000							; Macro to print a byte (Hex)
     39  a000							; ==============================================================
     40  a000
     41  a000					      MAC	printbyte
     42  a000					      ldx	#$00
     43  a000					      ldy	#$0F
     44  a000					      lda	{0}
     45  a000					      jsr	printnum
     46  a000					      ENDM
------- FILE vicmidi.asm
------- FILE equates.asm LEVEL 2 PASS 2
      0  a000					      include	"equates.asm"
      1  a000							; --------------------------------------------------------------------------------------------------
      2  a000							;;free zero page (to use as vars)
      3  a000							;INDEX1: $0022-$0023, First utility pointer		       used by HEXPOKE
      4  a000							;INDEX2: $0024-$0025, Second utility pointer		       bytesexpected, midicounter
      5  a000							;FORNAM: $0049-$004A, Pointer to FOR/NEXT index variable etc  channel
      6  a000							;TEMPF3: $004E-$0052, Temporary FLPT storage		       Used by keyboard routines
      7  a000							;TEMPF1: $0057-$005B, Temporary FLPT storage		       Used by setwave
      8  a000							;TEMPF2: $005C-$0060: Temporary FLPT storage		       FIFO pointers
      9  a000							;FAC:	  $0061-$0066, Floating-point Accumulator (FAC)        Flags for Poly mode
     10  a000							;AFAC:   $0069-$006E, Alternative/Auxilary FAC 	       69=last note
     11  a000
     12  a000							; ---- Zero Page Addresses -------------------------------------------------
     13  a000
     14  a000		       00 24	   midicounter =	$24
     15  a000		       00 25	   bytesexpected =	$25
     16  a000
     17  a000		       00 49	   channel    =	$49
     18  a000		       00 4a	   bank       =	$4A	; 0=NTSC Normal, 1=PAL Normal, 2=NTSC Alt., 3=PAL Alt.
     19  a000
     20  a000							; Previous keyboard column bits.
     21  a000		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
     22  a000		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     23  a000		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     24  a000		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     25  a000
     26  a000							; Used by setwave
     27  a000		       00 57	   TMP	      =	$57
     28  a000		       00 58	   TMP2       =	$58
     29  a000
     30  a000		       00 5c	   write_pointer =	$5C	; FIFO current write pointer - incremented on byte received
     31  a000		       00 5d	   read_pointer =	$5D	; FIFO current read pointer  - incremented on byte removed
     32  a000
     33  a000		       00 5e	   currentvalue =	$5E	; Current value for voice settings
     34  a000
     35  a000		       00 61	   poly_flags =	$61	; Flags for polymode
     36  a000							; Also 62,63,64
     37  a000
     38  a000		       00 68	   lastnote   =	$68	; Remembers last note, so Note Off applies to that note only
     39  a000							; Also 69,6A,6B
     40  a000
     41  a000		       00 6c	   temp1      =	$6C	; Used for screen colors
     42  a000		       00 6d	   tempx      =	$6D	; Used by program change
     43  a000
     44  a000							;*00FB-00FE  251-254  Operating system free zero page space
     45  a000		       00 fb	   statusbyte =	$FB
     46  a000		       00 fc	   mididata0  =	$FC
     47  a000		       00 fd	   mididata1  =	$FD
     48  a000		       00 fe	   mididata2  =	$FE	; If needed
     49  a000
     50  a000							; ---- Non Zero Page Addresses -----------------------------------------------
     51  a000
     52  a000							; Store viznut waveform being used per voice  (located near start of BASIC space)
     53  a000		       10 10	   waveform1  =	$1010
     54  a000		       10 11	   waveform2  =	$1011
     55  a000		       10 12	   waveform3  =	$1012
     56  a000		       10 13	   waveform4  =	$1013
     57  a000
     58  a000		       10 14	   tempstatusbyte =	$1014
     59  a000		       10 15	   command    =	$1015
     60  a000
     61  a000							; Scratch space for setwave parameters
     62  a000		       10 20	   setwavechannel =	$1020	; y = channel ($0a..$0c)
     63  a000		       10 21	   setwavefrequency =	$1021	; x = initial frequency
     64  a000		       10 22	   setwaveshiftreg =	$1022	; a = shift register contents
     65  a000
     66  a000							; Setwave Target
     67  a000		       11 00	   setwave    =	$1100	; Setwave code has to all be on one page.
     68  a000
     69  a000							; Input Buffer
     70  a000		       12 00	   buffer     =	$1200
     71  a000
     72  a000							; Font (copied here from ROM)
     73  a000		       18 00	   font       =	$1800	; 6144 decimal
     74  a000
     75  a000							; ST16C450 Registers
     76  a000		       9c 00	   UART_RXTX  =	$9C00
     77  a000		       9c 01	   UART_IER   =	$9C01
     78  a000		       9c 02	   UART_ISR   =	$9C02
     79  a000		       9c 03	   UART_LCR   =	$9C03
     80  a000		       9c 05	   UART_LSR   =	$9C05
     81  a000		       9c 07	   UART_SCRATCHPAD =	$9C07
     82  a000		       9c 00	   UART_DIVISOR_LSB =	$9C00	; Yes, same as UART_RXTX
     83  a000		       9c 01	   UART_DIVISOR_MSB =	$9C01
     84  a000
     85  a000							;Sound and Video Registers
     86  a000		       90 0a	   sound_voice1 =	$900A	; Frequency for oscillator 1 (low)    (on: 128-255)
     87  a000		       90 0b	   sound_voice2 =	$900B	; Frequency for oscillator 2 (medium) (on: 128-255)
     88  a000		       90 0c	   sound_voice3 =	$900C	; Frequency for oscillator 3 (high)   (on: 128-255)
     89  a000		       90 0d	   sound_noise =	$900D	; Frequency of noise source	       (on: 128-255)
     90  a000		       90 0e	   sound_volume =	$900E	; Bits 0-3 sets volume of all sound.  Bits 4-7 are auxiliary color information (not used)
     91  a000		       90 0f	   screen_colors =	$900F
     92  a000
     93  a000							;Screen locations
     94  a000		       1e 00	   screen_start =	$1E00
     95  a000		       1e 4d	   midi_display =	$1E4D
     96  a000		       1e 77	   voice_display =	$1E77
     97  a000		       1f f9	   spin_display =	$1FF9	; Lower-right corner
     98  a000		       97 f9	   spin_color =	spin_display + $7800
     99  a000
    100  a000
    101  a000							; Kernal/BASIC Routines
    102  a000		       f2 7a	   CHROUT     =	$f27a
    103  a000		       e5 5f	   CLRSCREEN  =	$e55f
    104  a000		       e5 81	   HOME       =	$E581
    105  a000		       cb 1e	   STROUT     =	$CB1E	; Print string pointed to by (A/Y) until zero byte.
    106  a000
    107  a000		       00 08	   CG_DCS     =	8	;disable shift+C=
    108  a000		       00 09	   CG_ECS     =	9	;enable shift+C=
    109  a000
    110  a000		       00 0e	   CG_LCS     =	14	;switch to lowercase
    111  a000		       00 8e	   CG_UCS     =	142	;switch to uppercase
    112  a000
    113  a000							;cursor movement
    114  a000		       00 13	   CS_HOM     =	19
    115  a000		       00 91	   CS_U       =	145
    116  a000		       00 11	   CS_D       =	17
    117  a000		       00 9d	   CS_L       =	157
    118  a000		       00 1d	   CS_R       =	29
    119  a000
    120  a000		       00 0d	   CRLF       =	13
    121  a000
    122  a000							; EOF!
------- FILE vicmidi.asm
     15  a000
     16  a000							; ---- Startup Code ---------------------------------------------------------
     17  a000		       09 a0		      dc.w	START	; Entry point for power up
     18  a002		       9d a5		      dc.w	RESTORE	; Entry point for warm start (RESTORE)
     19  a004
     20  a004		       41 30 c3 c2*	      dc.b	"A0",$C3,$C2,$CD	; 'A0CBM' boot string
     21  a009
     22  a009				   START
     23  a009							; Kernel Init
     24  a009		       20 8d fd 	      jsr	$fd8d	; RAMTAS - Initialise System Constants
     25  a00c		       20 52 fd 	      jsr	$fd52	; Init Vectors
     26  a00f		       20 f9 fd 	      jsr	$fdf9	; Init I/O
     27  a012		       20 18 e5 	      jsr	$e518	; Init I/O
     28  a015
     29  a015							; BASIC Init (Partial)
     30  a015		       20 5b e4 	      jsr	$e45b	; Init Vectors
     31  a018		       20 a4 e3 	      jsr	$e3a4	; BASIC RAM
     32  a01b		       20 04 e4 	      jsr	$e404	; INIT Message (needed (?) so keycheck routines work)
     33  a01e
     34  a01e				   entry
     35  a01e		       20 a2 a3 	      jsr	setupfont
     36  a021		       20 67 a3 	      jsr	mainscreen
     37  a024		       20 02 a6 	      jsr	setup_pal
     38  a027		       20 96 a3 	      jsr	setwavecopy
     39  a02a		       20 35 a5 	      jsr	checkuart
     40  a02d		       20 78 a5 	      jsr	setupirq
     41  a030		       20 5e a5 	      jsr	resetuart
     42  a033
     43  a033							; Default to maximum volume
     44  a033		       a9 0f		      lda	#$0F
     45  a035		       20 47 a2 	      jsr	setvolume
     46  a038
     47  a038							; Initial Values
     48  a038		       a9 00		      lda	#$00
     49  a03a		       85 24		      sta	midicounter	; midicounter=0
     50  a03c		       85 fb		      sta	statusbyte	; statusbyte=0
     51  a03e		       85 fc		      sta	mididata0	; mididata0=0
     52  a040		       85 fd		      sta	mididata1	; mididata1=0
     53  a042		       85 fe		      sta	mididata2	; mididata2=0
     54  a044		       85 4e		      sta	c0	; no keys are pressed in 7F
     55  a046		       85 4f		      sta	c1	; no keys are pressed in BF
     56  a048		       85 50		      sta	c2	; no keys are pressed in FD
     57  a04a		       85 51		      sta	c3	; no keys are pressed in FE
     58  a04c		       85 68		      sta	lastnote+0	; Clear
     59  a04e		       85 69		      sta	lastnote+1	;    last
     60  a050		       85 6a		      sta	lastnote+2	;	note
     61  a052		       85 6b		      sta	lastnote+3	;	  (including noise)
     62  a054		       85 61		      sta	poly_flags+0	; Clear
     63  a056		       85 62		      sta	poly_flags+1	;   poly
     64  a058		       85 63		      sta	poly_flags+2	;     flags
     65  a05a		       8d f9 97 	      sta	spin_color
     66  a05d		       85 5c		      sta	write_pointer
     67  a05f		       85 5d		      sta	read_pointer
     68  a061		       8d 10 10 	      sta	waveform1
     69  a064		       8d 11 10 	      sta	waveform2
     70  a067		       8d 12 10 	      sta	waveform3
     71  a06a		       8d 13 10 	      sta	waveform4
     72  a06d
     73  a06d							;;; ==========================================================================
     74  a06d							;;; main LOOP!
     75  a06d				   loop
     76  a06d		       ee f9 97 	      inc	spin_color	; Prove we aren't 'frozen'
     77  a070							;jsr GetKey	  ; create events from keyboard if needed - TODO
     78  a070
     79  a070		       a5 5d		      lda	read_pointer
     80  a072		       c5 5c		      cmp	write_pointer
     81  a074		       f0 f7		      beq	loop	; Pointers match, no data
     82  a076							;;; ==========================================================================
     83  a076
     84  a076							; We have data!
     85  a076							; Advance pointer for next read
     86  a076		       e6 5d		      inc	read_pointer
     87  a078
     88  a078							; Read current byte
     89  a078		       aa		      tax		; Since A still contains the unincremented pointer
     90  a079		       bd 00 12 	      lda	buffer,x
     91  a07c
     92  a07c							; If Bit 7 is set, it means it's a status byte and we need to prepare for a new message
     93  a07c		       10 33		      bpl	data	; Not a status byte
     94  a07e
     95  a07e							; ----------------------------------------------------------------------------
     96  a07e							; Process a status byte  (Currently in A)
     97  a07e
     98  a07e							; Store the status byte temporarily
     99  a07e		       8d 14 10 	      sta	tempstatusbyte
    100  a081
    101  a081							; Handle System Common / System Realtime messages
    102  a081		       29 f0		      and	#$F0
    103  a083		       c9 f0		      cmp	#$F0
    104  a085		       d0 03		      bne	normalmessage
    105  a087		       4c 18 a1 	      jmp	system_realtime_proc
    106  a08a
    107  a08a				   normalmessage
    108  a08a							; Everything else, split into Command and Channel
    109  a08a		       ad 14 10 	      lda	tempstatusbyte
    110  a08d		       85 fb		      sta	statusbyte
    111  a08f		       29 f0		      and	#$F0	; Get the upper nybble
    112  a091		       8d 15 10 	      sta	command
    113  a094
    114  a094		       a5 fb		      lda	statusbyte
    115  a096		       29 0f		      and	#$0F	; Get the lower nybble
    116  a098		       85 49		      sta	channel
    117  a09a
    118  a09a							; Also, check how many data bytes should follow.
    119  a09a		       ad 15 10 	      lda	command
    120  a09d
    121  a09d							; 1 for Program Change
    122  a09d		       c9 c0		      cmp	#$C0	; Program change
    123  a09f		       f0 05		      beq	bytes1
    124  a0a1
    125  a0a1							; Assume 2 for all the rest
    126  a0a1				   bytes2
    127  a0a1		       a0 02		      ldy	#$02
    128  a0a3		       4c a8 a0 	      jmp	setbytes
    129  a0a6
    130  a0a6				   bytes1
    131  a0a6		       a0 01		      ldy	#$01
    132  a0a8							; Drop through
    133  a0a8
    134  a0a8				   setbytes
    135  a0a8		       84 25		      sty	bytesexpected
    136  a0aa
    137  a0aa							; Reset the midi counter to 0
    138  a0aa		       a2 00		      ldx	#$00
    139  a0ac		       86 24		      stx	midicounter
    140  a0ae
    141  a0ae		       4c 6d a0 	      jmp	loop	; Wait for next byte
    142  a0b1
    143  a0b1
    144  a0b1							; ----------------------------------------------------------------------------
    145  a0b1							; Store data byte
    146  a0b1
    147  a0b1				   data
    148  a0b1		       a6 24		      ldx	midicounter	; What byte are we at?
    149  a0b3		       95 fc		      sta	mididata0,x	; Store received midi data pointed by x
    150  a0b5
    151  a0b5		       e8		      inx		; x++
    152  a0b6		       86 24		      stx	midicounter	; and store x
    153  a0b8
    154  a0b8		       e4 25		      cpx	bytesexpected	; Number of data bytes expected in this MIDI message (i.e. 2)
    155  a0ba		       f0 03		      beq	messageproc	; Complete MIDI message received.
    156  a0bc
    157  a0bc							; Not complete, wait for more bytes.
    158  a0bc		       4c 6d a0 	      jmp	loop
    159  a0bf
    160  a0bf
    161  a0bf							; ----------------------------------------------------------------------------
    162  a0bf							; Process a complete MIDI message   (All but System)
    163  a0bf
    164  a0bf				   messageproc
    165  a0bf
    166  a0bf							; Display received message bytes
      0  a0bf					      HEXPOKE	(midi_display+0),statusbyte
      1  a0bf		       a9 4d		      lda	#<(midi_display+0)
      2  a0c1		       85 22		      sta	$22
      3  a0c3		       a9 1e		      lda	#>(midi_display+0)
      4  a0c5		       85 23		      sta	$23
      5  a0c7
      6  a0c7		       a5 fb		      lda	statusbyte
      7  a0c9		       20 b6 a5 	      jsr	hexstr
      0  a0cc					      HEXPOKE	(midi_display+3),mididata0
      1  a0cc		       a9 50		      lda	#<(midi_display+3)
      2  a0ce		       85 22		      sta	$22
      3  a0d0		       a9 1e		      lda	#>(midi_display+3)
      4  a0d2		       85 23		      sta	$23
      5  a0d4
      6  a0d4		       a5 fc		      lda	mididata0
      7  a0d6		       20 b6 a5 	      jsr	hexstr
      0  a0d9					      HEXPOKE	(midi_display+6),mididata1
      1  a0d9		       a9 53		      lda	#<(midi_display+6)
      2  a0db		       85 22		      sta	$22
      3  a0dd		       a9 1e		      lda	#>(midi_display+6)
      4  a0df		       85 23		      sta	$23
      5  a0e1
      6  a0e1		       a5 fd		      lda	mididata1
      7  a0e3		       20 b6 a5 	      jsr	hexstr
    170  a0e6
    171  a0e6							; Reset the midi counter to 0 again, in case running status
    172  a0e6		       a2 00		      ldx	#$00
    173  a0e8		       86 24		      stx	midicounter
    174  a0ea
    175  a0ea							; Determine Command
    176  a0ea		       ad 15 10 	      lda	command
    177  a0ed
    178  a0ed		       c9 80		      cmp	#$80	; Note Off
    179  a0ef		       f0 0f		      beq	donoteoff
    180  a0f1
    181  a0f1		       c9 90		      cmp	#$90	; Note On
    182  a0f3		       f0 11		      beq	donoteon
    183  a0f5
    184  a0f5		       c9 b0		      cmp	#$B0	; Control Change
    185  a0f7		       f0 13		      beq	docontrolchange
    186  a0f9
    187  a0f9		       c9 c0		      cmp	#$C0	; Program Change
    188  a0fb		       f0 15		      beq	doprogramchange
    189  a0fd
    190  a0fd							; All others (Aftertouch, etc.) ignored.
    191  a0fd		       4c 6d a0 	      jmp	loop
    192  a100
    193  a100				   donoteoff
    194  a100		       20 bf a1 	      jsr	noteoff
    195  a103		       4c 6d a0 	      jmp	loop
    196  a106
    197  a106				   donoteon
    198  a106		       20 1b a1 	      jsr	noteon
    199  a109		       4c 6d a0 	      jmp	loop
    200  a10c
    201  a10c				   docontrolchange
    202  a10c		       20 d8 a1 	      jsr	controlchange
    203  a10f		       4c 6d a0 	      jmp	loop
    204  a112
    205  a112				   doprogramchange
    206  a112		       20 72 a2 	      jsr	programchange
    207  a115		       4c 6d a0 	      jmp	loop
    208  a118
    209  a118
    210  a118							; ----------------------------------------------------------------------------
    211  a118							; Process a MIDI System Realtime  (for future)
    212  a118
    213  a118				   system_realtime_proc
    214  a118
    215  a118							; Display received message bytes
    216  a118							; HEXPOKE (midi_display+0),tempstatusbyte
    217  a118
    218  a118							; Blank the unused MIDI bytes
    219  a118							;lda #45  ; -
    220  a118							;sta midi_display+3
    221  a118							;sta midi_display+4
    222  a118							;sta midi_display+6
    223  a118							;sta midi_display+7
    224  a118
    225  a118							; Determine Command
    226  a118							;lda tempstatusbyte
    227  a118
    228  a118							;cmp #$...
    229  a118							;beq ...
    230  a118
    231  a118							; All ignored.
    232  a118		       4c 6d a0 	      jmp	loop
    233  a11b
    234  a11b
    235  a11b
    236  a11b
    237  a11b							;*****************************************************************************
    238  a11b							;*************************  MIDI Processing  *********************************
    239  a11b							;*****************************************************************************
    240  a11b
    241  a11b							; ---- Note On ---------------------------------------------------
    242  a11b							; 9c nn vv
    243  a11b
    244  a11b				   noteon
    245  a11b							; Special Case: Treat Velocity=0 as Note Off.	Velocity ignored otherwise.
    246  a11b		       a5 fd		      lda	mididata1
    247  a11d		       d0 03		      bne	noteon_contd
    248  a11f		       4c bf a1 	      jmp	noteoff
    249  a122
    250  a122				   noteon_contd
    251  a122		       a4 49		      ldy	channel	; Y now contains Channel # (0-offset)
    252  a124		       a6 fc		      ldx	mididata0	; X now contains MIDI Note #
    253  a126
    254  a126							; Special Case: Channel 5 used for Poly mode
    255  a126		       c0 04		      cpy	#$04
    256  a128		       d0 03		      bne	savenote
    257  a12a		       20 17 a6 	      jsr	get_poly_voice
    258  a12d
    259  a12d				   savenote
    260  a12d							; Save the note# so that later Note Offs only apply to this note.
    261  a12d		       8a		      txa
    262  a12e		       99 68 00 	      sta	lastnote,y
    263  a131
    264  a131							; Perform a table lookup of MIDI Note# to VIC Register
    265  a131							; Table to use depends on bank/voice/channel
    266  a131
    267  a131							; Check the bank
    268  a131		       a5 4a		      lda	bank
    269  a133
    270  a133		       c9 00		      cmp	#$00
    271  a135		       f0 0d		      beq	lookups_ntsc
    272  a137
    273  a137		       c9 01		      cmp	#$01
    274  a139		       f0 32		      beq	lookups_pal
    275  a13b
    276  a13b		       c9 02		      cmp	#$02
    277  a13d		       f0 57		      beq	lookups_alt
    278  a13f
    279  a13f		       c9 03		      cmp	#$03
    280  a141		       f0 53		      beq	lookups_alt
    281  a143
    282  a143							; Ignore all other banks
    283  a143		       60		      rts
    284  a144
    285  a144
    286  a144							; ------ NTSC -------
    287  a144
    288  a144				   lookups_ntsc
    289  a144		       c0 00		      cpy	#$00
    290  a146		       f0 0d		      beq	vlook1_ntsc
    291  a148
    292  a148		       c0 01		      cpy	#$01
    293  a14a		       f0 0f		      beq	vlook2_ntsc
    294  a14c
    295  a14c		       c0 02		      cpy	#$02
    296  a14e		       f0 11		      beq	vlook3_ntsc
    297  a150
    298  a150		       c0 03		      cpy	#$03
    299  a152		       f0 13		      beq	vlook4_ntsc
    300  a154
    301  a154							; Ignore all other channels
    302  a154		       60		      rts
    303  a155
    304  a155				   vlook1_ntsc
    305  a155		       bd f9 a6 	      lda	voice1lookup_ntsc,x
    306  a158		       4c f8 a2 	      jmp	setvoice
    307  a15b
    308  a15b				   vlook2_ntsc
    309  a15b		       bd 79 a7 	      lda	voice2lookup_ntsc,x
    310  a15e		       4c f8 a2 	      jmp	setvoice
    311  a161
    312  a161				   vlook3_ntsc
    313  a161		       bd f9 a7 	      lda	voice3lookup_ntsc,x
    314  a164		       4c f8 a2 	      jmp	setvoice
    315  a167
    316  a167				   vlook4_ntsc
    317  a167		       bd 79 a8 	      lda	voice4lookup_ntsc,x
    318  a16a		       4c f8 a2 	      jmp	setvoice
    319  a16d
    320  a16d							; ------ PAL -------
    321  a16d
    322  a16d				   lookups_pal
    323  a16d		       c0 00		      cpy	#$00
    324  a16f		       f0 0d		      beq	vlook1_pal
    325  a171
    326  a171		       c0 01		      cpy	#$01
    327  a173		       f0 0f		      beq	vlook2_pal
    328  a175
    329  a175		       c0 02		      cpy	#$02
    330  a177		       f0 11		      beq	vlook3_pal
    331  a179
    332  a179		       c0 03		      cpy	#$03
    333  a17b		       f0 13		      beq	vlook4_pal
    334  a17d
    335  a17d							; Ignore all other channels
    336  a17d		       60		      rts
    337  a17e
    338  a17e				   vlook1_pal
    339  a17e		       bd f9 a8 	      lda	voice1lookup_pal,x
    340  a181		       4c f8 a2 	      jmp	setvoice
    341  a184
    342  a184				   vlook2_pal
    343  a184		       bd 79 a9 	      lda	voice2lookup_pal,x
    344  a187		       4c f8 a2 	      jmp	setvoice
    345  a18a
    346  a18a				   vlook3_pal
    347  a18a		       bd f9 a9 	      lda	voice3lookup_pal,x
    348  a18d		       4c f8 a2 	      jmp	setvoice
    349  a190
    350  a190				   vlook4_pal
    351  a190		       bd 79 aa 	      lda	voice4lookup_pal,x
    352  a193		       4c f8 a2 	      jmp	setvoice
    353  a196
    354  a196							; ------ Alternate -------
    355  a196
    356  a196				   lookups_alt
    357  a196		       c0 00		      cpy	#$00
    358  a198		       f0 0d		      beq	vlook1_alt
    359  a19a
    360  a19a		       c0 01		      cpy	#$01
    361  a19c		       f0 0f		      beq	vlook2_alt
    362  a19e
    363  a19e		       c0 02		      cpy	#$02
    364  a1a0		       f0 11		      beq	vlook3_alt
    365  a1a2
    366  a1a2		       c0 03		      cpy	#$03
    367  a1a4		       f0 13		      beq	vlook4_alt
    368  a1a6
    369  a1a6							; Ignore all other channels
    370  a1a6		       60		      rts
    371  a1a7
    372  a1a7				   vlook1_alt
    373  a1a7		       bd f9 aa 	      lda	voice1lookup_alt,x
    374  a1aa		       4c f8 a2 	      jmp	setvoice
    375  a1ad
    376  a1ad				   vlook2_alt
    377  a1ad		       bd 79 ab 	      lda	voice2lookup_alt,x
    378  a1b0		       4c f8 a2 	      jmp	setvoice
    379  a1b3
    380  a1b3				   vlook3_alt
    381  a1b3		       bd f9 ab 	      lda	voice3lookup_alt,x
    382  a1b6		       4c f8 a2 	      jmp	setvoice
    383  a1b9
    384  a1b9				   vlook4_alt
    385  a1b9		       bd 79 ac 	      lda	voice4lookup_alt,x
    386  a1bc		       4c f8 a2 	      jmp	setvoice
    387  a1bf
    388  a1bf							; ---- Note Off --------------------------------------------------------------
    389  a1bf							; 8c nn vv
    390  a1bf
    391  a1bf				   noteoff
    392  a1bf		       a4 49		      ldy	channel	; Y now contains channel #
    393  a1c1
    394  a1c1							; Special Case: Channel 5 used for Poly mode
    395  a1c1		       c0 04		      cpy	#$04
    396  a1c3		       d0 06		      bne	noteoff_check
    397  a1c5
    398  a1c5		       20 2c a6 	      jsr	get_poly_voice_off
    399  a1c8		       4c d2 a1 	      jmp	noteoff_off
    400  a1cb
    401  a1cb				   noteoff_check
    402  a1cb							;For Channels 1-4
    403  a1cb							;Check if it matches the last.  If not, ignore.
    404  a1cb		       b9 68 00 	      lda	lastnote,y
    405  a1ce		       c5 fc		      cmp	mididata0
    406  a1d0		       d0 05		      bne	noteoff_x
    407  a1d2
    408  a1d2				   noteoff_off
    409  a1d2		       a9 00		      lda	#$00	; Off
    410  a1d4		       4c f8 a2 	      jmp	setvoice
    411  a1d7
    412  a1d7				   noteoff_x
    413  a1d7		       60		      rts
    414  a1d8
    415  a1d8							; ---- Control Change --------------------------------------------------------
    416  a1d8							; Bc CC vv
    417  a1d8
    418  a1d8				   controlchange
    419  a1d8		       a4 49		      ldy	channel	; Y now contains channel #
    420  a1da		       a5 fc		      lda	mididata0	; Controller number
    421  a1dc
    422  a1dc		       c9 00		      cmp	#00	; Bank select - decimal
    423  a1de		       f0 15		      beq	bankselect
    424  a1e0
    425  a1e0		       c9 01		      cmp	#01	; Modulation Wheel (coarse) - decimal
    426  a1e2		       f0 57		      beq	modwheel
    427  a1e4
    428  a1e4		       c9 07		      cmp	#07	; Volume (coarse) - decimal
    429  a1e6		       f0 5a		      beq	volume
    430  a1e8
    431  a1e8		       c9 4a		      cmp	#74	; Brightness - decimal
    432  a1ea		       f0 6d		      beq	screencolors
    433  a1ec
    434  a1ec		       c9 78		      cmp	#120	; All Sound Off - decimal
    435  a1ee		       f0 7d		      beq	soundoff
    436  a1f0
    437  a1f0		       c9 7b		      cmp	#123	; All Notes Off - decimal
    438  a1f2		       f0 79		      beq	soundoff
    439  a1f4
    440  a1f4							; Ignore all the rest
    441  a1f4		       60		      rts
    442  a1f5
    443  a1f5							; ---- Bank Select -----------------------------------------------------------
    444  a1f5							; Bc 00 vv
    445  a1f5
    446  a1f5				   bankselect
    447  a1f5		       a5 fd		      lda	mididata1
    448  a1f7		       29 03		      and	#$03	; A contains bank, 0-3
    449  a1f9		       85 4a		      sta	bank
    450  a1fb
    451  a1fb				   showbank
      0  a1fb					      HEXPOKE	(voice_display+132),bank
      1  a1fb		       a9 fb		      lda	#<(voice_display+132)
      2  a1fd		       85 22		      sta	$22
      3  a1ff		       a9 1e		      lda	#>(voice_display+132)
      4  a201		       85 23		      sta	$23
      5  a203
      6  a203		       a5 4a		      lda	bank
      7  a205		       20 b6 a5 	      jsr	hexstr
    453  a208
      0  a208					      PLOT	9,13
      1  a208		       a0 09		      ldy	#9
      2  a20a		       a2 0d		      ldx	#13
      3  a20c		       18		      clc
      4  a20d		       20 0a e5 	      jsr	$E50A
    455  a210
    456  a210		       a5 4a		      lda	bank
    457  a212
    458  a212		       c9 00		      cmp	#$00
    459  a214		       f0 0d		      beq	ntsc
    460  a216
    461  a216		       c9 01		      cmp	#$01
    462  a218		       f0 11		      beq	pal
    463  a21a
    464  a21a		       c9 02		      cmp	#$02
    465  a21c		       f0 15		      beq	alt
    466  a21e
    467  a21e		       c9 03		      cmp	#$03
    468  a220		       f0 11		      beq	alt
    469  a222
    470  a222							; Ignore the rest
    471  a222		       60		      rts
    472  a223
    473  a223				   ntsc
      0  a223					      PRINTSTRING	ntscstring
      1  a223		       a0 a5		      ldy	#>ntscstring
      2  a225		       a9 27		      lda	#<ntscstring
      3  a227		       20 1e cb 	      jsr	STROUT
    475  a22a		       60		      rts
    476  a22b
    477  a22b				   pal
      0  a22b					      PRINTSTRING	palstring
      1  a22b		       a0 a5		      ldy	#>palstring
      2  a22d		       a9 22		      lda	#<palstring
      3  a22f		       20 1e cb 	      jsr	STROUT
    479  a232		       60		      rts
    480  a233
    481  a233				   alt
      0  a233					      PRINTSTRING	altstring
      1  a233		       a0 a5		      ldy	#>altstring
      2  a235		       a9 2c		      lda	#<altstring
      3  a237		       20 1e cb 	      jsr	STROUT
    483  a23a		       60		      rts
    484  a23b
    485  a23b							; ---- MOD Wheel Controller --------------------------------------------------
    486  a23b							; Bc 01 vv
    487  a23b
    488  a23b							; Poke the data directly to the register, after OR'ing with $80
    489  a23b				   modwheel
    490  a23b		       a5 fd		      lda	mididata1
    491  a23d		       09 80		      ora	#$80
    492  a23f		       4c f8 a2 	      jmp	setvoice
    493  a242
    494  a242							; ---- Volume Controller -----------------------------------------------------
    495  a242							; Bc 07 vv
    496  a242
    497  a242				   volume
    498  a242		       a5 fd		      lda	mididata1
    499  a244		       4a		      lsr
    500  a245		       4a		      lsr
    501  a246		       4a		      lsr
    502  a247
    503  a247				   setvolume
    504  a247		       8d 0e 90 	      sta	sound_volume
      0  a24a					      HEXPOKE	(voice_display+110),sound_volume
      1  a24a		       a9 e5		      lda	#<(voice_display+110)
      2  a24c		       85 22		      sta	$22
      3  a24e		       a9 1e		      lda	#>(voice_display+110)
      4  a250		       85 23		      sta	$23
      5  a252
      6  a252		       ad 0e 90 	      lda	sound_volume
      7  a255		       20 b6 a5 	      jsr	hexstr
    506  a258		       60		      rts
    507  a259
    508  a259							; ---- Brightness Controller (used for screen color)--------------------------
    509  a259							; Bc 4a vv
    510  a259
    511  a259				   screencolors
    512  a259		       18		      clc
    513  a25a		       a5 fd		      lda	mididata1	; 7-bit
    514  a25c
    515  a25c		       29 07		      and	#%00000111	; Get border
    516  a25e		       85 6c		      sta	temp1
    517  a260
    518  a260		       a5 fd		      lda	mididata1
    519  a262		       29 78		      and	#%01111000	; Get background
    520  a264		       0a		      asl		; Shift 1 bit left
    521  a265
    522  a265		       05 6c		      ora	temp1	; Put border back in
    523  a267		       09 08		      ora	#%00001000	; No Reverse Mode
    524  a269
    525  a269		       8d 0f 90 	      sta	screen_colors
    526  a26c		       60		      rts
    527  a26d
    528  a26d							; ---- Sound Off / All Notes Off Controller-----------------------------------
    529  a26d							; Bc 78 xx
    530  a26d							; Bc 7B xx
    531  a26d
    532  a26d				   soundoff
    533  a26d		       a9 00		      lda	#$00	; Off
    534  a26f		       4c f8 a2 	      jmp	setvoice
    535  a272
    536  a272
    537  a272							; ---- Program Change --------------------------------------------------------
    538  a272							; Cc pn  <NOTE 2 bytes!>
    539  a272
    540  a272				   programchange
    541  a272							; Blank the unused MIDI byte
    542  a272		       a9 2d		      lda	#45	; -
    543  a274		       8d 53 1e 	      sta	midi_display+6
    544  a277		       8d 54 1e 	      sta	midi_display+7
    545  a27a
    546  a27a							; Get low nybble and replace, since there are only 16 viznut waveforms
    547  a27a		       a5 fc		      lda	mididata0
    548  a27c		       29 0f		      and	#$0f
    549  a27e		       85 fc		      sta	mididata0	; Note that this is the waveform NUMBER, not the VALUE!
    550  a280
    551  a280		       a4 49		      ldy	channel	; Y now contains channel #
    552  a282		       99 10 10 	      sta	waveform1,y	; Store waveform used
    553  a285
    554  a285		       c0 00		      cpy	#00
    555  a287		       f0 0d		      beq	pc_0
    556  a289
    557  a289		       c0 01		      cpy	#01
    558  a28b		       f0 18		      beq	pc_1
    559  a28d
    560  a28d		       c0 02		      cpy	#02
    561  a28f		       f0 23		      beq	pc_2
    562  a291
    563  a291		       c0 03		      cpy	#03	; Not sure if viznut's waveforms applies to the noise voice,
    564  a293		       f0 2e		      beq	pc_3	; but keep it in away.
    565  a295
    566  a295							; Ignore all other channels
    567  a295		       60		      rts
    568  a296
    569  a296							; Update the screen with Program# (viznut waveform code)
    570  a296							; Note that these are not actually used until setvoice is called below [1]
    571  a296
    572  a296				   pc_0
      0  a296					      HEXPOKE	(voice_display+ 5),waveform1
      1  a296		       a9 7c		      lda	#<(voice_display+ 5)
      2  a298		       85 22		      sta	$22
      3  a29a		       a9 1e		      lda	#>(voice_display+ 5)
      4  a29c		       85 23		      sta	$23
      5  a29e
      6  a29e		       ad 10 10 	      lda	waveform1
      7  a2a1		       20 b6 a5 	      jsr	hexstr
    574  a2a4		       60		      rts
    575  a2a5
    576  a2a5				   pc_1
      0  a2a5					      HEXPOKE	(voice_display+27),waveform2
      1  a2a5		       a9 92		      lda	#<(voice_display+27)
      2  a2a7		       85 22		      sta	$22
      3  a2a9		       a9 1e		      lda	#>(voice_display+27)
      4  a2ab		       85 23		      sta	$23
      5  a2ad
      6  a2ad		       ad 11 10 	      lda	waveform2
      7  a2b0		       20 b6 a5 	      jsr	hexstr
    578  a2b3		       60		      rts
    579  a2b4
    580  a2b4				   pc_2
      0  a2b4					      HEXPOKE	(voice_display+49),waveform3
      1  a2b4		       a9 a8		      lda	#<(voice_display+49)
      2  a2b6		       85 22		      sta	$22
      3  a2b8		       a9 1e		      lda	#>(voice_display+49)
      4  a2ba		       85 23		      sta	$23
      5  a2bc
      6  a2bc		       ad 12 10 	      lda	waveform3
      7  a2bf		       20 b6 a5 	      jsr	hexstr
    582  a2c2		       60		      rts
    583  a2c3
    584  a2c3				   pc_3
      0  a2c3					      HEXPOKE	(voice_display+71),waveform4
      1  a2c3		       a9 be		      lda	#<(voice_display+71)
      2  a2c5		       85 22		      sta	$22
      3  a2c7		       a9 1e		      lda	#>(voice_display+71)
      4  a2c9		       85 23		      sta	$23
      5  a2cb
      6  a2cb		       ad 13 10 	      lda	waveform4
      7  a2ce		       20 b6 a5 	      jsr	hexstr
    586  a2d1		       60		      rts
    587  a2d2
    588  a2d2
    589  a2d2							;---------------------------------------------------------
    590  a2d2							; Set a voice using viznut's setwave function.
    591  a2d2							; If a sound is already playing, fine.  But if not, need a "short" delay.  TODO ***
    592  a2d2
    593  a2d2				   viznut
    594  a2d2		       a4 49		      ldy	channel	; Channel # (0-3)
    595  a2d4		       b9 31 a5 	      lda	voice_to_register,y
    596  a2d7		       8d 20 10 	      sta	setwavechannel
    597  a2da
    598  a2da		       a5 5e		      lda	currentvalue	; X now contains initial frequency of selected channel
    599  a2dc		       8d 21 10 	      sta	setwavefrequency
    600  a2df
    601  a2df		       a4 49		      ldy	channel
    602  a2e1		       b9 10 10 	      lda	waveform1,y	; Retrieve the last desired waveform# for this channel
    603  a2e4		       aa		      tax
    604  a2e5		       bd e9 a6 	      lda	viznutwaveforms,x	; Retrieve the desired shift register contents for that waveform#
    605  a2e8		       8d 22 10 	      sta	setwaveshiftreg
    606  a2eb
    607  a2eb							; Set X,Y,A as required and set the waveform.
    608  a2eb		       ac 20 10 	      ldy	setwavechannel
    609  a2ee		       ae 21 10 	      ldx	setwavefrequency
    610  a2f1		       ad 22 10 	      lda	setwaveshiftreg
    611  a2f4		       20 00 11 	      jsr	setwave
    612  a2f7
    613  a2f7							; TODO, update the screen
    614  a2f7		       60		      rts
    615  a2f8
    616  a2f8
    617  a2f8							;***************************************************************************
    618  a2f8							;*******************  Set/Display Functions  *******************************
    619  a2f8							;***************************************************************************
    620  a2f8
    621  a2f8							; Dispatcher for setting the appropriate voice and updating the screen
    622  a2f8							; Channel# in Y (Channel 0 = Voice 1, etc)
    623  a2f8							; Value to set it to in A.
    624  a2f8
    625  a2f8				   setvoice
    626  a2f8		       85 5e		      sta	currentvalue
    627  a2fa
    628  a2fa							; Before setting the voice, check if a viznut waveform was selected previously [1]
    629  a2fa							; If so, handle that separately.
    630  a2fa							;lda waveform1,y
    631  a2fa							;bne viznut
    632  a2fa
    633  a2fa							; Nope, carry on.
    634  a2fa		       a5 5e		      lda	currentvalue
    635  a2fc		       a4 49		      ldy	channel	; Y now contains channel #
    636  a2fe
    637  a2fe		       c0 00		      cpy	#$00
    638  a300		       f0 0d		      beq	v1
    639  a302
    640  a302		       c0 01		      cpy	#$01
    641  a304		       f0 1b		      beq	v2
    642  a306
    643  a306		       c0 02		      cpy	#$02
    644  a308		       f0 29		      beq	v3
    645  a30a
    646  a30a		       c0 03		      cpy	#$03
    647  a30c		       f0 37		      beq	v4
    648  a30e
    649  a30e							; Ignore all other channels
    650  a30e		       60		      rts
    651  a30f
    652  a30f							; ---- Voice 1 -------
    653  a30f				   v1
    654  a30f		       8d 0a 90 	      sta	sound_voice1
      0  a312					      HEXPOKE	(voice_display+00),sound_voice1
      1  a312		       a9 77		      lda	#<(voice_display+00)
      2  a314		       85 22		      sta	$22
      3  a316		       a9 1e		      lda	#>(voice_display+00)
      4  a318		       85 23		      sta	$23
      5  a31a
      6  a31a		       ad 0a 90 	      lda	sound_voice1
      7  a31d		       20 b6 a5 	      jsr	hexstr
    656  a320		       60		      rts
    657  a321
    658  a321							; ---- Voice 2 -------
    659  a321				   v2
    660  a321		       8d 0b 90 	      sta	sound_voice2
      0  a324					      HEXPOKE	(voice_display+22),sound_voice2
      1  a324		       a9 8d		      lda	#<(voice_display+22)
      2  a326		       85 22		      sta	$22
      3  a328		       a9 1e		      lda	#>(voice_display+22)
      4  a32a		       85 23		      sta	$23
      5  a32c
      6  a32c		       ad 0b 90 	      lda	sound_voice2
      7  a32f		       20 b6 a5 	      jsr	hexstr
    662  a332		       60		      rts
    663  a333
    664  a333							; ---- Voice 3 -------
    665  a333				   v3
    666  a333		       8d 0c 90 	      sta	sound_voice3
      0  a336					      HEXPOKE	(voice_display+44),sound_voice3
      1  a336		       a9 a3		      lda	#<(voice_display+44)
      2  a338		       85 22		      sta	$22
      3  a33a		       a9 1e		      lda	#>(voice_display+44)
      4  a33c		       85 23		      sta	$23
      5  a33e
      6  a33e		       ad 0c 90 	      lda	sound_voice3
      7  a341		       20 b6 a5 	      jsr	hexstr
    668  a344		       60		      rts
    669  a345
    670  a345							; ---- Voice 4 -------
    671  a345				   v4
    672  a345		       8d 0d 90 	      sta	sound_noise
      0  a348					      HEXPOKE	(voice_display+66),sound_noise
      1  a348		       a9 b9		      lda	#<(voice_display+66)
      2  a34a		       85 22		      sta	$22
      3  a34c		       a9 1e		      lda	#>(voice_display+66)
      4  a34e		       85 23		      sta	$23
      5  a350
      6  a350		       ad 0d 90 	      lda	sound_noise
      7  a353		       20 b6 a5 	      jsr	hexstr
    674  a356		       60		      rts
    675  a357
    676  a357							; ----------------------------------------------------------------------------
    677  a357
    678  a357				   setcolors
    679  a357		       a2 00		      ldx	#$00
    680  a359		       a9 00		      lda	#$00
    681  a35b				   setcolorsloop
    682  a35b		       9d 00 96 	      sta	$9600,x
    683  a35e		       9d 00 97 	      sta	$9700,x
    684  a361		       e8		      inx
    685  a362		       e0 00		      cpx	#$00
    686  a364		       d0 f5		      bne	setcolorsloop
    687  a366		       60		      rts
    688  a367
    689  a367							; ----------------------------------------------------------------------------
    690  a367							; Draw Main Screen
    691  a367
    692  a367				   mainscreen
    693  a367		       20 5f e5 	      jsr	CLRSCREEN
    694  a36a		       a9 1f		      lda	#31	; Decimal, white and yellow
    695  a36c		       8d 0f 90 	      sta	screen_colors
    696  a36f		       a9 06		      lda	#$06	; Blue
    697  a371		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a374					      PRINTSTRING	maintext
      1  a374		       a0 a3		      ldy	#>maintext
      2  a376		       a9 c5		      lda	#<maintext
      3  a378		       20 1e cb 	      jsr	STROUT
    699  a37b		       a9 7f		      lda	#$7F	; was#$6C
    700  a37d		       8d f9 1f 	      sta	spin_display
    701  a380		       60		      rts
    702  a381
    703  a381
    704  a381							; ----------------------------------------------------------------------------
    705  a381							; Draw Credits Screen
    706  a381
    707  a381				   creditscreen
    708  a381		       20 5f e5 	      jsr	CLRSCREEN
    709  a384		       a9 1e		      lda	#30	; Decimal, white and blue
    710  a386		       8d 0f 90 	      sta	screen_colors
    711  a389		       a9 02		      lda	#$02	; Red
    712  a38b		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a38e					      PRINTSTRING	credits
      1  a38e		       a0 a4		      ldy	#>credits
      2  a390		       a9 60		      lda	#<credits
      3  a392		       20 1e cb 	      jsr	STROUT
    714  a395		       60		      rts
    715  a396
    716  a396
    717  a396							; ----------------------------------------------------------------------------
    718  a396							; setwave needs to start on a page and is self-modifying,
    719  a396							; so it is copied to RAM here
    720  a396
    721  a396				   setwavecopy
    722  a396		       a2 00		      ldx	#$00
    723  a398				   copy1
    724  a398		       bd bc a6 	      lda	setwaveorg,x
    725  a39b		       9d 00 11 	      sta	setwave,x
    726  a39e		       e8		      inx
    727  a39f		       d0 f7		      bne	copy1
    728  a3a1		       60		      rts
    729  a3a2
    730  a3a2
    731  a3a2							; ----------------------------------------------------------------------------
    732  a3a2							; Set up the font
    733  a3a2							;
    734  a3a2
    735  a3a2				   setupfont
    736  a3a2		       a2 00		      ldx	#$00
    737  a3a4				   copy2
    738  a3a4		       bd f9 ac 	      lda	fontorg,x
    739  a3a7		       9d 00 18 	      sta	font,x
    740  a3aa		       bd f9 ad 	      lda	fontorg+$100,x
    741  a3ad		       9d 00 19 	      sta	font+$100,x
    742  a3b0		       bd f9 ae 	      lda	fontorg+$200,x
    743  a3b3		       9d 00 1a 	      sta	font+$200,x
    744  a3b6		       bd f9 af 	      lda	fontorg+$300,x
    745  a3b9		       9d 00 1b 	      sta	font+$300,x
    746  a3bc		       e8		      inx
    747  a3bd		       d0 e5		      bne	copy2
    748  a3bf
    749  a3bf		       a9 fe		      lda	#254	; Decimal  Points char. to 6144
    750  a3c1		       8d 05 90 	      sta	$9005
    751  a3c4
    752  a3c4		       60		      rts
    753  a3c5
    754  a3c5							; ----------------------------------------------------------------------------
    755  a3c5							; Strings
    756  a3c5
    757  a3c5				   maintext
    758  a3c5		       0e 08		      byte.b	CG_LCS, CG_DCS
    759  a3c7		       2a 76 69 63*	      byte.b	"*vic20 midi iNTERFACE*", CRLF
    760  a3de		       0d		      byte.b	CRLF
    761  a3df		       6d 69 64 69*	      byte.b	"midi dATA: --:--:--", CRLF
    762  a3f3		       0d		      byte.b	CRLF
    763  a3f4		       76 4f 49 43*	      byte.b	"vOICE 1: -- / --", CRLF
    764  a405		       76 4f 49 43*	      byte.b	"vOICE 2: -- / --", CRLF
    765  a416		       76 4f 49 43*	      byte.b	"vOICE 3: -- / --", CRLF
    766  a427		       76 4f 49 43*	      byte.b	"vOICE 4: -- / --", CRLF
    767  a438		       0d		      byte.b	CRLF
    768  a439		       76 4f 4c 55*	      byte.b	"vOLUME : --", CRLF
    769  a445		       62 41 4e 4b*	      byte.b	"bANK	 : --", CRLF
    770  a451		       0d		      byte.b	CRLF
    771  a452		       73 59 53 54*	      byte.b	"sYSTEM : ???", CRLF
    772  a45f		       00		      byte.b	0
    773  a460
    774  a460
    775  a460				   credits
    776  a460		       0e 08		      byte.b	CG_LCS, CG_DCS
    777  a462		       20 2a 76 69*	      byte.b	" *vic20 midi cREDITS*", CRLF
    778  a478		       0d		      byte.b	CRLF
    779  a479		       68 41 52 44*	      byte.b	"hARDWARE:", CRLF
    780  a483		       0d		      byte.b	CRLF
    781  a484		       20 20 6a 49*	      byte.b	"  jIM bRAIN", CRLF
    782  a490		       20 20 66 52*	      byte.b	"  fRANCOIS lEVEILLE", CRLF
    783  a4a4		       20 20 6c 64*	      byte.b	"  ld bALL", CRLF
    784  a4ae		       0d		      byte.b	CRLF
    785  a4af		       73 4f 46 54*	      byte.b	"sOFTWARE:", CRLF
    786  a4b9		       0d		      byte.b	CRLF
    787  a4ba		       20 6c 45 49*	      byte.b	" lEIF bLOOMQUIST", CRLF
    788  a4cb		       20 64 41 56*	      byte.b	" dAVID vIENS", CRLF
    789  a4d8		       20 6d 49 43*	      byte.b	" mICHAEL kIRCHER", CRLF
    790  a4e9		       20 76 49 5a*	      byte.b	" vIZNUT", CRLF
    791  a4f1		       0d		      byte.b	CRLF
    792  a4f2		       74 48 41 4e*	      byte.b	"tHANKS TO EVERYONE", CRLF
    793  a505		       4f 4e 20 54*	      byte.b	"ON THE vic20 dENIAL", CRLF
    794  a519		       46 4f 52 55*	      byte.b	"FORUMS!", CRLF
    795  a521		       00		      byte.b	0
    796  a522
    797  a522				   palstring
    798  a522		       70 61 6c 20*	      .byte.b	"pal ",0
    799  a527
    800  a527				   ntscstring
    801  a527		       6e 74 73 63*	      .byte.b	"ntsc",0
    802  a52c
    803  a52c				   altstring
    804  a52c		       61 6c 74 20*	      .byte.b	"alt ",0
    805  a531
    806  a531							; ----------------------------------------------------------------------------
    807  a531							; Lookup table between voice #(0-3) and low byte of register# ($0A-$0D)
    808  a531
    809  a531				   voice_to_register
    810  a531		       0a 0b 0c 0d	      byte.b	$0A,$0B,$0C,$0D
    811  a535
    812  a535
    813  a535							; ----------------------------------------------------------------------------
    814  a535							; Code includes
    815  a535
------- FILE hardware.asm LEVEL 2 PASS 2
      0  a535					      include	"hardware.asm"
      1  a535							;***************************************************************************
      2  a535							;*******************	 Hardware Functions   *******************************
      3  a535							;***************************************************************************
      4  a535
      5  a535							; ----------------------------------------------------------------------------
      6  a535							; Confirm the presence of the ST16C450 UART
      7  a535				   checkuart
      8  a535		       a9 55		      lda	#$55
      9  a537		       8d 07 9c 	      sta	UART_SCRATCHPAD
     10  a53a
     11  a53a		       ad 07 9c 	      lda	UART_SCRATCHPAD
     12  a53d		       c9 55		      cmp	#$55
     13  a53f		       f0 1c		      beq	checkuart_ok
     14  a541
     15  a541							; Not found!
      0  a541					      PLOT	0,20
      1  a541		       a0 00		      ldy	#0
      2  a543		       a2 14		      ldx	#20
      3  a545		       18		      clc
      4  a546		       20 0a e5 	      jsr	$E50A
      0  a549					      PRINTSTRING	nouart
      1  a549		       a0 a5		      ldy	#>nouart
      2  a54b		       a9 a0		      lda	#<nouart
      3  a54d		       20 1e cb 	      jsr	STROUT
     18  a550
     19  a550				   uloop
     20  a550		       a9 18		      lda	#24
     21  a552		       8d 0f 90 	      sta	screen_colors
     22  a555		       a9 1a		      lda	#26
     23  a557		       8d 0f 90 	      sta	screen_colors
     24  a55a		       4c 50 a5 	      jmp	uloop
     25  a55d
     26  a55d				   checkuart_ok
     27  a55d		       60		      rts
     28  a55e
     29  a55e							; ----------------------------------------------------------------------------
     30  a55e							; Set up the UART
     31  a55e
     32  a55e				   resetuart
     33  a55e							; Expose the divisor latch.
     34  a55e		       a9 80		      lda	#%10000000
     35  a560		       8d 03 9c 	      sta	UART_LCR
     36  a563
     37  a563							; Set the MIDI baud rate.
     38  a563							; The ST16C450 datasheet says that it divides the input clock rate by
     39  a563							; 16, so with a 2MHz crystal on board, that gives
     40  a563							; 2000000 * (1/16) * (1/x) = 31250.  Solving gives x=4 for the low
     41  a563							; byte of the divisor, and 0 for the high byte.
     42  a563
     43  a563		       a2 00		      ldx	#$00
     44  a565		       a0 04		      ldy	#$04	; For 2MHz crystal   (Original protype from Francois)
     45  a567							;ldy #$08  ; For 4MHz crystal
     46  a567		       8e 01 9c 	      stx	UART_DIVISOR_MSB
     47  a56a		       8c 00 9c 	      sty	UART_DIVISOR_LSB
     48  a56d
     49  a56d							; Set to MIDI: Word length 8, Stop bits 1, no parity (also hides divisor latch)
     50  a56d		       a9 03		      lda	#%00000011
     51  a56f		       8d 03 9c 	      sta	UART_LCR
     52  a572
     53  a572							; Enable the interrupt when data is received
     54  a572		       a9 01		      lda	#%00000001
     55  a574		       8d 01 9c 	      sta	UART_IER
     56  a577		       60		      rts
     57  a578
     58  a578							; ----------------------------------------------------------------------------
     59  a578							; Set up the IRQ for reading bytes from the UART
     60  a578
     61  a578				   setupirq
     62  a578		       78		      sei
     63  a579
     64  a579							; Point to my interrupt vector
     65  a579		       a9 8d		      lda	#<theirq
     66  a57b		       8d 14 03 	      sta	$0314
     67  a57e		       a9 a5		      lda	#>theirq
     68  a580		       8d 15 03 	      sta	$0315
     69  a583
     70  a583							; Disable timer interrupts
     71  a583
     72  a583		       a9 60		      lda	#%01100000
     73  a585		       8d 2e 91 	      sta	$912e	; disable and acknowledge interrupts
     74  a588		       8d 2d 91 	      sta	$912d
     75  a58b							;sta $911e	; disable NMIs (Restore key)
     76  a58b
     77  a58b		       58		      cli
     78  a58c		       60		      rts
     79  a58d
     80  a58d							; ----------------------------------------------------------------------------
     81  a58d							; The IRQ.
     82  a58d
     83  a58d				   theirq
     84  a58d							; Fetch the received byte
     85  a58d		       ad 00 9c 	      lda	UART_RXTX	;get data
     86  a590		       a4 5c		      ldy	write_pointer
     87  a592		       99 00 12 	      sta	buffer,y
     88  a595		       e6 5c		      inc	write_pointer
     89  a597
     90  a597							; Clear the interrupt from the UART by reading the status register
     91  a597		       ad 02 9c 	      lda	UART_ISR
     92  a59a
     93  a59a		       4c 56 ff 	      jmp	$ff56	; Use this in place of rti because it restores the A,X,Y registers from the stack
     94  a59d							;jmp $eabf	; return to normal IRQ	(scans keyboard and stuff)
     95  a59d
     96  a59d
     97  a59d							; ----------------------------------------------------------------------------
     98  a59d							; Handle the RESTORE key
     99  a59d
    100  a59d				   RESTORE
    101  a59d		       4c c7 fe 	      jmp	$fec7	; Continue as if no cartridge installed
    102  a5a0
    103  a5a0
    104  a5a0							; ----------------------------------------------------------------------------
    105  a5a0							; Strings
    106  a5a0
    107  a5a0				   nouart
    108  a5a0		       7f 7f 20 75*	      byte.b	127,127, " uart NOT FOUND! ", 127,127
    109  a5b5		       00		      byte.b	0
    110  a5b6
    111  a5b6							; EOF!
------- FILE vicmidi.asm
------- FILE utils.asm LEVEL 2 PASS 2
      0  a5b6					      include	"utils.asm"
      1  a5b6							; VIC Version by Schema/AIC (Leif Bloomquist)
      2  a5b6							; Original by Six/Style (Oliver VieBrooks)
      3  a5b6
      4  a5b6							; Fast POKE of hex value to screen
      5  a5b6							; also see HEXPOKE macro
      6  a5b6							; print hex  char $ of number in a at location referenced by screen_temp
      7  a5b6
      8  a5b6				   hexstr
      9  a5b6		       a0 00		      ldy	#$00
     10  a5b8		       48		      pha
     11  a5b9		       29 f0		      and	#$f0
     12  a5bb		       18		      clc
     13  a5bc		       4a		      lsr
     14  a5bd		       4a		      lsr
     15  a5be		       4a		      lsr
     16  a5bf		       4a		      lsr
     17  a5c0		       aa		      tax
     18  a5c1		       bd f2 a5 	      lda	hexstring,x
     19  a5c4		       91 22		      sta	($22),y
     20  a5c6
     21  a5c6		       c8		      iny
     22  a5c7		       68		      pla
     23  a5c8		       29 0f		      and	#$0f
     24  a5ca		       aa		      tax
     25  a5cb		       bd f2 a5 	      lda	hexstring,x
     26  a5ce		       91 22		      sta	($22),y
     27  a5d0		       60		      rts
     28  a5d1
     29  a5d1
     30  a5d1							; print hex  char $ of number in a    SLOW!
     31  a5d1		       00	   hexx       dc.b	$00
     32  a5d2
     33  a5d2				   printhexstr
     34  a5d2		       8e d1 a5 	      stx	hexx
     35  a5d5		       48		      pha
     36  a5d6		       29 f0		      and	#$f0
     37  a5d8		       18		      clc
     38  a5d9		       4a		      lsr
     39  a5da		       4a		      lsr
     40  a5db		       4a		      lsr
     41  a5dc		       4a		      lsr
     42  a5dd		       aa		      tax
     43  a5de		       bd f2 a5 	      lda	hexstring,x
     44  a5e1		       20 d2 ff 	      jsr	$ffd2
     45  a5e4
     46  a5e4		       68		      pla
     47  a5e5		       29 0f		      and	#$0f
     48  a5e7		       aa		      tax
     49  a5e8		       bd f2 a5 	      lda	hexstring,x
     50  a5eb		       20 d2 ff 	      jsr	$ffd2
     51  a5ee		       ae d1 a5 	      ldx	hexx
     52  a5f1		       60		      rts
     53  a5f2
     54  a5f2				   hexstring
     55  a5f2		       30 31 32 33*	      .byte.b	"0123456789ABCDEF"
     56  a602
     57  a602
     58  a602							; ==============================================================
     59  a602							; Most defaults are NTSC.  This code overrides for PAL.
     60  a602							; ==============================================================
     61  a602
     62  a602				   setup_pal
     63  a602		       ad e4 ed 	      lda	$EDE4
     64  a605		       c9 0c		      cmp	#$0C
     65  a607		       f0 07		      beq	DOPAL
     66  a609
     67  a609							; NTSC System detected
     68  a609		       a9 00		      lda	#$00
     69  a60b		       85 4a		      sta	bank
     70  a60d		       4c fb a1 	      jmp	showbank	; There's an rts there
     71  a610
     72  a610							; PAL System detected
     73  a610				   DOPAL
     74  a610		       a9 01		      lda	#$01
     75  a612		       85 4a		      sta	bank
     76  a614		       4c fb a1 	      jmp	showbank	; There's an rts there
     77  a617
     78  a617							; EOF!
------- FILE vicmidi.asm
------- FILE polymode.asm LEVEL 2 PASS 2
      0  a617					      include	"polymode.asm"
      1  a617
      2  a617							;***************************************************************************
      3  a617							;***************  Determine next Channel in Poly Mode (set Y) **************
      4  a617							;***************************************************************************
      5  a617				   get_poly_voice
      6  a617		       a0 00		      ldy	#$00
      7  a619
      8  a619				   get_poly_voice_loop
      9  a619		       b9 61 00 	      lda	poly_flags,y	; 0=not in use, 1=in use
     10  a61c		       f0 08		      beq	get_poly_voice_x
     11  a61e		       c8		      iny
     12  a61f		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     13  a621		       d0 f6		      bne	get_poly_voice_loop
     14  a623
     15  a623							; No free voices, ignore
     16  a623		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note On code
     17  a625		       60		      rts
     18  a626
     19  a626				   get_poly_voice_x
     20  a626		       a9 01		      lda	#$01
     21  a628		       99 61 00 	      sta	poly_flags,y
     22  a62b		       60		      rts
     23  a62c
     24  a62c
     25  a62c							;***************************************************************************
     26  a62c							;********  Determine Channel to turn off in Poly Mode (set Y) **************
     27  a62c							;***************************************************************************
     28  a62c				   get_poly_voice_off
     29  a62c
     30  a62c		       a0 00		      ldy	#$00
     31  a62e
     32  a62e				   get_poly_voice_off_loop
     33  a62e		       b9 61 00 	      lda	poly_flags,y	; Is the channel in use?
     34  a631		       f0 07		      beq	poly_next	; No, so skip it
     35  a633
     36  a633		       b9 68 00 	      lda	lastnote,y	; Get last note on this voice
     37  a636		       c5 fc		      cmp	mididata0	; Compare to note received
     38  a638		       f0 0b		      beq	get_poly_voice_off_x	; Matched!
     39  a63a
     40  a63a				   poly_next
     41  a63a		       c8		      iny		; Next channel
     42  a63b		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     43  a63d		       d0 ef		      bne	get_poly_voice_off_loop
     44  a63f
     45  a63f							; No match to the note to turn off, ignore
     46  a63f		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note Off code
     47  a641		       ee 0f 90 	      inc	screen_colors	; DEBUG
     48  a644		       60		      rts
     49  a645
     50  a645				   get_poly_voice_off_x
     51  a645		       a9 00		      lda	#$00
     52  a647		       99 61 00 	      sta	poly_flags,y
     53  a64a		       60		      rts
     54  a64b
------- FILE vicmidi.asm
------- FILE keyboard.asm LEVEL 2 PASS 2
      0  a64b					      include	"keyboard.asm"
      1  a64b							;*******************************************************************************************
      2  a64b							;********************************  keyboard stuff  *****************************************
      3  a64b							;*******************************************************************************************
      4  a64b
      5  a64b							; --------------------------------------------------------------------------------------------------
      6  a64b							;;;;;;;;;;;;;;; keyboard stuff
      7  a64b							;previous keyboard column bits
      8  a64b		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
      9  a64b		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     10  a64b		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     11  a64b		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     12  a64b
     13  a64b		       91 20	   kb_column  =	$9120
     14  a64b		       91 21	   kb_row     =	$9121
     15  a64b
     16  a64b							; 9121   9120: (Write column value to this address)
     17  a64b							;
     18  a64b							;	  7f	  bf	  df	  ef	  f7	  fb	  fd	  fe
     19  a64b							;
     20  a64b							;  fe	  2	  q	  CBM	  Space   RunStop Control Lft_arr 1
     21  a64b							;  fd	  4	  e	  s	  z	  Shift_L a	  w	  3
     22  a64b							;  fb	  6	  t	  f	  c	  x	  d	  r	  5
     23  a64b							;  f7	  8	  u	  h	  b	  v	  g	  y	  7
     24  a64b							;  ef	  0	  o	  k	  m	  n	  j	  i	  9
     25  a64b							;  df	  -	  @	  :	  .	  ,	  l	  p	  +
     26  a64b							;  bf	  Home	  Up_arr  =	  Shift_R /	  ;	  *	  GBP
     27  a64b							;  7f	  F7	  F5	  F3	  F1	  Down	  Right   Return  Del
     28  a64b
     29  a64b				   GetKey
     30  a64b		       78		      sei
     31  a64c							; this should not be done, we want to compare the OLD recorded status with new one
     32  a64c							;lda #$0
     33  a64c							;sta kb_column
     34  a64c							;lda kb_row
     35  a64c							;cmp #$FF
     36  a64c							;beq NoKey	 ; no key at all pressed
     37  a64c
     38  a64c				   Check7F
     39  a64c							;now check for each column
     40  a64c		       a9 7f		      lda	#$7F
     41  a64e		       8d 20 91 	      sta	kb_column
     42  a651		       ad 21 91 	      lda	kb_row
     43  a654		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     44  a656		       c5 4e		      cmp	c0
     45  a658		       f0 08		      beq	CheckBF	; these arent the droids you are looking for move along
     46  a65a		       85 4e		      sta	c0
     47  a65c		       8d 00 1e 	      sta	$1E00
     48  a65f		       4c a1 a6 	      jmp	KeyDone
     49  a662				   CheckBF
     50  a662							;now check for each column
     51  a662		       a9 bf		      lda	#$BF
     52  a664		       8d 20 91 	      sta	kb_column
     53  a667		       ad 21 91 	      lda	kb_row
     54  a66a		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     55  a66c		       c5 4f		      cmp	c1
     56  a66e		       f0 08		      beq	CheckFD	; these arent the droids you are looking for move along
     57  a670		       85 4f		      sta	c1
     58  a672		       8d 01 1e 	      sta	$1E01
     59  a675		       4c a1 a6 	      jmp	KeyDone
     60  a678				   CheckFD
     61  a678							;now check for each column
     62  a678		       a9 fd		      lda	#$FD
     63  a67a		       8d 20 91 	      sta	kb_column
     64  a67d		       ad 21 91 	      lda	kb_row
     65  a680		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     66  a682		       c5 50		      cmp	c2
     67  a684		       f0 08		      beq	CheckFE	; these arent the droids you are looking for move along
     68  a686		       85 50		      sta	c2
     69  a688		       8d 02 1e 	      sta	$1E02
     70  a68b		       4c a1 a6 	      jmp	KeyDone
     71  a68e				   CheckFE
     72  a68e							;now check for each column
     73  a68e		       a9 fe		      lda	#$FE
     74  a690		       8d 20 91 	      sta	kb_column
     75  a693		       ad 21 91 	      lda	kb_row
     76  a696		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     77  a698		       c5 51		      cmp	c3
     78  a69a		       f0 05		      beq	KeyDone	; these arent the droids you are looking for move along
     79  a69c		       85 51		      sta	c3
     80  a69e		       8d 03 1e 	      sta	$1E03
     81  a6a1				   KeyDone
     82  a6a1		       58		      cli
     83  a6a2		       60		      rts
     84  a6a3
     85  a6a3							; ---------------------------------------------------------------------------
     86  a6a3
     87  a6a3				   setchars
     88  a6a3		       a2 00		      ldx	#$00
     89  a6a5		       a9 51		      lda	#$51
     90  a6a7				   setcharsloop1
     91  a6a7		       9d 00 1e 	      sta	$1E00,x
     92  a6aa		       e8		      inx
     93  a6ab		       e0 00		      cpx	#$00
     94  a6ad		       d0 f8		      bne	setcharsloop1
     95  a6af		       a2 00		      ldx	#$00
     96  a6b1		       a9 66		      lda	#$66
     97  a6b3				   setcharsloop2
     98  a6b3		       9d 00 1f 	      sta	$1F00,x
     99  a6b6		       e8		      inx
    100  a6b7		       e0 00		      cpx	#$00
    101  a6b9		       d0 f8		      bne	setcharsloop2
    102  a6bb		       60		      rts
------- FILE vicmidi.asm
    820  a6bc				   setwaveorg
------- FILE setwave.asm LEVEL 2 PASS 2
      0  a6bc					      include	"setwave.asm"
      1  a6bc							;A short generic routine for setting any shift register value for any pulse
      2  a6bc							;channel in about 150 cpu clocks. Use it freely.
      3  a6bc
      4  a6bc							; USAGE: y = channel ($0a..$0c)
      5  a6bc							;	  x = initial frequency
      6  a6bc							;	  a = shift register contents
      7  a6bc							;
      8  a6bc							; WARNING for purists: self-modifying code, illegal opcodes.
      9  a6bc							;
     10  a6bc							; code align assertion: make sure that the loop is within a page.
     11  a6bc							; oscillator assertion: make sure that the channel has been at $7e
     12  a6bc							; for some time before calling this function.
     13  a6bc							; put TMP and TMP2 in the zero page.
     14  a6bc
     15  a6bc		       8e de a6 	      stx	initfreq	; 4
     16  a6bf
     17  a6bf		       8c cd a6 	      sty	ch0	; 4
     18  a6c2		       8c d8 a6 	      sty	ch1	; 4
     19  a6c5		       be dc a6 	      ldx	ldfqmasks-$a,y	; 4
     20  a6c8		       85 57		      sta	TMP	; 3
     21  a6ca
     22  a6ca		       09 7f		      ora	#$7f	; 2
     23  a6cc
     24  a6cc		       8f 0c 90 	      .byte.b	$8f,$0C,$90	; axs $900c  ; 4  [$900c] = a AND x	     *ILLEGAL OPCODE*
     25  a6cf
     26  a6cf		       a6 cd	   ch0	      =	*-2
     27  a6cf		       84 58		      sty	TMP2	; 3
     28  a6d1		       a0 07		      ldy	#7	; 2
     29  a6d3
     30  a6d3				   l0
     31  a6d3		       a9 7f		      lda	#$7f	; 2
     32  a6d5		       07 57		      .byte.b	$07,TMP	; aso TMP		 ; 5  asl tmp; a = [tmp] OR $7f  *ILLEGAL OPCODE*
     33  a6d7		       8f 0c 90 	      .byte.b	$8F,$0C,$90	; axs $900c	 ; 4  [$900c] = a AND x	  *ILLEGAL OPCODE*
     34  a6d7		       a6 d8	   ch1	      =	*-2
     35  a6da		       88		      dey		; 2
     36  a6db		       d0 f6		      bne	l0	; 3
     37  a6dd
     38  a6dd		       a9 80		      lda	#128	; 2
     39  a6dd		       a6 de	   initfreq   =	*-1
     40  a6df		       ea		      nop		; 2
     41  a6e0		       a4 58		      ldy	TMP2	; 3
     42  a6e2				   noset
     43  a6e2		       99 00 90 	      sta	$9000,y	; 5
     44  a6e5
     45  a6e5		       60		      rts		; 6	total clocks 11+4+3+2+16*7+16+6 eq 154
     46  a6e6
     47  a6e6				   ldfqmasks
     48  a6e6		       fe		      .byte.b	$fe	; $900a - 1 x 16 clocks/bit
     49  a6e7		       fd		      .byte.b	$fd	; $900b - 2 x	8 clocks/bit
     50  a6e8		       fb		      .byte.b	$fb	; $900c - 4 x	4 clocks/bit
     51  a6e9
     52  a6e9
     53  a6e9				   viznutwaveforms
     54  a6e9		       00		      .byte.b	0	; MIDI Program #1	default  0000000011111111
     55  a6ea		       02		      .byte.b	2	; MIDI Program #2	"10"	 0000001011111101
     56  a6eb		       04		      .byte.b	4	; MIDI Program #3	"100"	 0000010011111011
     57  a6ec		       06		      .byte.b	6	; MIDI Program #4	"110"	 0000011011111001
     58  a6ed		       08		      .byte.b	8	; MIDI Program #5	"1000"	 0000100011110111
     59  a6ee		       0a		      .byte.b	10	; MIDI Program #6	"1010"	 0000101011110101
     60  a6ef		       0b		      .byte.b	11	; MIDI Program #7	"1011"	 0000110011110011
     61  a6f0		       0e		      .byte.b	14	; MIDI Program #8	"1110"	 0000111011110001
     62  a6f1		       12		      .byte.b	18	; MIDI Program #9	"10010"  0001001011101101
     63  a6f2		       14		      .byte.b	20	; MIDI Program #10	"10100"  0001010011101011
     64  a6f3		       16		      .byte.b	22	; MIDI Program #11	"10110"  0001011011101001
     65  a6f4		       18		      .byte.b	24	; MIDI Program #12	"11000"  0001100011100111
     66  a6f5		       1a		      .byte.b	26	; MIDI Program #13	"11010"  0001101011100101
     67  a6f6		       24		      .byte.b	36	; MIDI Program #14	"100100" 0010010011011011
     68  a6f7		       2a		      .byte.b	42	; MIDI Program #15	"101010" 0010101011010101
     69  a6f8		       2c		      .byte.b	44	; MIDI Program #16	"101100" 0010110011010011
------- FILE vicmidi.asm
    822  a6f9
------- FILE lookup-ntsc.asm LEVEL 2 PASS 2
      0  a6f9					      include	"lookup-ntsc.asm"
      1  a6f9							; --------------------------------------------------------------------------------------------------
      2  a6f9							; Note Lookups NTSC - 128 bytes each, map MIDI Note# to a VIC register value
      3  a6f9							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a6f9
      5  a6f9				   voice1lookup_ntsc
      6  a6f9		       00		      byte.b	0
      7  a6fa		       00		      byte.b	0
      8  a6fb		       00		      byte.b	0
      9  a6fc		       00		      byte.b	0
     10  a6fd		       00		      byte.b	0
     11  a6fe		       00		      byte.b	0
     12  a6ff		       00		      byte.b	0
     13  a700		       00		      byte.b	0
     14  a701		       00		      byte.b	0
     15  a702		       00		      byte.b	0
     16  a703		       00		      byte.b	0
     17  a704		       00		      byte.b	0
     18  a705		       00		      byte.b	0
     19  a706		       00		      byte.b	0
     20  a707		       00		      byte.b	0
     21  a708		       00		      byte.b	0
     22  a709		       00		      byte.b	0
     23  a70a		       00		      byte.b	0
     24  a70b		       00		      byte.b	0
     25  a70c		       00		      byte.b	0
     26  a70d		       00		      byte.b	0
     27  a70e		       00		      byte.b	0
     28  a70f		       00		      byte.b	0
     29  a710		       00		      byte.b	0
     30  a711		       85		      byte.b	133
     31  a712		       8c		      byte.b	140
     32  a713		       92		      byte.b	146
     33  a714		       98		      byte.b	152
     34  a715		       9e		      byte.b	158
     35  a716		       a3		      byte.b	163
     36  a717		       a9		      byte.b	169
     37  a718		       ad		      byte.b	173
     38  a719		       b2		      byte.b	178
     39  a71a		       b6		      byte.b	182
     40  a71b		       ba		      byte.b	186
     41  a71c		       be		      byte.b	190
     42  a71d		       c2		      byte.b	194
     43  a71e		       c5		      byte.b	197
     44  a71f		       c9		      byte.b	201
     45  a720		       cc		      byte.b	204
     46  a721		       cf		      byte.b	207
     47  a722		       d1		      byte.b	209
     48  a723		       d4		      byte.b	212
     49  a724		       d6		      byte.b	214
     50  a725		       d9		      byte.b	217
     51  a726		       db		      byte.b	219
     52  a727		       dd		      byte.b	221
     53  a728		       df		      byte.b	223
     54  a729		       e0		      byte.b	224
     55  a72a		       e2		      byte.b	226
     56  a72b		       e4		      byte.b	228
     57  a72c		       e5		      byte.b	229
     58  a72d		       e7		      byte.b	231
     59  a72e		       e8		      byte.b	232
     60  a72f		       e9		      byte.b	233
     61  a730		       eb		      byte.b	235
     62  a731		       ec		      byte.b	236
     63  a732		       ed		      byte.b	237
     64  a733		       ee		      byte.b	238
     65  a734		       ef		      byte.b	239
     66  a735		       f0		      byte.b	240
     67  a736		       00		      byte.b	0
     68  a737		       00		      byte.b	0
     69  a738		       00		      byte.b	0
     70  a739		       00		      byte.b	0
     71  a73a		       00		      byte.b	0
     72  a73b		       00		      byte.b	0
     73  a73c		       00		      byte.b	0
     74  a73d		       00		      byte.b	0
     75  a73e		       00		      byte.b	0
     76  a73f		       00		      byte.b	0
     77  a740		       00		      byte.b	0
     78  a741		       00		      byte.b	0
     79  a742		       00		      byte.b	0
     80  a743		       00		      byte.b	0
     81  a744		       00		      byte.b	0
     82  a745		       00		      byte.b	0
     83  a746		       00		      byte.b	0
     84  a747		       00		      byte.b	0
     85  a748		       00		      byte.b	0
     86  a749		       00		      byte.b	0
     87  a74a		       00		      byte.b	0
     88  a74b		       00		      byte.b	0
     89  a74c		       00		      byte.b	0
     90  a74d		       00		      byte.b	0
     91  a74e		       00		      byte.b	0
     92  a74f		       00		      byte.b	0
     93  a750		       00		      byte.b	0
     94  a751		       00		      byte.b	0
     95  a752		       00		      byte.b	0
     96  a753		       00		      byte.b	0
     97  a754		       00		      byte.b	0
     98  a755		       00		      byte.b	0
     99  a756		       00		      byte.b	0
    100  a757		       00		      byte.b	0
    101  a758		       00		      byte.b	0
    102  a759		       00		      byte.b	0
    103  a75a		       00		      byte.b	0
    104  a75b		       00		      byte.b	0
    105  a75c		       00		      byte.b	0
    106  a75d		       00		      byte.b	0
    107  a75e		       00		      byte.b	0
    108  a75f		       00		      byte.b	0
    109  a760		       00		      byte.b	0
    110  a761		       00		      byte.b	0
    111  a762		       00		      byte.b	0
    112  a763		       00		      byte.b	0
    113  a764		       00		      byte.b	0
    114  a765		       00		      byte.b	0
    115  a766		       00		      byte.b	0
    116  a767		       00		      byte.b	0
    117  a768		       00		      byte.b	0
    118  a769		       00		      byte.b	0
    119  a76a		       00		      byte.b	0
    120  a76b		       00		      byte.b	0
    121  a76c		       00		      byte.b	0
    122  a76d		       00		      byte.b	0
    123  a76e		       00		      byte.b	0
    124  a76f		       00		      byte.b	0
    125  a770		       00		      byte.b	0
    126  a771		       00		      byte.b	0
    127  a772		       00		      byte.b	0
    128  a773		       00		      byte.b	0
    129  a774		       00		      byte.b	0
    130  a775		       00		      byte.b	0
    131  a776		       00		      byte.b	0
    132  a777		       00		      byte.b	0
    133  a778		       00		      byte.b	0
    134  a779
    135  a779				   voice2lookup_ntsc
    136  a779		       00		      byte.b	0
    137  a77a		       00		      byte.b	0
    138  a77b		       00		      byte.b	0
    139  a77c		       00		      byte.b	0
    140  a77d		       00		      byte.b	0
    141  a77e		       00		      byte.b	0
    142  a77f		       00		      byte.b	0
    143  a780		       00		      byte.b	0
    144  a781		       00		      byte.b	0
    145  a782		       00		      byte.b	0
    146  a783		       00		      byte.b	0
    147  a784		       00		      byte.b	0
    148  a785		       00		      byte.b	0
    149  a786		       00		      byte.b	0
    150  a787		       00		      byte.b	0
    151  a788		       00		      byte.b	0
    152  a789		       00		      byte.b	0
    153  a78a		       00		      byte.b	0
    154  a78b		       00		      byte.b	0
    155  a78c		       00		      byte.b	0
    156  a78d		       00		      byte.b	0
    157  a78e		       00		      byte.b	0
    158  a78f		       00		      byte.b	0
    159  a790		       00		      byte.b	0
    160  a791		       00		      byte.b	0
    161  a792		       00		      byte.b	0
    162  a793		       00		      byte.b	0
    163  a794		       00		      byte.b	0
    164  a795		       00		      byte.b	0
    165  a796		       00		      byte.b	0
    166  a797		       00		      byte.b	0
    167  a798		       00		      byte.b	0
    168  a799		       00		      byte.b	0
    169  a79a		       00		      byte.b	0
    170  a79b		       00		      byte.b	0
    171  a79c		       00		      byte.b	0
    172  a79d		       85		      byte.b	133
    173  a79e		       8c		      byte.b	140
    174  a79f		       92		      byte.b	146
    175  a7a0		       98		      byte.b	152
    176  a7a1		       9e		      byte.b	158
    177  a7a2		       a3		      byte.b	163
    178  a7a3		       a9		      byte.b	169
    179  a7a4		       ad		      byte.b	173
    180  a7a5		       b2		      byte.b	178
    181  a7a6		       b6		      byte.b	182
    182  a7a7		       ba		      byte.b	186
    183  a7a8		       be		      byte.b	190
    184  a7a9		       c2		      byte.b	194
    185  a7aa		       c5		      byte.b	197
    186  a7ab		       c9		      byte.b	201
    187  a7ac		       cc		      byte.b	204
    188  a7ad		       cf		      byte.b	207
    189  a7ae		       d1		      byte.b	209
    190  a7af		       d4		      byte.b	212
    191  a7b0		       d6		      byte.b	214
    192  a7b1		       d9		      byte.b	217
    193  a7b2		       db		      byte.b	219
    194  a7b3		       dd		      byte.b	221
    195  a7b4		       df		      byte.b	223
    196  a7b5		       e0		      byte.b	224
    197  a7b6		       e2		      byte.b	226
    198  a7b7		       e4		      byte.b	228
    199  a7b8		       e5		      byte.b	229
    200  a7b9		       e7		      byte.b	231
    201  a7ba		       e8		      byte.b	232
    202  a7bb		       e9		      byte.b	233
    203  a7bc		       eb		      byte.b	235
    204  a7bd		       ec		      byte.b	236
    205  a7be		       ed		      byte.b	237
    206  a7bf		       ee		      byte.b	238
    207  a7c0		       ef		      byte.b	239
    208  a7c1		       f0		      byte.b	240
    209  a7c2		       00		      byte.b	0
    210  a7c3		       00		      byte.b	0
    211  a7c4		       00		      byte.b	0
    212  a7c5		       00		      byte.b	0
    213  a7c6		       00		      byte.b	0
    214  a7c7		       00		      byte.b	0
    215  a7c8		       00		      byte.b	0
    216  a7c9		       00		      byte.b	0
    217  a7ca		       00		      byte.b	0
    218  a7cb		       00		      byte.b	0
    219  a7cc		       00		      byte.b	0
    220  a7cd		       00		      byte.b	0
    221  a7ce		       00		      byte.b	0
    222  a7cf		       00		      byte.b	0
    223  a7d0		       00		      byte.b	0
    224  a7d1		       00		      byte.b	0
    225  a7d2		       00		      byte.b	0
    226  a7d3		       00		      byte.b	0
    227  a7d4		       00		      byte.b	0
    228  a7d5		       00		      byte.b	0
    229  a7d6		       00		      byte.b	0
    230  a7d7		       00		      byte.b	0
    231  a7d8		       00		      byte.b	0
    232  a7d9		       00		      byte.b	0
    233  a7da		       00		      byte.b	0
    234  a7db		       00		      byte.b	0
    235  a7dc		       00		      byte.b	0
    236  a7dd		       00		      byte.b	0
    237  a7de		       00		      byte.b	0
    238  a7df		       00		      byte.b	0
    239  a7e0		       00		      byte.b	0
    240  a7e1		       00		      byte.b	0
    241  a7e2		       00		      byte.b	0
    242  a7e3		       00		      byte.b	0
    243  a7e4		       00		      byte.b	0
    244  a7e5		       00		      byte.b	0
    245  a7e6		       00		      byte.b	0
    246  a7e7		       00		      byte.b	0
    247  a7e8		       00		      byte.b	0
    248  a7e9		       00		      byte.b	0
    249  a7ea		       00		      byte.b	0
    250  a7eb		       00		      byte.b	0
    251  a7ec		       00		      byte.b	0
    252  a7ed		       00		      byte.b	0
    253  a7ee		       00		      byte.b	0
    254  a7ef		       00		      byte.b	0
    255  a7f0		       00		      byte.b	0
    256  a7f1		       00		      byte.b	0
    257  a7f2		       00		      byte.b	0
    258  a7f3		       00		      byte.b	0
    259  a7f4		       00		      byte.b	0
    260  a7f5		       00		      byte.b	0
    261  a7f6		       00		      byte.b	0
    262  a7f7		       00		      byte.b	0
    263  a7f8		       00		      byte.b	0
    264  a7f9
    265  a7f9				   voice3lookup_ntsc
    266  a7f9		       00		      byte.b	0
    267  a7fa		       00		      byte.b	0
    268  a7fb		       00		      byte.b	0
    269  a7fc		       00		      byte.b	0
    270  a7fd		       00		      byte.b	0
    271  a7fe		       00		      byte.b	0
    272  a7ff		       00		      byte.b	0
    273  a800		       00		      byte.b	0
    274  a801		       00		      byte.b	0
    275  a802		       00		      byte.b	0
    276  a803		       00		      byte.b	0
    277  a804		       00		      byte.b	0
    278  a805		       00		      byte.b	0
    279  a806		       00		      byte.b	0
    280  a807		       00		      byte.b	0
    281  a808		       00		      byte.b	0
    282  a809		       00		      byte.b	0
    283  a80a		       00		      byte.b	0
    284  a80b		       00		      byte.b	0
    285  a80c		       00		      byte.b	0
    286  a80d		       00		      byte.b	0
    287  a80e		       00		      byte.b	0
    288  a80f		       00		      byte.b	0
    289  a810		       00		      byte.b	0
    290  a811		       00		      byte.b	0
    291  a812		       00		      byte.b	0
    292  a813		       00		      byte.b	0
    293  a814		       00		      byte.b	0
    294  a815		       00		      byte.b	0
    295  a816		       00		      byte.b	0
    296  a817		       00		      byte.b	0
    297  a818		       00		      byte.b	0
    298  a819		       00		      byte.b	0
    299  a81a		       00		      byte.b	0
    300  a81b		       00		      byte.b	0
    301  a81c		       00		      byte.b	0
    302  a81d		       00		      byte.b	0
    303  a81e		       00		      byte.b	0
    304  a81f		       00		      byte.b	0
    305  a820		       00		      byte.b	0
    306  a821		       00		      byte.b	0
    307  a822		       00		      byte.b	0
    308  a823		       00		      byte.b	0
    309  a824		       00		      byte.b	0
    310  a825		       00		      byte.b	0
    311  a826		       00		      byte.b	0
    312  a827		       00		      byte.b	0
    313  a828		       00		      byte.b	0
    314  a829		       85		      byte.b	133
    315  a82a		       8c		      byte.b	140
    316  a82b		       92		      byte.b	146
    317  a82c		       98		      byte.b	152
    318  a82d		       9e		      byte.b	158
    319  a82e		       a3		      byte.b	163
    320  a82f		       a9		      byte.b	169
    321  a830		       ad		      byte.b	173
    322  a831		       b2		      byte.b	178
    323  a832		       b6		      byte.b	182
    324  a833		       ba		      byte.b	186
    325  a834		       be		      byte.b	190
    326  a835		       c2		      byte.b	194
    327  a836		       c5		      byte.b	197
    328  a837		       c9		      byte.b	201
    329  a838		       cc		      byte.b	204
    330  a839		       cf		      byte.b	207
    331  a83a		       d1		      byte.b	209
    332  a83b		       d4		      byte.b	212
    333  a83c		       d6		      byte.b	214
    334  a83d		       d9		      byte.b	217
    335  a83e		       db		      byte.b	219
    336  a83f		       dd		      byte.b	221
    337  a840		       df		      byte.b	223
    338  a841		       e0		      byte.b	224
    339  a842		       e2		      byte.b	226
    340  a843		       e4		      byte.b	228
    341  a844		       e5		      byte.b	229
    342  a845		       e7		      byte.b	231
    343  a846		       e8		      byte.b	232
    344  a847		       e9		      byte.b	233
    345  a848		       eb		      byte.b	235
    346  a849		       ec		      byte.b	236
    347  a84a		       ed		      byte.b	237
    348  a84b		       ee		      byte.b	238
    349  a84c		       ef		      byte.b	239
    350  a84d		       f0		      byte.b	240
    351  a84e		       00		      byte.b	0
    352  a84f		       00		      byte.b	0
    353  a850		       00		      byte.b	0
    354  a851		       00		      byte.b	0
    355  a852		       00		      byte.b	0
    356  a853		       00		      byte.b	0
    357  a854		       00		      byte.b	0
    358  a855		       00		      byte.b	0
    359  a856		       00		      byte.b	0
    360  a857		       00		      byte.b	0
    361  a858		       00		      byte.b	0
    362  a859		       00		      byte.b	0
    363  a85a		       00		      byte.b	0
    364  a85b		       00		      byte.b	0
    365  a85c		       00		      byte.b	0
    366  a85d		       00		      byte.b	0
    367  a85e		       00		      byte.b	0
    368  a85f		       00		      byte.b	0
    369  a860		       00		      byte.b	0
    370  a861		       00		      byte.b	0
    371  a862		       00		      byte.b	0
    372  a863		       00		      byte.b	0
    373  a864		       00		      byte.b	0
    374  a865		       00		      byte.b	0
    375  a866		       00		      byte.b	0
    376  a867		       00		      byte.b	0
    377  a868		       00		      byte.b	0
    378  a869		       00		      byte.b	0
    379  a86a		       00		      byte.b	0
    380  a86b		       00		      byte.b	0
    381  a86c		       00		      byte.b	0
    382  a86d		       00		      byte.b	0
    383  a86e		       00		      byte.b	0
    384  a86f		       00		      byte.b	0
    385  a870		       00		      byte.b	0
    386  a871		       00		      byte.b	0
    387  a872		       00		      byte.b	0
    388  a873		       00		      byte.b	0
    389  a874		       00		      byte.b	0
    390  a875		       00		      byte.b	0
    391  a876		       00		      byte.b	0
    392  a877		       00		      byte.b	0
    393  a878		       00		      byte.b	0
    394  a879
    395  a879
    396  a879				   voice4lookup_ntsc
    397  a879		       00		      byte.b	0
    398  a87a		       00		      byte.b	0
    399  a87b		       00		      byte.b	0
    400  a87c		       00		      byte.b	0
    401  a87d		       00		      byte.b	0
    402  a87e		       00		      byte.b	0
    403  a87f		       00		      byte.b	0
    404  a880		       00		      byte.b	0
    405  a881		       00		      byte.b	0
    406  a882		       00		      byte.b	0
    407  a883		       00		      byte.b	0
    408  a884		       00		      byte.b	0
    409  a885		       00		      byte.b	0
    410  a886		       00		      byte.b	0
    411  a887		       00		      byte.b	0
    412  a888		       00		      byte.b	0
    413  a889		       00		      byte.b	0
    414  a88a		       00		      byte.b	0
    415  a88b		       00		      byte.b	0
    416  a88c		       00		      byte.b	0
    417  a88d		       00		      byte.b	0
    418  a88e		       00		      byte.b	0
    419  a88f		       00		      byte.b	0
    420  a890		       00		      byte.b	0
    421  a891		       00		      byte.b	0
    422  a892		       00		      byte.b	0
    423  a893		       00		      byte.b	0
    424  a894		       00		      byte.b	0
    425  a895		       00		      byte.b	0
    426  a896		       00		      byte.b	0
    427  a897		       00		      byte.b	0
    428  a898		       00		      byte.b	0
    429  a899		       00		      byte.b	0
    430  a89a		       00		      byte.b	0
    431  a89b		       00		      byte.b	0
    432  a89c		       00		      byte.b	0
    433  a89d		       85		      byte.b	133
    434  a89e		       8c		      byte.b	140
    435  a89f		       92		      byte.b	146
    436  a8a0		       98		      byte.b	152
    437  a8a1		       9e		      byte.b	158
    438  a8a2		       a3		      byte.b	163
    439  a8a3		       a9		      byte.b	169
    440  a8a4		       ad		      byte.b	173
    441  a8a5		       b2		      byte.b	178
    442  a8a6		       b6		      byte.b	182
    443  a8a7		       ba		      byte.b	186
    444  a8a8		       be		      byte.b	190
    445  a8a9		       c2		      byte.b	194
    446  a8aa		       c5		      byte.b	197
    447  a8ab		       c9		      byte.b	201
    448  a8ac		       cc		      byte.b	204
    449  a8ad		       cf		      byte.b	207
    450  a8ae		       d1		      byte.b	209
    451  a8af		       d4		      byte.b	212
    452  a8b0		       d6		      byte.b	214
    453  a8b1		       d9		      byte.b	217
    454  a8b2		       db		      byte.b	219
    455  a8b3		       dd		      byte.b	221
    456  a8b4		       df		      byte.b	223
    457  a8b5		       e0		      byte.b	224
    458  a8b6		       e2		      byte.b	226
    459  a8b7		       e4		      byte.b	228
    460  a8b8		       e5		      byte.b	229
    461  a8b9		       e7		      byte.b	231
    462  a8ba		       e8		      byte.b	232
    463  a8bb		       e9		      byte.b	233
    464  a8bc		       eb		      byte.b	235
    465  a8bd		       ec		      byte.b	236
    466  a8be		       ed		      byte.b	237
    467  a8bf		       ee		      byte.b	238
    468  a8c0		       ef		      byte.b	239
    469  a8c1		       f0		      byte.b	240
    470  a8c2		       00		      byte.b	0
    471  a8c3		       00		      byte.b	0
    472  a8c4		       00		      byte.b	0
    473  a8c5		       00		      byte.b	0
    474  a8c6		       00		      byte.b	0
    475  a8c7		       00		      byte.b	0
    476  a8c8		       00		      byte.b	0
    477  a8c9		       00		      byte.b	0
    478  a8ca		       00		      byte.b	0
    479  a8cb		       00		      byte.b	0
    480  a8cc		       00		      byte.b	0
    481  a8cd		       00		      byte.b	0
    482  a8ce		       00		      byte.b	0
    483  a8cf		       00		      byte.b	0
    484  a8d0		       00		      byte.b	0
    485  a8d1		       00		      byte.b	0
    486  a8d2		       00		      byte.b	0
    487  a8d3		       00		      byte.b	0
    488  a8d4		       00		      byte.b	0
    489  a8d5		       00		      byte.b	0
    490  a8d6		       00		      byte.b	0
    491  a8d7		       00		      byte.b	0
    492  a8d8		       00		      byte.b	0
    493  a8d9		       00		      byte.b	0
    494  a8da		       00		      byte.b	0
    495  a8db		       00		      byte.b	0
    496  a8dc		       00		      byte.b	0
    497  a8dd		       00		      byte.b	0
    498  a8de		       00		      byte.b	0
    499  a8df		       00		      byte.b	0
    500  a8e0		       00		      byte.b	0
    501  a8e1		       00		      byte.b	0
    502  a8e2		       00		      byte.b	0
    503  a8e3		       00		      byte.b	0
    504  a8e4		       00		      byte.b	0
    505  a8e5		       00		      byte.b	0
    506  a8e6		       00		      byte.b	0
    507  a8e7		       00		      byte.b	0
    508  a8e8		       00		      byte.b	0
    509  a8e9		       00		      byte.b	0
    510  a8ea		       00		      byte.b	0
    511  a8eb		       00		      byte.b	0
    512  a8ec		       00		      byte.b	0
    513  a8ed		       00		      byte.b	0
    514  a8ee		       00		      byte.b	0
    515  a8ef		       00		      byte.b	0
    516  a8f0		       00		      byte.b	0
    517  a8f1		       00		      byte.b	0
    518  a8f2		       00		      byte.b	0
    519  a8f3		       00		      byte.b	0
    520  a8f4		       00		      byte.b	0
    521  a8f5		       00		      byte.b	0
    522  a8f6		       00		      byte.b	0
    523  a8f7		       00		      byte.b	0
    524  a8f8		       00		      byte.b	0
    525  a8f9
    526  a8f9							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-pal.asm LEVEL 2 PASS 2
      0  a8f9					      include	"lookup-pal.asm"
      1  a8f9							; --------------------------------------------------------------------------------------------------
      2  a8f9							; Note Lookups PAL - 128 bytes each, map MIDI Note# to a VIC register value
      3  a8f9							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a8f9
      5  a8f9				   voice1lookup_pal
      6  a8f9		       00		      byte.b	0
      7  a8fa		       00		      byte.b	0
      8  a8fb		       00		      byte.b	0
      9  a8fc		       00		      byte.b	0
     10  a8fd		       00		      byte.b	0
     11  a8fe		       00		      byte.b	0
     12  a8ff		       00		      byte.b	0
     13  a900		       00		      byte.b	0
     14  a901		       00		      byte.b	0
     15  a902		       00		      byte.b	0
     16  a903		       00		      byte.b	0
     17  a904		       00		      byte.b	0
     18  a905		       00		      byte.b	0
     19  a906		       00		      byte.b	0
     20  a907		       00		      byte.b	0
     21  a908		       00		      byte.b	0
     22  a909		       00		      byte.b	0
     23  a90a		       00		      byte.b	0
     24  a90b		       00		      byte.b	0
     25  a90c		       00		      byte.b	0
     26  a90d		       00		      byte.b	0
     27  a90e		       00		      byte.b	0
     28  a90f		       00		      byte.b	0
     29  a910		       00		      byte.b	0
     30  a911		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
     31  a912		       82		      byte.b	130
     32  a913		       89		      byte.b	137
     33  a914		       90		      byte.b	144
     34  a915		       96		      byte.b	150
     35  a916		       9c		      byte.b	156
     36  a917		       a1		      byte.b	161
     37  a918		       a7		      byte.b	167
     38  a919		       ac		      byte.b	172
     39  a91a		       b0		      byte.b	176
     40  a91b		       b5		      byte.b	181
     41  a91c		       b9		      byte.b	185
     42  a91d		       bd		      byte.b	189
     43  a91e		       c1		      byte.b	193
     44  a91f		       c4		      byte.b	196
     45  a920		       c7		      byte.b	199
     46  a921		       ca		      byte.b	202
     47  a922		       cd		      byte.b	205
     48  a923		       d0		      byte.b	208
     49  a924		       d3		      byte.b	211
     50  a925		       d5		      byte.b	213
     51  a926		       d8		      byte.b	216
     52  a927		       da		      byte.b	218
     53  a928		       dc		      byte.b	220
     54  a929		       de		      byte.b	222
     55  a92a		       e0		      byte.b	224
     56  a92b		       e2		      byte.b	226
     57  a92c		       e3		      byte.b	227
     58  a92d		       e5		      byte.b	229
     59  a92e		       e6		      byte.b	230
     60  a92f		       e8		      byte.b	232
     61  a930		       e9		      byte.b	233
     62  a931		       ea		      byte.b	234
     63  a932		       eb		      byte.b	235
     64  a933		       ec		      byte.b	236
     65  a934		       ed		      byte.b	237
     66  a935		       ee		      byte.b	238
     67  a936		       00		      byte.b	0
     68  a937		       00		      byte.b	0
     69  a938		       00		      byte.b	0
     70  a939		       00		      byte.b	0
     71  a93a		       00		      byte.b	0
     72  a93b		       00		      byte.b	0
     73  a93c		       00		      byte.b	0
     74  a93d		       00		      byte.b	0
     75  a93e		       00		      byte.b	0
     76  a93f		       00		      byte.b	0
     77  a940		       00		      byte.b	0
     78  a941		       00		      byte.b	0
     79  a942		       00		      byte.b	0
     80  a943		       00		      byte.b	0
     81  a944		       00		      byte.b	0
     82  a945		       00		      byte.b	0
     83  a946		       00		      byte.b	0
     84  a947		       00		      byte.b	0
     85  a948		       00		      byte.b	0
     86  a949		       00		      byte.b	0
     87  a94a		       00		      byte.b	0
     88  a94b		       00		      byte.b	0
     89  a94c		       00		      byte.b	0
     90  a94d		       00		      byte.b	0
     91  a94e		       00		      byte.b	0
     92  a94f		       00		      byte.b	0
     93  a950		       00		      byte.b	0
     94  a951		       00		      byte.b	0
     95  a952		       00		      byte.b	0
     96  a953		       00		      byte.b	0
     97  a954		       00		      byte.b	0
     98  a955		       00		      byte.b	0
     99  a956		       00		      byte.b	0
    100  a957		       00		      byte.b	0
    101  a958		       00		      byte.b	0
    102  a959		       00		      byte.b	0
    103  a95a		       00		      byte.b	0
    104  a95b		       00		      byte.b	0
    105  a95c		       00		      byte.b	0
    106  a95d		       00		      byte.b	0
    107  a95e		       00		      byte.b	0
    108  a95f		       00		      byte.b	0
    109  a960		       00		      byte.b	0
    110  a961		       00		      byte.b	0
    111  a962		       00		      byte.b	0
    112  a963		       00		      byte.b	0
    113  a964		       00		      byte.b	0
    114  a965		       00		      byte.b	0
    115  a966		       00		      byte.b	0
    116  a967		       00		      byte.b	0
    117  a968		       00		      byte.b	0
    118  a969		       00		      byte.b	0
    119  a96a		       00		      byte.b	0
    120  a96b		       00		      byte.b	0
    121  a96c		       00		      byte.b	0
    122  a96d		       00		      byte.b	0
    123  a96e		       00		      byte.b	0
    124  a96f		       00		      byte.b	0
    125  a970		       00		      byte.b	0
    126  a971		       00		      byte.b	0
    127  a972		       00		      byte.b	0
    128  a973		       00		      byte.b	0
    129  a974		       00		      byte.b	0
    130  a975		       00		      byte.b	0
    131  a976		       00		      byte.b	0
    132  a977		       00		      byte.b	0
    133  a978		       00		      byte.b	0
    134  a979
    135  a979				   voice2lookup_pal
    136  a979		       00		      byte.b	0
    137  a97a		       00		      byte.b	0
    138  a97b		       00		      byte.b	0
    139  a97c		       00		      byte.b	0
    140  a97d		       00		      byte.b	0
    141  a97e		       00		      byte.b	0
    142  a97f		       00		      byte.b	0
    143  a980		       00		      byte.b	0
    144  a981		       00		      byte.b	0
    145  a982		       00		      byte.b	0
    146  a983		       00		      byte.b	0
    147  a984		       00		      byte.b	0
    148  a985		       00		      byte.b	0
    149  a986		       00		      byte.b	0
    150  a987		       00		      byte.b	0
    151  a988		       00		      byte.b	0
    152  a989		       00		      byte.b	0
    153  a98a		       00		      byte.b	0
    154  a98b		       00		      byte.b	0
    155  a98c		       00		      byte.b	0
    156  a98d		       00		      byte.b	0
    157  a98e		       00		      byte.b	0
    158  a98f		       00		      byte.b	0
    159  a990		       00		      byte.b	0
    160  a991		       00		      byte.b	0
    161  a992		       00		      byte.b	0
    162  a993		       00		      byte.b	0
    163  a994		       00		      byte.b	0
    164  a995		       00		      byte.b	0
    165  a996		       00		      byte.b	0
    166  a997		       00		      byte.b	0
    167  a998		       00		      byte.b	0
    168  a999		       00		      byte.b	0
    169  a99a		       00		      byte.b	0
    170  a99b		       00		      byte.b	0
    171  a99c		       00		      byte.b	0
    172  a99d		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    173  a99e		       82		      byte.b	130
    174  a99f		       89		      byte.b	137
    175  a9a0		       90		      byte.b	144
    176  a9a1		       96		      byte.b	150
    177  a9a2		       9c		      byte.b	156
    178  a9a3		       a1		      byte.b	161
    179  a9a4		       a7		      byte.b	167
    180  a9a5		       ac		      byte.b	172
    181  a9a6		       b0		      byte.b	176
    182  a9a7		       b5		      byte.b	181
    183  a9a8		       b9		      byte.b	185
    184  a9a9		       bd		      byte.b	189
    185  a9aa		       c1		      byte.b	193
    186  a9ab		       c4		      byte.b	196
    187  a9ac		       c7		      byte.b	199
    188  a9ad		       ca		      byte.b	202
    189  a9ae		       cd		      byte.b	205
    190  a9af		       d0		      byte.b	208
    191  a9b0		       d3		      byte.b	211
    192  a9b1		       d5		      byte.b	213
    193  a9b2		       d8		      byte.b	216
    194  a9b3		       da		      byte.b	218
    195  a9b4		       dc		      byte.b	220
    196  a9b5		       de		      byte.b	222
    197  a9b6		       e0		      byte.b	224
    198  a9b7		       e2		      byte.b	226
    199  a9b8		       e3		      byte.b	227
    200  a9b9		       e5		      byte.b	229
    201  a9ba		       e6		      byte.b	230
    202  a9bb		       e8		      byte.b	232
    203  a9bc		       e9		      byte.b	233
    204  a9bd		       ea		      byte.b	234
    205  a9be		       eb		      byte.b	235
    206  a9bf		       ec		      byte.b	236
    207  a9c0		       ed		      byte.b	237
    208  a9c1		       ee		      byte.b	238
    209  a9c2		       00		      byte.b	0
    210  a9c3		       00		      byte.b	0
    211  a9c4		       00		      byte.b	0
    212  a9c5		       00		      byte.b	0
    213  a9c6		       00		      byte.b	0
    214  a9c7		       00		      byte.b	0
    215  a9c8		       00		      byte.b	0
    216  a9c9		       00		      byte.b	0
    217  a9ca		       00		      byte.b	0
    218  a9cb		       00		      byte.b	0
    219  a9cc		       00		      byte.b	0
    220  a9cd		       00		      byte.b	0
    221  a9ce		       00		      byte.b	0
    222  a9cf		       00		      byte.b	0
    223  a9d0		       00		      byte.b	0
    224  a9d1		       00		      byte.b	0
    225  a9d2		       00		      byte.b	0
    226  a9d3		       00		      byte.b	0
    227  a9d4		       00		      byte.b	0
    228  a9d5		       00		      byte.b	0
    229  a9d6		       00		      byte.b	0
    230  a9d7		       00		      byte.b	0
    231  a9d8		       00		      byte.b	0
    232  a9d9		       00		      byte.b	0
    233  a9da		       00		      byte.b	0
    234  a9db		       00		      byte.b	0
    235  a9dc		       00		      byte.b	0
    236  a9dd		       00		      byte.b	0
    237  a9de		       00		      byte.b	0
    238  a9df		       00		      byte.b	0
    239  a9e0		       00		      byte.b	0
    240  a9e1		       00		      byte.b	0
    241  a9e2		       00		      byte.b	0
    242  a9e3		       00		      byte.b	0
    243  a9e4		       00		      byte.b	0
    244  a9e5		       00		      byte.b	0
    245  a9e6		       00		      byte.b	0
    246  a9e7		       00		      byte.b	0
    247  a9e8		       00		      byte.b	0
    248  a9e9		       00		      byte.b	0
    249  a9ea		       00		      byte.b	0
    250  a9eb		       00		      byte.b	0
    251  a9ec		       00		      byte.b	0
    252  a9ed		       00		      byte.b	0
    253  a9ee		       00		      byte.b	0
    254  a9ef		       00		      byte.b	0
    255  a9f0		       00		      byte.b	0
    256  a9f1		       00		      byte.b	0
    257  a9f2		       00		      byte.b	0
    258  a9f3		       00		      byte.b	0
    259  a9f4		       00		      byte.b	0
    260  a9f5		       00		      byte.b	0
    261  a9f6		       00		      byte.b	0
    262  a9f7		       00		      byte.b	0
    263  a9f8		       00		      byte.b	0
    264  a9f9
    265  a9f9				   voice3lookup_pal
    266  a9f9		       00		      byte.b	0
    267  a9fa		       00		      byte.b	0
    268  a9fb		       00		      byte.b	0
    269  a9fc		       00		      byte.b	0
    270  a9fd		       00		      byte.b	0
    271  a9fe		       00		      byte.b	0
    272  a9ff		       00		      byte.b	0
    273  aa00		       00		      byte.b	0
    274  aa01		       00		      byte.b	0
    275  aa02		       00		      byte.b	0
    276  aa03		       00		      byte.b	0
    277  aa04		       00		      byte.b	0
    278  aa05		       00		      byte.b	0
    279  aa06		       00		      byte.b	0
    280  aa07		       00		      byte.b	0
    281  aa08		       00		      byte.b	0
    282  aa09		       00		      byte.b	0
    283  aa0a		       00		      byte.b	0
    284  aa0b		       00		      byte.b	0
    285  aa0c		       00		      byte.b	0
    286  aa0d		       00		      byte.b	0
    287  aa0e		       00		      byte.b	0
    288  aa0f		       00		      byte.b	0
    289  aa10		       00		      byte.b	0
    290  aa11		       00		      byte.b	0
    291  aa12		       00		      byte.b	0
    292  aa13		       00		      byte.b	0
    293  aa14		       00		      byte.b	0
    294  aa15		       00		      byte.b	0
    295  aa16		       00		      byte.b	0
    296  aa17		       00		      byte.b	0
    297  aa18		       00		      byte.b	0
    298  aa19		       00		      byte.b	0
    299  aa1a		       00		      byte.b	0
    300  aa1b		       00		      byte.b	0
    301  aa1c		       00		      byte.b	0
    302  aa1d		       00		      byte.b	0
    303  aa1e		       00		      byte.b	0
    304  aa1f		       00		      byte.b	0
    305  aa20		       00		      byte.b	0
    306  aa21		       00		      byte.b	0
    307  aa22		       00		      byte.b	0
    308  aa23		       00		      byte.b	0
    309  aa24		       00		      byte.b	0
    310  aa25		       00		      byte.b	0
    311  aa26		       00		      byte.b	0
    312  aa27		       00		      byte.b	0
    313  aa28		       00		      byte.b	0
    314  aa29		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    315  aa2a		       82		      byte.b	130
    316  aa2b		       89		      byte.b	137
    317  aa2c		       90		      byte.b	144
    318  aa2d		       96		      byte.b	150
    319  aa2e		       9c		      byte.b	156
    320  aa2f		       a1		      byte.b	161
    321  aa30		       a7		      byte.b	167
    322  aa31		       ac		      byte.b	172
    323  aa32		       b0		      byte.b	176
    324  aa33		       b5		      byte.b	181
    325  aa34		       b9		      byte.b	185
    326  aa35		       bd		      byte.b	189
    327  aa36		       c1		      byte.b	193
    328  aa37		       c4		      byte.b	196
    329  aa38		       c7		      byte.b	199
    330  aa39		       ca		      byte.b	202
    331  aa3a		       cd		      byte.b	205
    332  aa3b		       d0		      byte.b	208
    333  aa3c		       d3		      byte.b	211
    334  aa3d		       d5		      byte.b	213
    335  aa3e		       d8		      byte.b	216
    336  aa3f		       da		      byte.b	218
    337  aa40		       dc		      byte.b	220
    338  aa41		       de		      byte.b	222
    339  aa42		       e0		      byte.b	224
    340  aa43		       e2		      byte.b	226
    341  aa44		       e3		      byte.b	227
    342  aa45		       e5		      byte.b	229
    343  aa46		       e6		      byte.b	230
    344  aa47		       e8		      byte.b	232
    345  aa48		       e9		      byte.b	233
    346  aa49		       ea		      byte.b	234
    347  aa4a		       eb		      byte.b	235
    348  aa4b		       ec		      byte.b	236
    349  aa4c		       ed		      byte.b	237
    350  aa4d		       ee		      byte.b	238
    351  aa4e		       00		      byte.b	0
    352  aa4f		       00		      byte.b	0
    353  aa50		       00		      byte.b	0
    354  aa51		       00		      byte.b	0
    355  aa52		       00		      byte.b	0
    356  aa53		       00		      byte.b	0
    357  aa54		       00		      byte.b	0
    358  aa55		       00		      byte.b	0
    359  aa56		       00		      byte.b	0
    360  aa57		       00		      byte.b	0
    361  aa58		       00		      byte.b	0
    362  aa59		       00		      byte.b	0
    363  aa5a		       00		      byte.b	0
    364  aa5b		       00		      byte.b	0
    365  aa5c		       00		      byte.b	0
    366  aa5d		       00		      byte.b	0
    367  aa5e		       00		      byte.b	0
    368  aa5f		       00		      byte.b	0
    369  aa60		       00		      byte.b	0
    370  aa61		       00		      byte.b	0
    371  aa62		       00		      byte.b	0
    372  aa63		       00		      byte.b	0
    373  aa64		       00		      byte.b	0
    374  aa65		       00		      byte.b	0
    375  aa66		       00		      byte.b	0
    376  aa67		       00		      byte.b	0
    377  aa68		       00		      byte.b	0
    378  aa69		       00		      byte.b	0
    379  aa6a		       00		      byte.b	0
    380  aa6b		       00		      byte.b	0
    381  aa6c		       00		      byte.b	0
    382  aa6d		       00		      byte.b	0
    383  aa6e		       00		      byte.b	0
    384  aa6f		       00		      byte.b	0
    385  aa70		       00		      byte.b	0
    386  aa71		       00		      byte.b	0
    387  aa72		       00		      byte.b	0
    388  aa73		       00		      byte.b	0
    389  aa74		       00		      byte.b	0
    390  aa75		       00		      byte.b	0
    391  aa76		       00		      byte.b	0
    392  aa77		       00		      byte.b	0
    393  aa78		       00		      byte.b	0
    394  aa79
    395  aa79
    396  aa79				   voice4lookup_pal
    397  aa79		       00		      byte.b	0
    398  aa7a		       00		      byte.b	0
    399  aa7b		       00		      byte.b	0
    400  aa7c		       00		      byte.b	0
    401  aa7d		       00		      byte.b	0
    402  aa7e		       00		      byte.b	0
    403  aa7f		       00		      byte.b	0
    404  aa80		       00		      byte.b	0
    405  aa81		       00		      byte.b	0
    406  aa82		       00		      byte.b	0
    407  aa83		       00		      byte.b	0
    408  aa84		       00		      byte.b	0
    409  aa85		       00		      byte.b	0
    410  aa86		       00		      byte.b	0
    411  aa87		       00		      byte.b	0
    412  aa88		       00		      byte.b	0
    413  aa89		       00		      byte.b	0
    414  aa8a		       00		      byte.b	0
    415  aa8b		       00		      byte.b	0
    416  aa8c		       00		      byte.b	0
    417  aa8d		       00		      byte.b	0
    418  aa8e		       00		      byte.b	0
    419  aa8f		       00		      byte.b	0
    420  aa90		       00		      byte.b	0
    421  aa91		       00		      byte.b	0
    422  aa92		       00		      byte.b	0
    423  aa93		       00		      byte.b	0
    424  aa94		       00		      byte.b	0
    425  aa95		       00		      byte.b	0
    426  aa96		       00		      byte.b	0
    427  aa97		       00		      byte.b	0
    428  aa98		       00		      byte.b	0
    429  aa99		       00		      byte.b	0
    430  aa9a		       00		      byte.b	0
    431  aa9b		       00		      byte.b	0
    432  aa9c		       00		      byte.b	0
    433  aa9d		       85		      byte.b	133	; (122.60)  <- not reachable in PAL
    434  aa9e		       8c		      byte.b	140
    435  aa9f		       92		      byte.b	146
    436  aaa0		       98		      byte.b	152
    437  aaa1		       9e		      byte.b	158
    438  aaa2		       a3		      byte.b	163
    439  aaa3		       a9		      byte.b	169
    440  aaa4		       ad		      byte.b	173
    441  aaa5		       b2		      byte.b	178
    442  aaa6		       b6		      byte.b	182
    443  aaa7		       ba		      byte.b	186
    444  aaa8		       be		      byte.b	190
    445  aaa9		       c2		      byte.b	194
    446  aaaa		       c5		      byte.b	197
    447  aaab		       c9		      byte.b	201
    448  aaac		       cc		      byte.b	204
    449  aaad		       cf		      byte.b	207
    450  aaae		       d1		      byte.b	209
    451  aaaf		       d4		      byte.b	212
    452  aab0		       d6		      byte.b	214
    453  aab1		       d9		      byte.b	217
    454  aab2		       db		      byte.b	219
    455  aab3		       dd		      byte.b	221
    456  aab4		       df		      byte.b	223
    457  aab5		       e0		      byte.b	224
    458  aab6		       e2		      byte.b	226
    459  aab7		       e4		      byte.b	228
    460  aab8		       e5		      byte.b	229
    461  aab9		       e7		      byte.b	231
    462  aaba		       e8		      byte.b	232
    463  aabb		       e9		      byte.b	233
    464  aabc		       eb		      byte.b	235
    465  aabd		       ec		      byte.b	236
    466  aabe		       ed		      byte.b	237
    467  aabf		       ee		      byte.b	238
    468  aac0		       ef		      byte.b	239
    469  aac1		       f0		      byte.b	240
    470  aac2		       00		      byte.b	0
    471  aac3		       00		      byte.b	0
    472  aac4		       00		      byte.b	0
    473  aac5		       00		      byte.b	0
    474  aac6		       00		      byte.b	0
    475  aac7		       00		      byte.b	0
    476  aac8		       00		      byte.b	0
    477  aac9		       00		      byte.b	0
    478  aaca		       00		      byte.b	0
    479  aacb		       00		      byte.b	0
    480  aacc		       00		      byte.b	0
    481  aacd		       00		      byte.b	0
    482  aace		       00		      byte.b	0
    483  aacf		       00		      byte.b	0
    484  aad0		       00		      byte.b	0
    485  aad1		       00		      byte.b	0
    486  aad2		       00		      byte.b	0
    487  aad3		       00		      byte.b	0
    488  aad4		       00		      byte.b	0
    489  aad5		       00		      byte.b	0
    490  aad6		       00		      byte.b	0
    491  aad7		       00		      byte.b	0
    492  aad8		       00		      byte.b	0
    493  aad9		       00		      byte.b	0
    494  aada		       00		      byte.b	0
    495  aadb		       00		      byte.b	0
    496  aadc		       00		      byte.b	0
    497  aadd		       00		      byte.b	0
    498  aade		       00		      byte.b	0
    499  aadf		       00		      byte.b	0
    500  aae0		       00		      byte.b	0
    501  aae1		       00		      byte.b	0
    502  aae2		       00		      byte.b	0
    503  aae3		       00		      byte.b	0
    504  aae4		       00		      byte.b	0
    505  aae5		       00		      byte.b	0
    506  aae6		       00		      byte.b	0
    507  aae7		       00		      byte.b	0
    508  aae8		       00		      byte.b	0
    509  aae9		       00		      byte.b	0
    510  aaea		       00		      byte.b	0
    511  aaeb		       00		      byte.b	0
    512  aaec		       00		      byte.b	0
    513  aaed		       00		      byte.b	0
    514  aaee		       00		      byte.b	0
    515  aaef		       00		      byte.b	0
    516  aaf0		       00		      byte.b	0
    517  aaf1		       00		      byte.b	0
    518  aaf2		       00		      byte.b	0
    519  aaf3		       00		      byte.b	0
    520  aaf4		       00		      byte.b	0
    521  aaf5		       00		      byte.b	0
    522  aaf6		       00		      byte.b	0
    523  aaf7		       00		      byte.b	0
    524  aaf8		       00		      byte.b	0
    525  aaf9
    526  aaf9							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-alt.asm LEVEL 2 PASS 2
      0  aaf9					      include	"lookup-alt.asm"
      1  aaf9							; --------------------------------------------------------------------------------------------------
      2  aaf9							; Note Lookups Alternate - 128 bytes each, map MIDI Note# to a VIC register value
      3  aaf9							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  aaf9
      5  aaf9				   voice1lookup_alt
      6  aaf9		       00		      byte.b	0
      7  aafa		       00		      byte.b	0
      8  aafb		       00		      byte.b	0
      9  aafc		       00		      byte.b	0
     10  aafd		       00		      byte.b	0
     11  aafe		       00		      byte.b	0
     12  aaff		       00		      byte.b	0
     13  ab00		       00		      byte.b	0
     14  ab01		       00		      byte.b	0
     15  ab02		       00		      byte.b	0
     16  ab03		       00		      byte.b	0
     17  ab04		       00		      byte.b	0
     18  ab05		       00		      byte.b	0
     19  ab06		       00		      byte.b	0
     20  ab07		       00		      byte.b	0
     21  ab08		       00		      byte.b	0
     22  ab09		       00		      byte.b	0
     23  ab0a		       00		      byte.b	0
     24  ab0b		       00		      byte.b	0
     25  ab0c		       00		      byte.b	0
     26  ab0d		       00		      byte.b	0
     27  ab0e		       00		      byte.b	0
     28  ab0f		       00		      byte.b	0
     29  ab10		       00		      byte.b	0
     30  ab11		       ff		      byte.b	255
     31  ab12		       86		      byte.b	134
     32  ab13		       8d		      byte.b	141
     33  ab14		       93		      byte.b	147
     34  ab15		       99		      byte.b	153
     35  ab16		       9f		      byte.b	159
     36  ab17		       a4		      byte.b	164
     37  ab18		       aa		      byte.b	170
     38  ab19		       ae		      byte.b	174
     39  ab1a		       b3		      byte.b	179
     40  ab1b		       b7		      byte.b	183
     41  ab1c		       bb		      byte.b	187
     42  ab1d		       bf		      byte.b	191
     43  ab1e		       c3		      byte.b	195
     44  ab1f		       c6		      byte.b	198
     45  ab20		       c9		      byte.b	201
     46  ab21		       cc		      byte.b	204
     47  ab22		       cf		      byte.b	207
     48  ab23		       d2		      byte.b	210
     49  ab24		       d4		      byte.b	212
     50  ab25		       d7		      byte.b	215
     51  ab26		       d9		      byte.b	217
     52  ab27		       db		      byte.b	219
     53  ab28		       dd		      byte.b	221
     54  ab29		       df		      byte.b	223
     55  ab2a		       e1		      byte.b	225
     56  ab2b		       e2		      byte.b	226
     57  ab2c		       e4		      byte.b	228
     58  ab2d		       e6		      byte.b	230
     59  ab2e		       e7		      byte.b	231
     60  ab2f		       e8		      byte.b	232
     61  ab30		       ea		      byte.b	234
     62  ab31		       eb		      byte.b	235
     63  ab32		       ec		      byte.b	236
     64  ab33		       ed		      byte.b	237
     65  ab34		       ee		      byte.b	238
     66  ab35		       ef		      byte.b	239
     67  ab36		       00		      byte.b	0
     68  ab37		       00		      byte.b	0
     69  ab38		       00		      byte.b	0
     70  ab39		       00		      byte.b	0
     71  ab3a		       00		      byte.b	0
     72  ab3b		       00		      byte.b	0
     73  ab3c		       00		      byte.b	0
     74  ab3d		       00		      byte.b	0
     75  ab3e		       00		      byte.b	0
     76  ab3f		       00		      byte.b	0
     77  ab40		       00		      byte.b	0
     78  ab41		       00		      byte.b	0
     79  ab42		       00		      byte.b	0
     80  ab43		       00		      byte.b	0
     81  ab44		       00		      byte.b	0
     82  ab45		       00		      byte.b	0
     83  ab46		       00		      byte.b	0
     84  ab47		       00		      byte.b	0
     85  ab48		       00		      byte.b	0
     86  ab49		       00		      byte.b	0
     87  ab4a		       00		      byte.b	0
     88  ab4b		       00		      byte.b	0
     89  ab4c		       00		      byte.b	0
     90  ab4d		       00		      byte.b	0
     91  ab4e		       00		      byte.b	0
     92  ab4f		       00		      byte.b	0
     93  ab50		       00		      byte.b	0
     94  ab51		       00		      byte.b	0
     95  ab52		       00		      byte.b	0
     96  ab53		       00		      byte.b	0
     97  ab54		       00		      byte.b	0
     98  ab55		       00		      byte.b	0
     99  ab56		       00		      byte.b	0
    100  ab57		       00		      byte.b	0
    101  ab58		       00		      byte.b	0
    102  ab59		       00		      byte.b	0
    103  ab5a		       00		      byte.b	0
    104  ab5b		       00		      byte.b	0
    105  ab5c		       00		      byte.b	0
    106  ab5d		       00		      byte.b	0
    107  ab5e		       00		      byte.b	0
    108  ab5f		       00		      byte.b	0
    109  ab60		       00		      byte.b	0
    110  ab61		       00		      byte.b	0
    111  ab62		       00		      byte.b	0
    112  ab63		       00		      byte.b	0
    113  ab64		       00		      byte.b	0
    114  ab65		       00		      byte.b	0
    115  ab66		       00		      byte.b	0
    116  ab67		       00		      byte.b	0
    117  ab68		       00		      byte.b	0
    118  ab69		       00		      byte.b	0
    119  ab6a		       00		      byte.b	0
    120  ab6b		       00		      byte.b	0
    121  ab6c		       00		      byte.b	0
    122  ab6d		       00		      byte.b	0
    123  ab6e		       00		      byte.b	0
    124  ab6f		       00		      byte.b	0
    125  ab70		       00		      byte.b	0
    126  ab71		       00		      byte.b	0
    127  ab72		       00		      byte.b	0
    128  ab73		       00		      byte.b	0
    129  ab74		       00		      byte.b	0
    130  ab75		       00		      byte.b	0
    131  ab76		       00		      byte.b	0
    132  ab77		       00		      byte.b	0
    133  ab78		       00		      byte.b	0
    134  ab79
    135  ab79				   voice2lookup_alt
    136  ab79		       00		      byte.b	0
    137  ab7a		       00		      byte.b	0
    138  ab7b		       00		      byte.b	0
    139  ab7c		       00		      byte.b	0
    140  ab7d		       00		      byte.b	0
    141  ab7e		       00		      byte.b	0
    142  ab7f		       00		      byte.b	0
    143  ab80		       00		      byte.b	0
    144  ab81		       00		      byte.b	0
    145  ab82		       00		      byte.b	0
    146  ab83		       00		      byte.b	0
    147  ab84		       00		      byte.b	0
    148  ab85		       00		      byte.b	0
    149  ab86		       00		      byte.b	0
    150  ab87		       00		      byte.b	0
    151  ab88		       00		      byte.b	0
    152  ab89		       00		      byte.b	0
    153  ab8a		       00		      byte.b	0
    154  ab8b		       00		      byte.b	0
    155  ab8c		       00		      byte.b	0
    156  ab8d		       00		      byte.b	0
    157  ab8e		       00		      byte.b	0
    158  ab8f		       00		      byte.b	0
    159  ab90		       00		      byte.b	0
    160  ab91		       00		      byte.b	0
    161  ab92		       00		      byte.b	0
    162  ab93		       00		      byte.b	0
    163  ab94		       00		      byte.b	0
    164  ab95		       00		      byte.b	0
    165  ab96		       00		      byte.b	0
    166  ab97		       00		      byte.b	0
    167  ab98		       00		      byte.b	0
    168  ab99		       00		      byte.b	0
    169  ab9a		       00		      byte.b	0
    170  ab9b		       00		      byte.b	0
    171  ab9c		       00		      byte.b	0
    172  ab9d		       ff		      byte.b	255
    173  ab9e		       86		      byte.b	134
    174  ab9f		       8d		      byte.b	141
    175  aba0		       93		      byte.b	147
    176  aba1		       99		      byte.b	153
    177  aba2		       9f		      byte.b	159
    178  aba3		       a4		      byte.b	164
    179  aba4		       aa		      byte.b	170
    180  aba5		       ae		      byte.b	174
    181  aba6		       b3		      byte.b	179
    182  aba7		       b7		      byte.b	183
    183  aba8		       bb		      byte.b	187
    184  aba9		       bf		      byte.b	191
    185  abaa		       c3		      byte.b	195
    186  abab		       c6		      byte.b	198
    187  abac		       c9		      byte.b	201
    188  abad		       cc		      byte.b	204
    189  abae		       cf		      byte.b	207
    190  abaf		       d2		      byte.b	210
    191  abb0		       d4		      byte.b	212
    192  abb1		       d7		      byte.b	215
    193  abb2		       d9		      byte.b	217
    194  abb3		       db		      byte.b	219
    195  abb4		       dd		      byte.b	221
    196  abb5		       df		      byte.b	223
    197  abb6		       e1		      byte.b	225
    198  abb7		       e2		      byte.b	226
    199  abb8		       e4		      byte.b	228
    200  abb9		       e6		      byte.b	230
    201  abba		       e7		      byte.b	231
    202  abbb		       e8		      byte.b	232
    203  abbc		       ea		      byte.b	234
    204  abbd		       eb		      byte.b	235
    205  abbe		       ec		      byte.b	236
    206  abbf		       ed		      byte.b	237
    207  abc0		       ee		      byte.b	238
    208  abc1		       ef		      byte.b	239
    209  abc2		       00		      byte.b	0
    210  abc3		       00		      byte.b	0
    211  abc4		       00		      byte.b	0
    212  abc5		       00		      byte.b	0
    213  abc6		       00		      byte.b	0
    214  abc7		       00		      byte.b	0
    215  abc8		       00		      byte.b	0
    216  abc9		       00		      byte.b	0
    217  abca		       00		      byte.b	0
    218  abcb		       00		      byte.b	0
    219  abcc		       00		      byte.b	0
    220  abcd		       00		      byte.b	0
    221  abce		       00		      byte.b	0
    222  abcf		       00		      byte.b	0
    223  abd0		       00		      byte.b	0
    224  abd1		       00		      byte.b	0
    225  abd2		       00		      byte.b	0
    226  abd3		       00		      byte.b	0
    227  abd4		       00		      byte.b	0
    228  abd5		       00		      byte.b	0
    229  abd6		       00		      byte.b	0
    230  abd7		       00		      byte.b	0
    231  abd8		       00		      byte.b	0
    232  abd9		       00		      byte.b	0
    233  abda		       00		      byte.b	0
    234  abdb		       00		      byte.b	0
    235  abdc		       00		      byte.b	0
    236  abdd		       00		      byte.b	0
    237  abde		       00		      byte.b	0
    238  abdf		       00		      byte.b	0
    239  abe0		       00		      byte.b	0
    240  abe1		       00		      byte.b	0
    241  abe2		       00		      byte.b	0
    242  abe3		       00		      byte.b	0
    243  abe4		       00		      byte.b	0
    244  abe5		       00		      byte.b	0
    245  abe6		       00		      byte.b	0
    246  abe7		       00		      byte.b	0
    247  abe8		       00		      byte.b	0
    248  abe9		       00		      byte.b	0
    249  abea		       00		      byte.b	0
    250  abeb		       00		      byte.b	0
    251  abec		       00		      byte.b	0
    252  abed		       00		      byte.b	0
    253  abee		       00		      byte.b	0
    254  abef		       00		      byte.b	0
    255  abf0		       00		      byte.b	0
    256  abf1		       00		      byte.b	0
    257  abf2		       00		      byte.b	0
    258  abf3		       00		      byte.b	0
    259  abf4		       00		      byte.b	0
    260  abf5		       00		      byte.b	0
    261  abf6		       00		      byte.b	0
    262  abf7		       00		      byte.b	0
    263  abf8		       00		      byte.b	0
    264  abf9
    265  abf9				   voice3lookup_alt
    266  abf9		       00		      byte.b	0
    267  abfa		       00		      byte.b	0
    268  abfb		       00		      byte.b	0
    269  abfc		       00		      byte.b	0
    270  abfd		       00		      byte.b	0
    271  abfe		       00		      byte.b	0
    272  abff		       00		      byte.b	0
    273  ac00		       00		      byte.b	0
    274  ac01		       00		      byte.b	0
    275  ac02		       00		      byte.b	0
    276  ac03		       00		      byte.b	0
    277  ac04		       00		      byte.b	0
    278  ac05		       00		      byte.b	0
    279  ac06		       00		      byte.b	0
    280  ac07		       00		      byte.b	0
    281  ac08		       00		      byte.b	0
    282  ac09		       00		      byte.b	0
    283  ac0a		       00		      byte.b	0
    284  ac0b		       00		      byte.b	0
    285  ac0c		       00		      byte.b	0
    286  ac0d		       00		      byte.b	0
    287  ac0e		       00		      byte.b	0
    288  ac0f		       00		      byte.b	0
    289  ac10		       00		      byte.b	0
    290  ac11		       00		      byte.b	0
    291  ac12		       00		      byte.b	0
    292  ac13		       00		      byte.b	0
    293  ac14		       00		      byte.b	0
    294  ac15		       00		      byte.b	0
    295  ac16		       00		      byte.b	0
    296  ac17		       00		      byte.b	0
    297  ac18		       00		      byte.b	0
    298  ac19		       00		      byte.b	0
    299  ac1a		       00		      byte.b	0
    300  ac1b		       00		      byte.b	0
    301  ac1c		       00		      byte.b	0
    302  ac1d		       00		      byte.b	0
    303  ac1e		       00		      byte.b	0
    304  ac1f		       00		      byte.b	0
    305  ac20		       00		      byte.b	0
    306  ac21		       00		      byte.b	0
    307  ac22		       00		      byte.b	0
    308  ac23		       00		      byte.b	0
    309  ac24		       00		      byte.b	0
    310  ac25		       00		      byte.b	0
    311  ac26		       00		      byte.b	0
    312  ac27		       00		      byte.b	0
    313  ac28		       00		      byte.b	0
    314  ac29		       ff		      byte.b	255
    315  ac2a		       86		      byte.b	134
    316  ac2b		       8d		      byte.b	141
    317  ac2c		       93		      byte.b	147
    318  ac2d		       99		      byte.b	153
    319  ac2e		       9f		      byte.b	159
    320  ac2f		       a4		      byte.b	164
    321  ac30		       aa		      byte.b	170
    322  ac31		       ae		      byte.b	174
    323  ac32		       b3		      byte.b	179
    324  ac33		       b7		      byte.b	183
    325  ac34		       bb		      byte.b	187
    326  ac35		       bf		      byte.b	191
    327  ac36		       c3		      byte.b	195
    328  ac37		       c6		      byte.b	198
    329  ac38		       c9		      byte.b	201
    330  ac39		       cc		      byte.b	204
    331  ac3a		       cf		      byte.b	207
    332  ac3b		       d2		      byte.b	210
    333  ac3c		       d4		      byte.b	212
    334  ac3d		       d7		      byte.b	215
    335  ac3e		       d9		      byte.b	217
    336  ac3f		       db		      byte.b	219
    337  ac40		       dd		      byte.b	221
    338  ac41		       df		      byte.b	223
    339  ac42		       e1		      byte.b	225
    340  ac43		       e2		      byte.b	226
    341  ac44		       e4		      byte.b	228
    342  ac45		       e6		      byte.b	230
    343  ac46		       e7		      byte.b	231
    344  ac47		       e8		      byte.b	232
    345  ac48		       ea		      byte.b	234
    346  ac49		       eb		      byte.b	235
    347  ac4a		       ec		      byte.b	236
    348  ac4b		       ed		      byte.b	237
    349  ac4c		       ee		      byte.b	238
    350  ac4d		       ef		      byte.b	239
    351  ac4e		       00		      byte.b	0
    352  ac4f		       00		      byte.b	0
    353  ac50		       00		      byte.b	0
    354  ac51		       00		      byte.b	0
    355  ac52		       00		      byte.b	0
    356  ac53		       00		      byte.b	0
    357  ac54		       00		      byte.b	0
    358  ac55		       00		      byte.b	0
    359  ac56		       00		      byte.b	0
    360  ac57		       00		      byte.b	0
    361  ac58		       00		      byte.b	0
    362  ac59		       00		      byte.b	0
    363  ac5a		       00		      byte.b	0
    364  ac5b		       00		      byte.b	0
    365  ac5c		       00		      byte.b	0
    366  ac5d		       00		      byte.b	0
    367  ac5e		       00		      byte.b	0
    368  ac5f		       00		      byte.b	0
    369  ac60		       00		      byte.b	0
    370  ac61		       00		      byte.b	0
    371  ac62		       00		      byte.b	0
    372  ac63		       00		      byte.b	0
    373  ac64		       00		      byte.b	0
    374  ac65		       00		      byte.b	0
    375  ac66		       00		      byte.b	0
    376  ac67		       00		      byte.b	0
    377  ac68		       00		      byte.b	0
    378  ac69		       00		      byte.b	0
    379  ac6a		       00		      byte.b	0
    380  ac6b		       00		      byte.b	0
    381  ac6c		       00		      byte.b	0
    382  ac6d		       00		      byte.b	0
    383  ac6e		       00		      byte.b	0
    384  ac6f		       00		      byte.b	0
    385  ac70		       00		      byte.b	0
    386  ac71		       00		      byte.b	0
    387  ac72		       00		      byte.b	0
    388  ac73		       00		      byte.b	0
    389  ac74		       00		      byte.b	0
    390  ac75		       00		      byte.b	0
    391  ac76		       00		      byte.b	0
    392  ac77		       00		      byte.b	0
    393  ac78		       00		      byte.b	0
    394  ac79
    395  ac79
    396  ac79				   voice4lookup_alt
    397  ac79		       00		      byte.b	0
    398  ac7a		       00		      byte.b	0
    399  ac7b		       00		      byte.b	0
    400  ac7c		       00		      byte.b	0
    401  ac7d		       00		      byte.b	0
    402  ac7e		       00		      byte.b	0
    403  ac7f		       00		      byte.b	0
    404  ac80		       00		      byte.b	0
    405  ac81		       00		      byte.b	0
    406  ac82		       00		      byte.b	0
    407  ac83		       00		      byte.b	0
    408  ac84		       00		      byte.b	0
    409  ac85		       00		      byte.b	0
    410  ac86		       00		      byte.b	0
    411  ac87		       00		      byte.b	0
    412  ac88		       00		      byte.b	0
    413  ac89		       00		      byte.b	0
    414  ac8a		       00		      byte.b	0
    415  ac8b		       00		      byte.b	0
    416  ac8c		       00		      byte.b	0
    417  ac8d		       00		      byte.b	0
    418  ac8e		       00		      byte.b	0
    419  ac8f		       00		      byte.b	0
    420  ac90		       00		      byte.b	0
    421  ac91		       00		      byte.b	0
    422  ac92		       00		      byte.b	0
    423  ac93		       00		      byte.b	0
    424  ac94		       00		      byte.b	0
    425  ac95		       00		      byte.b	0
    426  ac96		       00		      byte.b	0
    427  ac97		       00		      byte.b	0
    428  ac98		       00		      byte.b	0
    429  ac99		       00		      byte.b	0
    430  ac9a		       00		      byte.b	0
    431  ac9b		       00		      byte.b	0
    432  ac9c		       00		      byte.b	0
    433  ac9d		       ff		      byte.b	255
    434  ac9e		       86		      byte.b	134
    435  ac9f		       8d		      byte.b	141
    436  aca0		       93		      byte.b	147
    437  aca1		       99		      byte.b	153
    438  aca2		       9f		      byte.b	159
    439  aca3		       a4		      byte.b	164
    440  aca4		       aa		      byte.b	170
    441  aca5		       ae		      byte.b	174
    442  aca6		       b3		      byte.b	179
    443  aca7		       b7		      byte.b	183
    444  aca8		       bb		      byte.b	187
    445  aca9		       bf		      byte.b	191
    446  acaa		       c3		      byte.b	195
    447  acab		       c6		      byte.b	198
    448  acac		       c9		      byte.b	201
    449  acad		       cc		      byte.b	204
    450  acae		       cf		      byte.b	207
    451  acaf		       d2		      byte.b	210
    452  acb0		       d4		      byte.b	212
    453  acb1		       d7		      byte.b	215
    454  acb2		       d9		      byte.b	217
    455  acb3		       db		      byte.b	219
    456  acb4		       dd		      byte.b	221
    457  acb5		       df		      byte.b	223
    458  acb6		       e1		      byte.b	225
    459  acb7		       e2		      byte.b	226
    460  acb8		       e4		      byte.b	228
    461  acb9		       e6		      byte.b	230
    462  acba		       e7		      byte.b	231
    463  acbb		       e8		      byte.b	232
    464  acbc		       ea		      byte.b	234
    465  acbd		       eb		      byte.b	235
    466  acbe		       ec		      byte.b	236
    467  acbf		       ed		      byte.b	237
    468  acc0		       ee		      byte.b	238
    469  acc1		       ef		      byte.b	239
    470  acc2		       00		      byte.b	0
    471  acc3		       00		      byte.b	0
    472  acc4		       00		      byte.b	0
    473  acc5		       00		      byte.b	0
    474  acc6		       00		      byte.b	0
    475  acc7		       00		      byte.b	0
    476  acc8		       00		      byte.b	0
    477  acc9		       00		      byte.b	0
    478  acca		       00		      byte.b	0
    479  accb		       00		      byte.b	0
    480  accc		       00		      byte.b	0
    481  accd		       00		      byte.b	0
    482  acce		       00		      byte.b	0
    483  accf		       00		      byte.b	0
    484  acd0		       00		      byte.b	0
    485  acd1		       00		      byte.b	0
    486  acd2		       00		      byte.b	0
    487  acd3		       00		      byte.b	0
    488  acd4		       00		      byte.b	0
    489  acd5		       00		      byte.b	0
    490  acd6		       00		      byte.b	0
    491  acd7		       00		      byte.b	0
    492  acd8		       00		      byte.b	0
    493  acd9		       00		      byte.b	0
    494  acda		       00		      byte.b	0
    495  acdb		       00		      byte.b	0
    496  acdc		       00		      byte.b	0
    497  acdd		       00		      byte.b	0
    498  acde		       00		      byte.b	0
    499  acdf		       00		      byte.b	0
    500  ace0		       00		      byte.b	0
    501  ace1		       00		      byte.b	0
    502  ace2		       00		      byte.b	0
    503  ace3		       00		      byte.b	0
    504  ace4		       00		      byte.b	0
    505  ace5		       00		      byte.b	0
    506  ace6		       00		      byte.b	0
    507  ace7		       00		      byte.b	0
    508  ace8		       00		      byte.b	0
    509  ace9		       00		      byte.b	0
    510  acea		       00		      byte.b	0
    511  aceb		       00		      byte.b	0
    512  acec		       00		      byte.b	0
    513  aced		       00		      byte.b	0
    514  acee		       00		      byte.b	0
    515  acef		       00		      byte.b	0
    516  acf0		       00		      byte.b	0
    517  acf1		       00		      byte.b	0
    518  acf2		       00		      byte.b	0
    519  acf3		       00		      byte.b	0
    520  acf4		       00		      byte.b	0
    521  acf5		       00		      byte.b	0
    522  acf6		       00		      byte.b	0
    523  acf7		       00		      byte.b	0
    524  acf8		       00		      byte.b	0
    525  acf9
    526  acf9							; EOF!
------- FILE vicmidi.asm
    826  acf9
    827  acf9							; ----------------------------------------------------------------------------
    828  acf9							; Binary includes
    829  acf9
    830  acf9				   fontorg
    831  acf9					      incbin	"font.bin"
    832  b0f9
    833  b0f9							; EOF!
