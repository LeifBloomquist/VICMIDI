------- FILE vicmidi.asm LEVEL 1 PASS 2
      1  b2db ????						; VIC-20 MIDI Interface
      2  b2db ????						; By David Viens and Leif Bloomquist, portions by
      3  b2db ????						; Michael Kircher and Viznut
      4  b2db ????
      5  b2db ????						; ----------------------------------------------------------------------------
      6  b2db ????
      7  b2db ????				      processor	6502	; VIC-20
      8  b2db ????
      9  b2db ????						; Assume no memory expansion.	 Compile as Cartridge ROM in Block 5.
     10  a000					      org	$A000	; Block 5
     11  a000
     12  a000							; Macro and equate includes (must be at start)
------- FILE macros.asm LEVEL 2 PASS 2
      0  a000					      include	"macros.asm"
      1  a000
      2  a000							; ==============================================================
      3  a000							; Macro wrapping the fast hex poke
      4  a000							; ==============================================================
      5  a000
      6  a000					      MAC	hexpoke
      7  a000					      lda	#<{1}	; Low byte
      8  a000					      sta	$22
      9  a000					      lda	#>{1}	; High byte
     10  a000					      sta	$23
     11  a000
     12  a000					      lda	{2}	; Note - address
     13  a000					      jsr	hexstr
     14  a000					      ENDM
     15  a000
     16  a000							; ==============================================================
     17  a000							; Macro to position the cursor
     18  a000							; ==============================================================
     19  a000
     20  a000					      MAC	plot
     21  a000					      ldy	#{1}
     22  a000					      ldx	#{2}
     23  a000					      clc
     24  a000					      jsr	$E50A	; PLOT - same on 64 and VIC
     25  a000					      ENDM
     26  a000
     27  a000							; ==============================================================
     28  a000							; Macro to print a string
     29  a000							; ==============================================================
     30  a000
     31  a000					      MAC	printstring
     32  a000					      ldy	#>{0}
     33  a000					      lda	#<{0}
     34  a000					      jsr	STROUT
     35  a000					      ENDM
     36  a000
     37  a000							; ==============================================================
     38  a000							; Macro to print a byte (Hex)
     39  a000							; ==============================================================
     40  a000
     41  a000					      MAC	printbyte
     42  a000					      ldx	#$00
     43  a000					      ldy	#$0F
     44  a000					      lda	{0}
     45  a000					      jsr	printnum
     46  a000					      ENDM
------- FILE vicmidi.asm
------- FILE equates.asm LEVEL 2 PASS 2
      0  a000					      include	"equates.asm"
      1  a000							; --------------------------------------------------------------------------------------------------
      2  a000							;;free zero page (to use as vars)
      3  a000							;INDEX1: $0022-$0023, First utility pointer		       used by HEXPOKE
      4  a000							;INDEX2: $0024-$0025, Second utility pointer		       bytesexpected, midicounter
      5  a000							;FORNAM: $0049-$004A, Pointer to FOR/NEXT index variable etc  channel
      6  a000							;TEMPF3: $004E-$0052, Temporary FLPT storage		       Used by keyboard routines
      7  a000							;TEMPF1: $0057-$005B, Temporary FLPT storage		       Used by setwave
      8  a000							;TEMPF2: $005C-$0060: Temporary FLPT storage		       FIFO pointers
      9  a000							;FAC:	  $0061-$0066, Floating-point Accumulator (FAC)        Flags for Poly mode
     10  a000							;AFAC:   $0069-$006E, Alternative/Auxilary FAC 	       69=last note
     11  a000
     12  a000							; ---- Zero Page Addresses -------------------------------------------------
     13  a000
     14  a000		       00 24	   midicounter =	$24
     15  a000		       00 25	   bytesexpected =	$25
     16  a000
     17  a000		       00 49	   channel    =	$49
     18  a000		       00 4a	   bank       =	$4A	; 0=NTSC Normal, 1=PAL Normal, 2=NTSC Alt., 3=PAL Alt.
     19  a000
     20  a000							; Previous keyboard column bits.
     21  a000		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
     22  a000		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     23  a000		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     24  a000		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     25  a000
     26  a000							; Used by setwave
     27  a000		       00 57	   TMP	      =	$57
     28  a000		       00 58	   TMP2       =	$58
     29  a000
     30  a000		       00 5c	   write_pointer =	$5C	; FIFO current write pointer - incremented on byte received
     31  a000		       00 5d	   read_pointer =	$5D	; FIFO current read pointer  - incremented on byte removed
     32  a000
     33  a000		       00 5e	   currentvalue =	$5E	; Current value for voice settings
     34  a000
     35  a000		       00 61	   poly_flags =	$61	; Flags for polymode
     36  a000							; Also 62,63,64
     37  a000
     38  a000		       00 68	   lastnote   =	$68	; Remembers last note, so Note Off applies to that note only
     39  a000							; Also 69,6A,6B
     40  a000
     41  a000		       00 6c	   temp1      =	$6C	; Used for screen colors
     42  a000		       00 6d	   tempx      =	$6D	; Used by program change
     43  a000
     44  a000							;*00FB-00FE  251-254  Operating system free zero page space
     45  a000		       00 fb	   statusbyte =	$FB
     46  a000		       00 fc	   mididata0  =	$FC
     47  a000		       00 fd	   mididata1  =	$FD
     48  a000		       00 fe	   mididata2  =	$FE	; If needed
     49  a000
     50  a000							; ---- Non Zero Page Addresses -----------------------------------------------
     51  a000
     52  a000							; Store viznut waveform being used per voice  (located near start of BASIC space)
     53  a000		       10 10	   waveform1  =	$1010
     54  a000		       10 11	   waveform2  =	$1011
     55  a000		       10 12	   waveform3  =	$1012
     56  a000		       10 13	   waveform4  =	$1013
     57  a000
     58  a000		       10 14	   tempstatusbyte =	$1014
     59  a000		       10 15	   command    =	$1015
     60  a000
     61  a000							; Scratch space for setwave parameters
     62  a000		       10 20	   setwavechannel =	$1020	; y = channel ($0a..$0c)
     63  a000		       10 21	   setwavefrequency =	$1021	; x = initial frequency
     64  a000		       10 22	   setwaveshiftreg =	$1022	; a = shift register contents
     65  a000
     66  a000							; Used by MIDI Out
     67  a000		       10 23	   midinoteout =	$1023
     68  a000
     69  a000							; Setwave Target
     70  a000		       11 00	   setwave    =	$1100	; Setwave code has to all be on one page.
     71  a000
     72  a000							; Input Buffer
     73  a000		       12 00	   buffer     =	$1200
     74  a000
     75  a000							; Font (copied here from ROM)
     76  a000		       18 00	   font       =	$1800	; 6144 decimal
     77  a000
     78  a000							;Screen locations
     79  a000		       1e 00	   screen_start =	$1E00
     80  a000		       1e 4d	   midi_display =	$1E4D
     81  a000		       1e 77	   voice_display =	$1E77
     82  a000		       1f f9	   spin_display =	$1FF9	; Lower-right corner
     83  a000		       97 f9	   spin_color =	spin_display + $7800
     84  a000
     85  a000							;Sound and Video Registers
     86  a000		       90 0a	   sound_voice1 =	$900A	; Frequency for oscillator 1 (low)    (on: 128-255)
     87  a000		       90 0b	   sound_voice2 =	$900B	; Frequency for oscillator 2 (medium) (on: 128-255)
     88  a000		       90 0c	   sound_voice3 =	$900C	; Frequency for oscillator 3 (high)   (on: 128-255)
     89  a000		       90 0d	   sound_noise =	$900D	; Frequency of noise source	       (on: 128-255)
     90  a000		       90 0e	   sound_volume =	$900E	; Bits 0-3 sets volume of all sound.  Bits 4-7 are auxiliary color information (not used)
     91  a000		       90 0f	   screen_colors =	$900F
     92  a000
     93  a000							; ST16C450 Registers  (IO3)
     94  a000		       9c 00	   UART_RXTX  =	$9C00
     95  a000		       9c 01	   UART_IER   =	$9C01
     96  a000		       9c 02	   UART_ISR   =	$9C02
     97  a000		       9c 03	   UART_LCR   =	$9C03
     98  a000		       9c 04	   UART_MCR   =	$9C04
     99  a000		       9c 05	   UART_LSR   =	$9C05
    100  a000		       9c 07	   UART_SCRATCHPAD =	$9C07
    101  a000		       9c 00	   UART_DIVISOR_LSB =	$9C00	; Yes, same as UART_RXTX
    102  a000		       9c 01	   UART_DIVISOR_MSB =	$9C01
    103  a000
    104  a000
    105  a000							; Kernal/BASIC Routines
    106  a000		       e5 5f	   CLRSCREEN  =	$E55F
    107  a000		       e5 81	   HOME       =	$E581
    108  a000		       eb 1e	   ISCNKY     =	$EB1E
    109  a000		       f2 7a	   CHROUT     =	$F27A
    110  a000		       ff e4	   GETIN      =	$FFE4
    111  a000		       cb 1e	   STROUT     =	$CB1E	; Print string pointed to by (A/Y) until zero byte.
    112  a000
    113  a000		       00 08	   CG_DCS     =	8	;disable shift+C=
    114  a000		       00 09	   CG_ECS     =	9	;enable shift+C=
    115  a000
    116  a000		       00 0e	   CG_LCS     =	14	;switch to lowercase
    117  a000		       00 8e	   CG_UCS     =	142	;switch to uppercase
    118  a000
    119  a000							;cursor movement
    120  a000		       00 13	   CS_HOM     =	19
    121  a000		       00 91	   CS_U       =	145
    122  a000		       00 11	   CS_D       =	17
    123  a000		       00 9d	   CS_L       =	157
    124  a000		       00 1d	   CS_R       =	29
    125  a000
    126  a000		       00 0d	   CRLF       =	13
    127  a000
    128  a000							; EOF!
------- FILE vicmidi.asm
     15  a000
     16  a000							; ---- Startup Code ---------------------------------------------------------
     17  a000		       09 a0		      dc.w	START	; Entry point for power up
     18  a002		       c4 a5		      dc.w	RESTORE	; Entry point for warm start (RESTORE)
     19  a004
     20  a004		       41 30 c3 c2*	      dc.b	"A0",$C3,$C2,$CD	; 'A0CBM' boot string
     21  a009
     22  a009				   START
     23  a009							; Kernel Init
     24  a009		       20 8d fd 	      jsr	$fd8d	; RAMTAS - Initialise System Constants
     25  a00c		       20 52 fd 	      jsr	$fd52	; Init Vectors
     26  a00f		       20 f9 fd 	      jsr	$fdf9	; Init I/O
     27  a012		       20 18 e5 	      jsr	$e518	; Init I/O
     28  a015
     29  a015							; BASIC Init (Partial)
     30  a015		       20 5b e4 	      jsr	$e45b	; Init Vectors
     31  a018		       20 a4 e3 	      jsr	$e3a4	; BASIC RAM
     32  a01b		       20 04 e4 	      jsr	$e404	; INIT Message (needed (?) so keycheck routines work)
     33  a01e
     34  a01e				   entry
     35  a01e		       20 c4 a3 	      jsr	setupfont
     36  a021		       20 89 a3 	      jsr	mainscreen
     37  a024		       20 29 a6 	      jsr	setup_pal
     38  a027		       20 b8 a3 	      jsr	setwavecopy
     39  a02a		       20 57 a5 	      jsr	checkuart
     40  a02d		       20 9f a5 	      jsr	setupirq
     41  a030		       20 80 a5 	      jsr	resetuart
     42  a033
     43  a033							; Default to maximum volume
     44  a033		       a9 0f		      lda	#$0F
     45  a035		       20 69 a2 	      jsr	setvolume
     46  a038
     47  a038							; Initial Values
     48  a038		       a9 00		      lda	#$00
     49  a03a		       85 24		      sta	midicounter	; midicounter=0
     50  a03c		       85 fb		      sta	statusbyte	; statusbyte=0
     51  a03e		       85 fc		      sta	mididata0	; mididata0=0
     52  a040		       85 fd		      sta	mididata1	; mididata1=0
     53  a042		       85 fe		      sta	mididata2	; mididata2=0
     54  a044		       85 4e		      sta	c0	; no keys are pressed in 7F
     55  a046		       85 4f		      sta	c1	; no keys are pressed in BF
     56  a048		       85 50		      sta	c2	; no keys are pressed in FD
     57  a04a		       85 51		      sta	c3	; no keys are pressed in FE
     58  a04c		       85 68		      sta	lastnote+0	; Clear
     59  a04e		       85 69		      sta	lastnote+1	;    last
     60  a050		       85 6a		      sta	lastnote+2	;	note
     61  a052		       85 6b		      sta	lastnote+3	;	  (including noise)
     62  a054		       85 61		      sta	poly_flags+0	; Clear
     63  a056		       85 62		      sta	poly_flags+1	;   poly
     64  a058		       85 63		      sta	poly_flags+2	;     flags
     65  a05a		       8d f9 97 	      sta	spin_color
     66  a05d		       85 5c		      sta	write_pointer
     67  a05f		       85 5d		      sta	read_pointer
     68  a061		       8d 10 10 	      sta	waveform1
     69  a064		       8d 11 10 	      sta	waveform2
     70  a067		       8d 12 10 	      sta	waveform3
     71  a06a		       8d 13 10 	      sta	waveform4
     72  a06d		       8d 23 10 	      sta	midinoteout
     73  a070
     74  a070							;;; ==========================================================================
     75  a070							;;; main LOOP!
     76  a070				   loop
     77  a070		       ee f9 97 	      inc	spin_color	; Prove we aren't 'frozen'
     78  a073		       20 e3 a6 	      jsr	ReadKey	; create events from keyboard if needed
     79  a076
     80  a076		       a5 5d		      lda	read_pointer
     81  a078		       c5 5c		      cmp	write_pointer
     82  a07a		       f0 f4		      beq	loop	; Pointers match, no data
     83  a07c							;;; ==========================================================================
     84  a07c
     85  a07c							; We have data!
     86  a07c							; Advance pointer for next read
     87  a07c		       e6 5d		      inc	read_pointer
     88  a07e
     89  a07e							; Read current byte
     90  a07e		       aa		      tax		; Since A still contains the unincremented pointer
     91  a07f		       bd 00 12 	      lda	buffer,x
     92  a082
     93  a082							; If Bit 7 is set, it means it's a status byte and we need to prepare for a new message
     94  a082		       10 33		      bpl	data	; Not a status byte
     95  a084
     96  a084							; ----------------------------------------------------------------------------
     97  a084							; Process a status byte  (Currently in A)
     98  a084
     99  a084							; Store the status byte temporarily
    100  a084		       8d 14 10 	      sta	tempstatusbyte
    101  a087
    102  a087							; Handle System Common / System Realtime messages
    103  a087		       29 f0		      and	#$F0
    104  a089		       c9 f0		      cmp	#$F0
    105  a08b		       d0 03		      bne	normalmessage
    106  a08d							;  inc screen_colors
    107  a08d		       4c 1e a1 	      jmp	system_realtime_proc	; Which goes back to loop
    108  a090
    109  a090				   normalmessage
    110  a090							; Everything else, split into Command and Channel
    111  a090		       ad 14 10 	      lda	tempstatusbyte
    112  a093		       85 fb		      sta	statusbyte
    113  a095		       29 f0		      and	#$F0	; Get the upper nybble
    114  a097		       8d 15 10 	      sta	command
    115  a09a
    116  a09a		       a5 fb		      lda	statusbyte
    117  a09c		       29 0f		      and	#$0F	; Get the lower nybble
    118  a09e		       85 49		      sta	channel
    119  a0a0
    120  a0a0							; Also, check how many data bytes should follow.
    121  a0a0		       ad 15 10 	      lda	command
    122  a0a3
    123  a0a3							; 1 for Program Change
    124  a0a3		       c9 c0		      cmp	#$C0	; Program change
    125  a0a5		       f0 05		      beq	bytes1
    126  a0a7
    127  a0a7							; Assume 2 for all the rest
    128  a0a7				   bytes2
    129  a0a7		       a0 02		      ldy	#$02
    130  a0a9		       4c ae a0 	      jmp	setbytes
    131  a0ac
    132  a0ac				   bytes1
    133  a0ac		       a0 01		      ldy	#$01
    134  a0ae							; Drop through
    135  a0ae
    136  a0ae				   setbytes
    137  a0ae		       84 25		      sty	bytesexpected
    138  a0b0
    139  a0b0							; Reset the midi counter to 0
    140  a0b0		       a2 00		      ldx	#$00
    141  a0b2		       86 24		      stx	midicounter
    142  a0b4
    143  a0b4		       4c 70 a0 	      jmp	loop	; Wait for next byte
    144  a0b7
    145  a0b7
    146  a0b7							; ----------------------------------------------------------------------------
    147  a0b7							; Store data byte - in A.
    148  a0b7
    149  a0b7				   data
    150  a0b7		       a6 24		      ldx	midicounter	; What byte are we at?
    151  a0b9		       95 fc		      sta	mididata0,x	; Store received midi data pointed by x
    152  a0bb
    153  a0bb		       e8		      inx		; x++
    154  a0bc		       86 24		      stx	midicounter	; and store x
    155  a0be
    156  a0be		       e4 25		      cpx	bytesexpected	; Number of data bytes expected in this MIDI message (i.e. 2)
    157  a0c0		       f0 03		      beq	messageproc	; Complete MIDI message received.
    158  a0c2
    159  a0c2							; Not complete, wait for more bytes.
    160  a0c2		       4c 70 a0 	      jmp	loop
    161  a0c5
    162  a0c5
    163  a0c5							; ----------------------------------------------------------------------------
    164  a0c5							; Process a complete MIDI message   (All but System)
    165  a0c5
    166  a0c5				   messageproc
    167  a0c5
    168  a0c5							; Display received message bytes
      0  a0c5					      HEXPOKE	(midi_display+0),statusbyte
      1  a0c5		       a9 4d		      lda	#<(midi_display+0)
      2  a0c7		       85 22		      sta	$22
      3  a0c9		       a9 1e		      lda	#>(midi_display+0)
      4  a0cb		       85 23		      sta	$23
      5  a0cd
      6  a0cd		       a5 fb		      lda	statusbyte
      7  a0cf		       20 dd a5 	      jsr	hexstr
      0  a0d2					      HEXPOKE	(midi_display+3),mididata0
      1  a0d2		       a9 50		      lda	#<(midi_display+3)
      2  a0d4		       85 22		      sta	$22
      3  a0d6		       a9 1e		      lda	#>(midi_display+3)
      4  a0d8		       85 23		      sta	$23
      5  a0da
      6  a0da		       a5 fc		      lda	mididata0
      7  a0dc		       20 dd a5 	      jsr	hexstr
      0  a0df					      HEXPOKE	(midi_display+6),mididata1
      1  a0df		       a9 53		      lda	#<(midi_display+6)
      2  a0e1		       85 22		      sta	$22
      3  a0e3		       a9 1e		      lda	#>(midi_display+6)
      4  a0e5		       85 23		      sta	$23
      5  a0e7
      6  a0e7		       a5 fd		      lda	mididata1
      7  a0e9		       20 dd a5 	      jsr	hexstr
    172  a0ec
    173  a0ec							; Reset the midi counter to 0 again, in case of running status
    174  a0ec		       a2 00		      ldx	#$00
    175  a0ee		       86 24		      stx	midicounter
    176  a0f0
    177  a0f0							; Determine Command
    178  a0f0		       ad 15 10 	      lda	command
    179  a0f3
    180  a0f3		       c9 80		      cmp	#$80	; Note Off
    181  a0f5		       f0 0f		      beq	donoteoff
    182  a0f7
    183  a0f7		       c9 90		      cmp	#$90	; Note On
    184  a0f9		       f0 11		      beq	donoteon
    185  a0fb
    186  a0fb		       c9 b0		      cmp	#$B0	; Control Change
    187  a0fd		       f0 13		      beq	docontrolchange
    188  a0ff
    189  a0ff		       c9 c0		      cmp	#$C0	; Program Change
    190  a101		       f0 15		      beq	doprogramchange
    191  a103
    192  a103							; All others (Aftertouch, etc.) ignored.
    193  a103		       4c 70 a0 	      jmp	loop
    194  a106
    195  a106				   donoteoff
    196  a106		       20 e1 a1 	      jsr	noteoff
    197  a109		       4c 70 a0 	      jmp	loop
    198  a10c
    199  a10c				   donoteon
    200  a10c		       20 3d a1 	      jsr	noteon
    201  a10f		       4c 70 a0 	      jmp	loop
    202  a112
    203  a112				   docontrolchange
    204  a112		       20 fa a1 	      jsr	controlchange
    205  a115		       4c 70 a0 	      jmp	loop
    206  a118
    207  a118				   doprogramchange
    208  a118		       20 94 a2 	      jsr	programchange
    209  a11b		       4c 70 a0 	      jmp	loop
    210  a11e
    211  a11e
    212  a11e							; ----------------------------------------------------------------------------
    213  a11e							; Process a MIDI System Realtime  (for future)
    214  a11e
    215  a11e				   system_realtime_proc
    216  a11e
    217  a11e							; Display received message bytes
      0  a11e					      HEXPOKE	(midi_display+0),tempstatusbyte
      1  a11e		       a9 4d		      lda	#<(midi_display+0)
      2  a120		       85 22		      sta	$22
      3  a122		       a9 1e		      lda	#>(midi_display+0)
      4  a124		       85 23		      sta	$23
      5  a126
      6  a126		       ad 14 10 	      lda	tempstatusbyte
      7  a129		       20 dd a5 	      jsr	hexstr
    219  a12c
    220  a12c							; Blank the unused MIDI bytes
    221  a12c		       a9 2d		      lda	#45	; -
    222  a12e		       8d 50 1e 	      sta	midi_display+3
    223  a131		       8d 51 1e 	      sta	midi_display+4
    224  a134		       8d 53 1e 	      sta	midi_display+6
    225  a137		       8d 54 1e 	      sta	midi_display+7
    226  a13a
    227  a13a							; inc screen_colors
    228  a13a
    229  a13a							; Determine Command
    230  a13a							;lda tempstatusbyte
    231  a13a
    232  a13a							;cmp #$...
    233  a13a							;beq ...
    234  a13a
    235  a13a							; All ignored.
    236  a13a		       4c 70 a0 	      jmp	loop
    237  a13d
    238  a13d
    239  a13d
    240  a13d
    241  a13d							;*****************************************************************************
    242  a13d							;*************************  MIDI Processing  *********************************
    243  a13d							;*****************************************************************************
    244  a13d
    245  a13d							; ---- Note On ---------------------------------------------------
    246  a13d							; 9c nn vv
    247  a13d
    248  a13d				   noteon
    249  a13d							; Special Case: Treat Velocity=0 as Note Off.	Velocity ignored otherwise.
    250  a13d		       a5 fd		      lda	mididata1
    251  a13f		       d0 03		      bne	noteon_contd
    252  a141		       4c e1 a1 	      jmp	noteoff
    253  a144
    254  a144				   noteon_contd
    255  a144		       a4 49		      ldy	channel	; Y now contains Channel # (0-offset)
    256  a146		       a6 fc		      ldx	mididata0	; X now contains MIDI Note #
    257  a148
    258  a148							; Special Case: Channel 5 used for Poly mode
    259  a148		       c0 04		      cpy	#$04
    260  a14a		       d0 03		      bne	savenote
    261  a14c		       20 3e a6 	      jsr	get_poly_voice
    262  a14f
    263  a14f				   savenote
    264  a14f							; Save the note# so that later Note Offs only apply to this note.
    265  a14f		       8a		      txa
    266  a150		       99 68 00 	      sta	lastnote,y
    267  a153
    268  a153							; Perform a table lookup of MIDI Note# to VIC Register
    269  a153							; Table to use depends on bank/voice/channel
    270  a153
    271  a153							; Check the bank
    272  a153		       a5 4a		      lda	bank
    273  a155
    274  a155		       c9 00		      cmp	#$00
    275  a157		       f0 0d		      beq	lookups_ntsc
    276  a159
    277  a159		       c9 01		      cmp	#$01
    278  a15b		       f0 32		      beq	lookups_pal
    279  a15d
    280  a15d		       c9 02		      cmp	#$02
    281  a15f		       f0 57		      beq	lookups_alt
    282  a161
    283  a161		       c9 03		      cmp	#$03
    284  a163		       f0 53		      beq	lookups_alt
    285  a165
    286  a165							; Ignore all other banks
    287  a165		       60		      rts
    288  a166
    289  a166
    290  a166							; ------ NTSC -------
    291  a166
    292  a166				   lookups_ntsc
    293  a166		       c0 00		      cpy	#$00
    294  a168		       f0 0d		      beq	vlook1_ntsc
    295  a16a
    296  a16a		       c0 01		      cpy	#$01
    297  a16c		       f0 0f		      beq	vlook2_ntsc
    298  a16e
    299  a16e		       c0 02		      cpy	#$02
    300  a170		       f0 11		      beq	vlook3_ntsc
    301  a172
    302  a172		       c0 03		      cpy	#$03
    303  a174		       f0 13		      beq	vlook4_ntsc
    304  a176
    305  a176							; Ignore all other channels
    306  a176		       60		      rts
    307  a177
    308  a177				   vlook1_ntsc
    309  a177		       bd db a8 	      lda	voice1lookup_ntsc,x
    310  a17a		       4c 1a a3 	      jmp	setvoice
    311  a17d
    312  a17d				   vlook2_ntsc
    313  a17d		       bd 5b a9 	      lda	voice2lookup_ntsc,x
    314  a180		       4c 1a a3 	      jmp	setvoice
    315  a183
    316  a183				   vlook3_ntsc
    317  a183		       bd db a9 	      lda	voice3lookup_ntsc,x
    318  a186		       4c 1a a3 	      jmp	setvoice
    319  a189
    320  a189				   vlook4_ntsc
    321  a189		       bd 5b aa 	      lda	voice4lookup_ntsc,x
    322  a18c		       4c 1a a3 	      jmp	setvoice
    323  a18f
    324  a18f							; ------ PAL -------
    325  a18f
    326  a18f				   lookups_pal
    327  a18f		       c0 00		      cpy	#$00
    328  a191		       f0 0d		      beq	vlook1_pal
    329  a193
    330  a193		       c0 01		      cpy	#$01
    331  a195		       f0 0f		      beq	vlook2_pal
    332  a197
    333  a197		       c0 02		      cpy	#$02
    334  a199		       f0 11		      beq	vlook3_pal
    335  a19b
    336  a19b		       c0 03		      cpy	#$03
    337  a19d		       f0 13		      beq	vlook4_pal
    338  a19f
    339  a19f							; Ignore all other channels
    340  a19f		       60		      rts
    341  a1a0
    342  a1a0				   vlook1_pal
    343  a1a0		       bd db aa 	      lda	voice1lookup_pal,x
    344  a1a3		       4c 1a a3 	      jmp	setvoice
    345  a1a6
    346  a1a6				   vlook2_pal
    347  a1a6		       bd 5b ab 	      lda	voice2lookup_pal,x
    348  a1a9		       4c 1a a3 	      jmp	setvoice
    349  a1ac
    350  a1ac				   vlook3_pal
    351  a1ac		       bd db ab 	      lda	voice3lookup_pal,x
    352  a1af		       4c 1a a3 	      jmp	setvoice
    353  a1b2
    354  a1b2				   vlook4_pal
    355  a1b2		       bd 5b ac 	      lda	voice4lookup_pal,x
    356  a1b5		       4c 1a a3 	      jmp	setvoice
    357  a1b8
    358  a1b8							; ------ Alternate -------
    359  a1b8
    360  a1b8				   lookups_alt
    361  a1b8		       c0 00		      cpy	#$00
    362  a1ba		       f0 0d		      beq	vlook1_alt
    363  a1bc
    364  a1bc		       c0 01		      cpy	#$01
    365  a1be		       f0 0f		      beq	vlook2_alt
    366  a1c0
    367  a1c0		       c0 02		      cpy	#$02
    368  a1c2		       f0 11		      beq	vlook3_alt
    369  a1c4
    370  a1c4		       c0 03		      cpy	#$03
    371  a1c6		       f0 13		      beq	vlook4_alt
    372  a1c8
    373  a1c8							; Ignore all other channels
    374  a1c8		       60		      rts
    375  a1c9
    376  a1c9				   vlook1_alt
    377  a1c9		       bd db ac 	      lda	voice1lookup_alt,x
    378  a1cc		       4c 1a a3 	      jmp	setvoice
    379  a1cf
    380  a1cf				   vlook2_alt
    381  a1cf		       bd 5b ad 	      lda	voice2lookup_alt,x
    382  a1d2		       4c 1a a3 	      jmp	setvoice
    383  a1d5
    384  a1d5				   vlook3_alt
    385  a1d5		       bd db ad 	      lda	voice3lookup_alt,x
    386  a1d8		       4c 1a a3 	      jmp	setvoice
    387  a1db
    388  a1db				   vlook4_alt
    389  a1db		       bd 5b ae 	      lda	voice4lookup_alt,x
    390  a1de		       4c 1a a3 	      jmp	setvoice
    391  a1e1
    392  a1e1							; ---- Note Off --------------------------------------------------------------
    393  a1e1							; 8c nn vv
    394  a1e1
    395  a1e1				   noteoff
    396  a1e1		       a4 49		      ldy	channel	; Y now contains channel #
    397  a1e3
    398  a1e3							; Special Case: Channel 5 used for Poly mode
    399  a1e3		       c0 04		      cpy	#$04
    400  a1e5		       d0 06		      bne	noteoff_check
    401  a1e7
    402  a1e7		       20 53 a6 	      jsr	get_poly_voice_off
    403  a1ea		       4c f4 a1 	      jmp	noteoff_off
    404  a1ed
    405  a1ed				   noteoff_check
    406  a1ed							;For Channels 1-4
    407  a1ed							;Check if it matches the last.  If not, ignore.
    408  a1ed		       b9 68 00 	      lda	lastnote,y
    409  a1f0		       c5 fc		      cmp	mididata0
    410  a1f2		       d0 05		      bne	noteoff_x
    411  a1f4
    412  a1f4				   noteoff_off
    413  a1f4		       a9 00		      lda	#$00	; Off
    414  a1f6		       4c 1a a3 	      jmp	setvoice
    415  a1f9
    416  a1f9				   noteoff_x
    417  a1f9		       60		      rts
    418  a1fa
    419  a1fa							; ---- Control Change --------------------------------------------------------
    420  a1fa							; Bc CC vv
    421  a1fa
    422  a1fa				   controlchange
    423  a1fa		       a4 49		      ldy	channel	; Y now contains channel #
    424  a1fc		       a5 fc		      lda	mididata0	; Controller number
    425  a1fe
    426  a1fe		       c9 00		      cmp	#00	; Bank select - decimal
    427  a200		       f0 15		      beq	bankselect
    428  a202
    429  a202		       c9 01		      cmp	#01	; Modulation Wheel (coarse) - decimal
    430  a204		       f0 57		      beq	modwheel
    431  a206
    432  a206		       c9 07		      cmp	#07	; Volume (coarse) - decimal
    433  a208		       f0 5a		      beq	volume
    434  a20a
    435  a20a		       c9 4a		      cmp	#74	; Brightness - decimal
    436  a20c		       f0 6d		      beq	screencolors
    437  a20e
    438  a20e		       c9 78		      cmp	#120	; All Sound Off - decimal
    439  a210		       f0 7d		      beq	soundoff
    440  a212
    441  a212		       c9 7b		      cmp	#123	; All Notes Off - decimal
    442  a214		       f0 79		      beq	soundoff
    443  a216
    444  a216							; Ignore all the rest
    445  a216		       60		      rts
    446  a217
    447  a217							; ---- Bank Select -----------------------------------------------------------
    448  a217							; Bc 00 vv
    449  a217
    450  a217				   bankselect
    451  a217		       a5 fd		      lda	mididata1
    452  a219		       29 03		      and	#$03	; A contains bank, 0-3
    453  a21b		       85 4a		      sta	bank
    454  a21d
    455  a21d				   showbank
      0  a21d					      HEXPOKE	(voice_display+132),bank
      1  a21d		       a9 fb		      lda	#<(voice_display+132)
      2  a21f		       85 22		      sta	$22
      3  a221		       a9 1e		      lda	#>(voice_display+132)
      4  a223		       85 23		      sta	$23
      5  a225
      6  a225		       a5 4a		      lda	bank
      7  a227		       20 dd a5 	      jsr	hexstr
    457  a22a
      0  a22a					      PLOT	9,13
      1  a22a		       a0 09		      ldy	#9
      2  a22c		       a2 0d		      ldx	#13
      3  a22e		       18		      clc
      4  a22f		       20 0a e5 	      jsr	$E50A
    459  a232
    460  a232		       a5 4a		      lda	bank
    461  a234
    462  a234		       c9 00		      cmp	#$00
    463  a236		       f0 0d		      beq	ntsc
    464  a238
    465  a238		       c9 01		      cmp	#$01
    466  a23a		       f0 11		      beq	pal
    467  a23c
    468  a23c		       c9 02		      cmp	#$02
    469  a23e		       f0 15		      beq	alt
    470  a240
    471  a240		       c9 03		      cmp	#$03
    472  a242		       f0 11		      beq	alt
    473  a244
    474  a244							; Ignore the rest
    475  a244		       60		      rts
    476  a245
    477  a245				   ntsc
      0  a245					      PRINTSTRING	ntscstring
      1  a245		       a0 a5		      ldy	#>ntscstring
      2  a247		       a9 49		      lda	#<ntscstring
      3  a249		       20 1e cb 	      jsr	STROUT
    479  a24c		       60		      rts
    480  a24d
    481  a24d				   pal
      0  a24d					      PRINTSTRING	palstring
      1  a24d		       a0 a5		      ldy	#>palstring
      2  a24f		       a9 44		      lda	#<palstring
      3  a251		       20 1e cb 	      jsr	STROUT
    483  a254		       60		      rts
    484  a255
    485  a255				   alt
      0  a255					      PRINTSTRING	altstring
      1  a255		       a0 a5		      ldy	#>altstring
      2  a257		       a9 4e		      lda	#<altstring
      3  a259		       20 1e cb 	      jsr	STROUT
    487  a25c		       60		      rts
    488  a25d
    489  a25d							; ---- MOD Wheel Controller --------------------------------------------------
    490  a25d							; Bc 01 vv
    491  a25d
    492  a25d							; Poke the data directly to the register, after OR'ing with $80
    493  a25d				   modwheel
    494  a25d		       a5 fd		      lda	mididata1
    495  a25f		       09 80		      ora	#$80
    496  a261		       4c 1a a3 	      jmp	setvoice
    497  a264
    498  a264							; ---- Volume Controller -----------------------------------------------------
    499  a264							; Bc 07 vv
    500  a264
    501  a264				   volume
    502  a264		       a5 fd		      lda	mididata1
    503  a266		       4a		      lsr
    504  a267		       4a		      lsr
    505  a268		       4a		      lsr
    506  a269
    507  a269				   setvolume
    508  a269		       8d 0e 90 	      sta	sound_volume
      0  a26c					      HEXPOKE	(voice_display+110),sound_volume
      1  a26c		       a9 e5		      lda	#<(voice_display+110)
      2  a26e		       85 22		      sta	$22
      3  a270		       a9 1e		      lda	#>(voice_display+110)
      4  a272		       85 23		      sta	$23
      5  a274
      6  a274		       ad 0e 90 	      lda	sound_volume
      7  a277		       20 dd a5 	      jsr	hexstr
    510  a27a		       60		      rts
    511  a27b
    512  a27b							; ---- Brightness Controller (used for screen color)--------------------------
    513  a27b							; Bc 4a vv
    514  a27b
    515  a27b				   screencolors
    516  a27b		       18		      clc
    517  a27c		       a5 fd		      lda	mididata1	; 7-bit
    518  a27e
    519  a27e		       29 07		      and	#%00000111	; Get border
    520  a280		       85 6c		      sta	temp1
    521  a282
    522  a282		       a5 fd		      lda	mididata1
    523  a284		       29 78		      and	#%01111000	; Get background
    524  a286		       0a		      asl		; Shift 1 bit left
    525  a287
    526  a287		       05 6c		      ora	temp1	; Put border back in
    527  a289		       09 08		      ora	#%00001000	; No Reverse Mode
    528  a28b
    529  a28b		       8d 0f 90 	      sta	screen_colors
    530  a28e		       60		      rts
    531  a28f
    532  a28f							; ---- Sound Off / All Notes Off Controller-----------------------------------
    533  a28f							; Bc 78 xx
    534  a28f							; Bc 7B xx
    535  a28f
    536  a28f				   soundoff
    537  a28f		       a9 00		      lda	#$00	; Off
    538  a291		       4c 1a a3 	      jmp	setvoice
    539  a294
    540  a294
    541  a294							; ---- Program Change --------------------------------------------------------
    542  a294							; Cc pn  <NOTE 2 bytes!>
    543  a294
    544  a294				   programchange
    545  a294							; Blank the unused MIDI byte
    546  a294		       a9 2d		      lda	#45	; -
    547  a296		       8d 53 1e 	      sta	midi_display+6
    548  a299		       8d 54 1e 	      sta	midi_display+7
    549  a29c
    550  a29c							; Get low nybble and replace, since there are only 16 viznut waveforms
    551  a29c		       a5 fc		      lda	mididata0
    552  a29e		       29 0f		      and	#$0f
    553  a2a0		       85 fc		      sta	mididata0	; Note that this is the waveform NUMBER, not the VALUE!
    554  a2a2
    555  a2a2		       a4 49		      ldy	channel	; Y now contains channel #
    556  a2a4		       99 10 10 	      sta	waveform1,y	; Store waveform used
    557  a2a7
    558  a2a7		       c0 00		      cpy	#00
    559  a2a9		       f0 0d		      beq	pc_0
    560  a2ab
    561  a2ab		       c0 01		      cpy	#01
    562  a2ad		       f0 18		      beq	pc_1
    563  a2af
    564  a2af		       c0 02		      cpy	#02
    565  a2b1		       f0 23		      beq	pc_2
    566  a2b3
    567  a2b3		       c0 03		      cpy	#03	; Not sure if viznut's waveforms applies to the noise voice,
    568  a2b5		       f0 2e		      beq	pc_3	; but keep it in away.
    569  a2b7
    570  a2b7							; Ignore all other channels
    571  a2b7		       60		      rts
    572  a2b8
    573  a2b8							; Update the screen with Program# (viznut waveform code)
    574  a2b8							; Note that these are not actually used until setvoice is called below [1]
    575  a2b8
    576  a2b8				   pc_0
      0  a2b8					      HEXPOKE	(voice_display+ 5),waveform1
      1  a2b8		       a9 7c		      lda	#<(voice_display+ 5)
      2  a2ba		       85 22		      sta	$22
      3  a2bc		       a9 1e		      lda	#>(voice_display+ 5)
      4  a2be		       85 23		      sta	$23
      5  a2c0
      6  a2c0		       ad 10 10 	      lda	waveform1
      7  a2c3		       20 dd a5 	      jsr	hexstr
    578  a2c6		       60		      rts
    579  a2c7
    580  a2c7				   pc_1
      0  a2c7					      HEXPOKE	(voice_display+27),waveform2
      1  a2c7		       a9 92		      lda	#<(voice_display+27)
      2  a2c9		       85 22		      sta	$22
      3  a2cb		       a9 1e		      lda	#>(voice_display+27)
      4  a2cd		       85 23		      sta	$23
      5  a2cf
      6  a2cf		       ad 11 10 	      lda	waveform2
      7  a2d2		       20 dd a5 	      jsr	hexstr
    582  a2d5		       60		      rts
    583  a2d6
    584  a2d6				   pc_2
      0  a2d6					      HEXPOKE	(voice_display+49),waveform3
      1  a2d6		       a9 a8		      lda	#<(voice_display+49)
      2  a2d8		       85 22		      sta	$22
      3  a2da		       a9 1e		      lda	#>(voice_display+49)
      4  a2dc		       85 23		      sta	$23
      5  a2de
      6  a2de		       ad 12 10 	      lda	waveform3
      7  a2e1		       20 dd a5 	      jsr	hexstr
    586  a2e4		       60		      rts
    587  a2e5
    588  a2e5				   pc_3
      0  a2e5					      HEXPOKE	(voice_display+71),waveform4
      1  a2e5		       a9 be		      lda	#<(voice_display+71)
      2  a2e7		       85 22		      sta	$22
      3  a2e9		       a9 1e		      lda	#>(voice_display+71)
      4  a2eb		       85 23		      sta	$23
      5  a2ed
      6  a2ed		       ad 13 10 	      lda	waveform4
      7  a2f0		       20 dd a5 	      jsr	hexstr
    590  a2f3		       60		      rts
    591  a2f4
    592  a2f4
    593  a2f4							;---------------------------------------------------------
    594  a2f4							; Set a voice using viznut's setwave function.
    595  a2f4							; If a sound is already playing, fine.  But if not, need a "short" delay.  TODO ***
    596  a2f4
    597  a2f4				   viznut
    598  a2f4		       a4 49		      ldy	channel	; Channel # (0-3)
    599  a2f6		       b9 53 a5 	      lda	voice_to_register,y
    600  a2f9		       8d 20 10 	      sta	setwavechannel
    601  a2fc
    602  a2fc		       a5 5e		      lda	currentvalue	; X now contains initial frequency of selected channel
    603  a2fe		       8d 21 10 	      sta	setwavefrequency
    604  a301
    605  a301		       a4 49		      ldy	channel
    606  a303		       b9 10 10 	      lda	waveform1,y	; Retrieve the last desired waveform# for this channel
    607  a306		       aa		      tax
    608  a307		       bd cb a8 	      lda	viznutwaveforms,x	; Retrieve the desired shift register contents for that waveform#
    609  a30a		       8d 22 10 	      sta	setwaveshiftreg
    610  a30d
    611  a30d							; Set X,Y,A as required and set the waveform.
    612  a30d		       ac 20 10 	      ldy	setwavechannel
    613  a310		       ae 21 10 	      ldx	setwavefrequency
    614  a313		       ad 22 10 	      lda	setwaveshiftreg
    615  a316		       20 00 11 	      jsr	setwave
    616  a319
    617  a319							; TODO, update the screen
    618  a319		       60		      rts
    619  a31a
    620  a31a
    621  a31a							;***************************************************************************
    622  a31a							;*******************  Set/Display Functions  *******************************
    623  a31a							;***************************************************************************
    624  a31a
    625  a31a							; Dispatcher for setting the appropriate voice and updating the screen
    626  a31a							; Channel# in Y (Channel 0 = Voice 1, etc)
    627  a31a							; Value to set it to in A.
    628  a31a
    629  a31a				   setvoice
    630  a31a		       85 5e		      sta	currentvalue
    631  a31c
    632  a31c							; Before setting the voice, check if a viznut waveform was selected previously [1]
    633  a31c							; If so, handle that separately.
    634  a31c							;lda waveform1,y
    635  a31c							;bne viznut
    636  a31c
    637  a31c							; Nope, carry on.
    638  a31c		       a5 5e		      lda	currentvalue
    639  a31e		       a4 49		      ldy	channel	; Y now contains channel #
    640  a320
    641  a320		       c0 00		      cpy	#$00
    642  a322		       f0 0d		      beq	v1
    643  a324
    644  a324		       c0 01		      cpy	#$01
    645  a326		       f0 1b		      beq	v2
    646  a328
    647  a328		       c0 02		      cpy	#$02
    648  a32a		       f0 29		      beq	v3
    649  a32c
    650  a32c		       c0 03		      cpy	#$03
    651  a32e		       f0 37		      beq	v4
    652  a330
    653  a330							; Ignore all other channels
    654  a330		       60		      rts
    655  a331
    656  a331							; ---- Voice 1 -------
    657  a331				   v1
    658  a331		       8d 0a 90 	      sta	sound_voice1
      0  a334					      HEXPOKE	(voice_display+00),sound_voice1
      1  a334		       a9 77		      lda	#<(voice_display+00)
      2  a336		       85 22		      sta	$22
      3  a338		       a9 1e		      lda	#>(voice_display+00)
      4  a33a		       85 23		      sta	$23
      5  a33c
      6  a33c		       ad 0a 90 	      lda	sound_voice1
      7  a33f		       20 dd a5 	      jsr	hexstr
    660  a342		       60		      rts
    661  a343
    662  a343							; ---- Voice 2 -------
    663  a343				   v2
    664  a343		       8d 0b 90 	      sta	sound_voice2
      0  a346					      HEXPOKE	(voice_display+22),sound_voice2
      1  a346		       a9 8d		      lda	#<(voice_display+22)
      2  a348		       85 22		      sta	$22
      3  a34a		       a9 1e		      lda	#>(voice_display+22)
      4  a34c		       85 23		      sta	$23
      5  a34e
      6  a34e		       ad 0b 90 	      lda	sound_voice2
      7  a351		       20 dd a5 	      jsr	hexstr
    666  a354		       60		      rts
    667  a355
    668  a355							; ---- Voice 3 -------
    669  a355				   v3
    670  a355		       8d 0c 90 	      sta	sound_voice3
      0  a358					      HEXPOKE	(voice_display+44),sound_voice3
      1  a358		       a9 a3		      lda	#<(voice_display+44)
      2  a35a		       85 22		      sta	$22
      3  a35c		       a9 1e		      lda	#>(voice_display+44)
      4  a35e		       85 23		      sta	$23
      5  a360
      6  a360		       ad 0c 90 	      lda	sound_voice3
      7  a363		       20 dd a5 	      jsr	hexstr
    672  a366		       60		      rts
    673  a367
    674  a367							; ---- Voice 4 -------
    675  a367				   v4
    676  a367		       8d 0d 90 	      sta	sound_noise
      0  a36a					      HEXPOKE	(voice_display+66),sound_noise
      1  a36a		       a9 b9		      lda	#<(voice_display+66)
      2  a36c		       85 22		      sta	$22
      3  a36e		       a9 1e		      lda	#>(voice_display+66)
      4  a370		       85 23		      sta	$23
      5  a372
      6  a372		       ad 0d 90 	      lda	sound_noise
      7  a375		       20 dd a5 	      jsr	hexstr
    678  a378		       60		      rts
    679  a379
    680  a379							; ----------------------------------------------------------------------------
    681  a379
    682  a379				   setcolors
    683  a379		       a2 00		      ldx	#$00
    684  a37b		       a9 00		      lda	#$00
    685  a37d				   setcolorsloop
    686  a37d		       9d 00 96 	      sta	$9600,x
    687  a380		       9d 00 97 	      sta	$9700,x
    688  a383		       e8		      inx
    689  a384		       e0 00		      cpx	#$00
    690  a386		       d0 f5		      bne	setcolorsloop
    691  a388		       60		      rts
    692  a389
    693  a389							; ----------------------------------------------------------------------------
    694  a389							; Draw Main Screen
    695  a389
    696  a389				   mainscreen
    697  a389		       20 5f e5 	      jsr	CLRSCREEN
    698  a38c		       a9 1a		      lda	#26	; Decimal, white and red
    699  a38e		       8d 0f 90 	      sta	screen_colors
    700  a391		       a9 06		      lda	#$06	; Blue
    701  a393		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a396					      PRINTSTRING	maintext
      1  a396		       a0 a3		      ldy	#>maintext
      2  a398		       a9 e7		      lda	#<maintext
      3  a39a		       20 1e cb 	      jsr	STROUT
    703  a39d		       a9 7f		      lda	#$7F	; was#$6C
    704  a39f		       8d f9 1f 	      sta	spin_display
    705  a3a2		       60		      rts
    706  a3a3
    707  a3a3
    708  a3a3							; ----------------------------------------------------------------------------
    709  a3a3							; Draw Credits Screen
    710  a3a3
    711  a3a3				   creditscreen
    712  a3a3		       20 5f e5 	      jsr	CLRSCREEN
    713  a3a6		       a9 1e		      lda	#30	; Decimal, white and blue
    714  a3a8		       8d 0f 90 	      sta	screen_colors
    715  a3ab		       a9 02		      lda	#$02	; Red
    716  a3ad		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a3b0					      PRINTSTRING	credits
      1  a3b0		       a0 a4		      ldy	#>credits
      2  a3b2		       a9 82		      lda	#<credits
      3  a3b4		       20 1e cb 	      jsr	STROUT
    718  a3b7		       60		      rts
    719  a3b8
    720  a3b8
    721  a3b8							; ----------------------------------------------------------------------------
    722  a3b8							; setwave needs to start on a page and is self-modifying,
    723  a3b8							; so it is copied to RAM here
    724  a3b8
    725  a3b8				   setwavecopy
    726  a3b8		       a2 00		      ldx	#$00
    727  a3ba				   copy1
    728  a3ba		       bd 9e a8 	      lda	setwaveorg,x
    729  a3bd		       9d 00 11 	      sta	setwave,x
    730  a3c0		       e8		      inx
    731  a3c1		       d0 f7		      bne	copy1
    732  a3c3		       60		      rts
    733  a3c4
    734  a3c4
    735  a3c4							; ----------------------------------------------------------------------------
    736  a3c4							; Set up the font
    737  a3c4							;
    738  a3c4
    739  a3c4				   setupfont
    740  a3c4		       a2 00		      ldx	#$00
    741  a3c6				   copy2
    742  a3c6		       bd db ae 	      lda	fontorg,x
    743  a3c9		       9d 00 18 	      sta	font,x
    744  a3cc		       bd db af 	      lda	fontorg+$100,x
    745  a3cf		       9d 00 19 	      sta	font+$100,x
    746  a3d2		       bd db b0 	      lda	fontorg+$200,x
    747  a3d5		       9d 00 1a 	      sta	font+$200,x
    748  a3d8		       bd db b1 	      lda	fontorg+$300,x
    749  a3db		       9d 00 1b 	      sta	font+$300,x
    750  a3de		       e8		      inx
    751  a3df		       d0 e5		      bne	copy2
    752  a3e1
    753  a3e1		       a9 fe		      lda	#254	; Decimal  Points char. to 6144
    754  a3e3		       8d 05 90 	      sta	$9005
    755  a3e6
    756  a3e6		       60		      rts
    757  a3e7
    758  a3e7							; ----------------------------------------------------------------------------
    759  a3e7							; Strings
    760  a3e7
    761  a3e7				   maintext
    762  a3e7		       0e 08		      byte.b	CG_LCS, CG_DCS
    763  a3e9		       2a 76 69 63*	      byte.b	"*vic20 midi iNTERFACE*", CRLF
    764  a400		       0d		      byte.b	CRLF
    765  a401		       6d 69 64 69*	      byte.b	"midi dATA: --:--:--", CRLF
    766  a415		       0d		      byte.b	CRLF
    767  a416		       76 4f 49 43*	      byte.b	"vOICE 1: -- / --", CRLF
    768  a427		       76 4f 49 43*	      byte.b	"vOICE 2: -- / --", CRLF
    769  a438		       76 4f 49 43*	      byte.b	"vOICE 3: -- / --", CRLF
    770  a449		       76 4f 49 43*	      byte.b	"vOICE 4: -- / --", CRLF
    771  a45a		       0d		      byte.b	CRLF
    772  a45b		       76 4f 4c 55*	      byte.b	"vOLUME : --", CRLF
    773  a467		       62 41 4e 4b*	      byte.b	"bANK	 : --", CRLF
    774  a473		       0d		      byte.b	CRLF
    775  a474		       73 59 53 54*	      byte.b	"sYSTEM : ???", CRLF
    776  a481		       00		      byte.b	0
    777  a482
    778  a482
    779  a482				   credits
    780  a482		       0e 08		      byte.b	CG_LCS, CG_DCS
    781  a484		       20 2a 76 69*	      byte.b	" *vic20 midi cREDITS*", CRLF
    782  a49a		       0d		      byte.b	CRLF
    783  a49b		       68 41 52 44*	      byte.b	"hARDWARE:", CRLF
    784  a4a5		       0d		      byte.b	CRLF
    785  a4a6		       20 20 6a 49*	      byte.b	"  jIM bRAIN", CRLF
    786  a4b2		       20 20 66 52*	      byte.b	"  fRANCOIS lEVEILLE", CRLF
    787  a4c6		       20 20 6c 64*	      byte.b	"  ld bALL", CRLF
    788  a4d0		       0d		      byte.b	CRLF
    789  a4d1		       73 4f 46 54*	      byte.b	"sOFTWARE:", CRLF
    790  a4db		       0d		      byte.b	CRLF
    791  a4dc		       20 6c 45 49*	      byte.b	" lEIF bLOOMQUIST", CRLF
    792  a4ed		       20 64 41 56*	      byte.b	" dAVID vIENS", CRLF
    793  a4fa		       20 6d 49 43*	      byte.b	" mICHAEL kIRCHER", CRLF
    794  a50b		       20 76 49 5a*	      byte.b	" vIZNUT", CRLF
    795  a513		       0d		      byte.b	CRLF
    796  a514		       74 48 41 4e*	      byte.b	"tHANKS TO EVERYONE", CRLF
    797  a527		       4f 4e 20 54*	      byte.b	"ON THE vic20 dENIAL", CRLF
    798  a53b		       46 4f 52 55*	      byte.b	"FORUMS!", CRLF
    799  a543		       00		      byte.b	0
    800  a544
    801  a544				   palstring
    802  a544		       70 61 6c 20*	      .byte.b	"pal ",0
    803  a549
    804  a549				   ntscstring
    805  a549		       6e 74 73 63*	      .byte.b	"ntsc",0
    806  a54e
    807  a54e				   altstring
    808  a54e		       61 6c 74 20*	      .byte.b	"alt ",0
    809  a553
    810  a553							; ----------------------------------------------------------------------------
    811  a553							; Lookup table between voice #(0-3) and low byte of register# ($0A-$0D)
    812  a553
    813  a553				   voice_to_register
    814  a553		       0a 0b 0c 0d	      byte.b	$0A,$0B,$0C,$0D
    815  a557
    816  a557
    817  a557							; ----------------------------------------------------------------------------
    818  a557							; Code includes
    819  a557
------- FILE hardware.asm LEVEL 2 PASS 2
      0  a557					      include	"hardware.asm"
      1  a557							;***************************************************************************
      2  a557							;*******************	 Hardware Functions   *******************************
      3  a557							;***************************************************************************
      4  a557
      5  a557							; ----------------------------------------------------------------------------
      6  a557							; Confirm the presence of the ST16C450 UART
      7  a557				   checkuart
      8  a557		       a9 55		      lda	#$55
      9  a559		       8d 07 9c 	      sta	UART_SCRATCHPAD
     10  a55c
     11  a55c		       ad 07 9c 	      lda	UART_SCRATCHPAD
     12  a55f		       c9 55		      cmp	#$55
     13  a561		       f0 1c		      beq	checkuart_ok
     14  a563
     15  a563							; Not found!
      0  a563					      PLOT	0,20
      1  a563		       a0 00		      ldy	#0
      2  a565		       a2 14		      ldx	#20
      3  a567		       18		      clc
      4  a568		       20 0a e5 	      jsr	$E50A
      0  a56b					      PRINTSTRING	nouart
      1  a56b		       a0 a5		      ldy	#>nouart
      2  a56d		       a9 c7		      lda	#<nouart
      3  a56f		       20 1e cb 	      jsr	STROUT
     18  a572
     19  a572				   uloop
     20  a572		       a9 18		      lda	#24
     21  a574		       8d 0f 90 	      sta	screen_colors
     22  a577		       a9 1a		      lda	#26
     23  a579		       8d 0f 90 	      sta	screen_colors
     24  a57c		       4c 72 a5 	      jmp	uloop
     25  a57f
     26  a57f				   checkuart_ok
     27  a57f		       60		      rts
     28  a580
     29  a580							; ----------------------------------------------------------------------------
     30  a580							; Set up the UART
     31  a580
     32  a580				   resetuart
     33  a580							; Expose the divisor latch.
     34  a580		       a9 80		      lda	#%10000000
     35  a582		       8d 03 9c 	      sta	UART_LCR
     36  a585
     37  a585							; Set the MIDI baud rate.
     38  a585							; The ST16C450 datasheet says that it divides the input clock rate by
     39  a585							; 16, so with a 2MHz crystal on board, that gives
     40  a585							; 2000000 * (1/16) * (1/x) = 31250.  Solving gives x=4 for the low
     41  a585							; byte of the divisor, and 0 for the high byte.
     42  a585
     43  a585		       a2 00		      ldx	#$00
     44  a587							;ldy #$04  ; For 2MHz	crystal   (Original protype from Francois)
     45  a587							;ldy #$08  ; For 4MHz	crystal   (Prototype from Brain)
     46  a587		       a0 25		      ldy	#$25	; For 18MHz crystal   (Pre-production cartridge from Brain)
     47  a589
     48  a589		       8e 01 9c 	      stx	UART_DIVISOR_MSB
     49  a58c		       8c 00 9c 	      sty	UART_DIVISOR_LSB
     50  a58f
     51  a58f							; Set to MIDI: Word length 8, Stop bits 1, no parity (also hides divisor latch)
     52  a58f		       a9 03		      lda	#%00000011
     53  a591		       8d 03 9c 	      sta	UART_LCR
     54  a594
     55  a594							; New for VICMIDI Pre-production cart - select MIDI
     56  a594		       a9 04		      lda	#$04
     57  a596		       8d 04 9c 	      sta	UART_MCR
     58  a599
     59  a599							; Enable the interrupt when data is received
     60  a599		       a9 01		      lda	#%00000001
     61  a59b		       8d 01 9c 	      sta	UART_IER
     62  a59e		       60		      rts
     63  a59f
     64  a59f							; ----------------------------------------------------------------------------
     65  a59f							; Set up the IRQ for reading bytes from the UART
     66  a59f
     67  a59f				   setupirq
     68  a59f		       78		      sei
     69  a5a0
     70  a5a0							; Point to my interrupt vector
     71  a5a0		       a9 b4		      lda	#<theirq
     72  a5a2		       8d 14 03 	      sta	$0314
     73  a5a5		       a9 a5		      lda	#>theirq
     74  a5a7		       8d 15 03 	      sta	$0315
     75  a5aa
     76  a5aa							; Disable timer interrupts
     77  a5aa
     78  a5aa		       a9 60		      lda	#%01100000
     79  a5ac		       8d 2e 91 	      sta	$912e	; disable and acknowledge interrupts
     80  a5af		       8d 2d 91 	      sta	$912d
     81  a5b2							;sta $911e	; disable NMIs (Restore key)
     82  a5b2
     83  a5b2		       58		      cli
     84  a5b3		       60		      rts
     85  a5b4
     86  a5b4							; ----------------------------------------------------------------------------
     87  a5b4							; The IRQ.
     88  a5b4
     89  a5b4				   theirq
     90  a5b4							; Fetch the received byte
     91  a5b4		       ad 00 9c 	      lda	UART_RXTX	;get data
     92  a5b7		       a4 5c		      ldy	write_pointer
     93  a5b9		       99 00 12 	      sta	buffer,y
     94  a5bc		       e6 5c		      inc	write_pointer
     95  a5be
     96  a5be							; Clear the interrupt from the UART by reading the status register
     97  a5be		       ad 02 9c 	      lda	UART_ISR
     98  a5c1
     99  a5c1		       4c 56 ff 	      jmp	$ff56	; Use this in place of rti because it restores the A,X,Y registers from the stack
    100  a5c4							;jmp $eabf	; return to normal IRQ	(scans keyboard and stuff)
    101  a5c4
    102  a5c4
    103  a5c4							; ----------------------------------------------------------------------------
    104  a5c4							; Handle the RESTORE key
    105  a5c4
    106  a5c4				   RESTORE
    107  a5c4		       4c c7 fe 	      jmp	$fec7	; Continue as if no cartridge installed
    108  a5c7
    109  a5c7
    110  a5c7							; ----------------------------------------------------------------------------
    111  a5c7							; Strings
    112  a5c7
    113  a5c7				   nouart
    114  a5c7		       7f 7f 20 75*	      byte.b	127,127, " uart NOT FOUND! ", 127,127
    115  a5dc		       00		      byte.b	0
    116  a5dd
    117  a5dd							; EOF!
------- FILE vicmidi.asm
------- FILE utils.asm LEVEL 2 PASS 2
      0  a5dd					      include	"utils.asm"
      1  a5dd							; VIC Version by Schema/AIC (Leif Bloomquist)
      2  a5dd							; Original by Six/Style (Oliver VieBrooks)
      3  a5dd
      4  a5dd							; Fast POKE of hex value to screen
      5  a5dd							; also see HEXPOKE macro
      6  a5dd							; print hex  char $ of number in a at location referenced by screen_temp
      7  a5dd
      8  a5dd				   hexstr
      9  a5dd		       a0 00		      ldy	#$00
     10  a5df		       48		      pha
     11  a5e0		       29 f0		      and	#$f0
     12  a5e2		       18		      clc
     13  a5e3		       4a		      lsr
     14  a5e4		       4a		      lsr
     15  a5e5		       4a		      lsr
     16  a5e6		       4a		      lsr
     17  a5e7		       aa		      tax
     18  a5e8		       bd 19 a6 	      lda	hexstring,x
     19  a5eb		       91 22		      sta	($22),y
     20  a5ed
     21  a5ed		       c8		      iny
     22  a5ee		       68		      pla
     23  a5ef		       29 0f		      and	#$0f
     24  a5f1		       aa		      tax
     25  a5f2		       bd 19 a6 	      lda	hexstring,x
     26  a5f5		       91 22		      sta	($22),y
     27  a5f7		       60		      rts
     28  a5f8
     29  a5f8
     30  a5f8							; print hex  char $ of number in a    SLOW!
     31  a5f8		       00	   hexx       dc.b	$00
     32  a5f9
     33  a5f9				   printhexstr
     34  a5f9		       8e f8 a5 	      stx	hexx
     35  a5fc		       48		      pha
     36  a5fd		       29 f0		      and	#$f0
     37  a5ff		       18		      clc
     38  a600		       4a		      lsr
     39  a601		       4a		      lsr
     40  a602		       4a		      lsr
     41  a603		       4a		      lsr
     42  a604		       aa		      tax
     43  a605		       bd 19 a6 	      lda	hexstring,x
     44  a608		       20 d2 ff 	      jsr	$ffd2
     45  a60b
     46  a60b		       68		      pla
     47  a60c		       29 0f		      and	#$0f
     48  a60e		       aa		      tax
     49  a60f		       bd 19 a6 	      lda	hexstring,x
     50  a612		       20 d2 ff 	      jsr	$ffd2
     51  a615		       ae f8 a5 	      ldx	hexx
     52  a618		       60		      rts
     53  a619
     54  a619				   hexstring
     55  a619		       30 31 32 33*	      .byte.b	"0123456789ABCDEF"
     56  a629
     57  a629
     58  a629							; ==============================================================
     59  a629							; Most defaults are NTSC.  This code overrides for PAL.
     60  a629							; ==============================================================
     61  a629
     62  a629				   setup_pal
     63  a629		       ad e4 ed 	      lda	$EDE4
     64  a62c		       c9 0c		      cmp	#$0C
     65  a62e		       f0 07		      beq	DOPAL
     66  a630
     67  a630							; NTSC System detected
     68  a630		       a9 00		      lda	#$00
     69  a632		       85 4a		      sta	bank
     70  a634		       4c 1d a2 	      jmp	showbank	; There's an rts there
     71  a637
     72  a637							; PAL System detected
     73  a637				   DOPAL
     74  a637		       a9 01		      lda	#$01
     75  a639		       85 4a		      sta	bank
     76  a63b		       4c 1d a2 	      jmp	showbank	; There's an rts there
     77  a63e
     78  a63e							; EOF!
------- FILE vicmidi.asm
------- FILE polymode.asm LEVEL 2 PASS 2
      0  a63e					      include	"polymode.asm"
      1  a63e
      2  a63e							;***************************************************************************
      3  a63e							;***************  Determine next Channel in Poly Mode (set Y) **************
      4  a63e							;***************************************************************************
      5  a63e				   get_poly_voice
      6  a63e		       a0 00		      ldy	#$00
      7  a640
      8  a640				   get_poly_voice_loop
      9  a640		       b9 61 00 	      lda	poly_flags,y	; 0=not in use, 1=in use
     10  a643		       f0 08		      beq	get_poly_voice_x
     11  a645		       c8		      iny
     12  a646		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     13  a648		       d0 f6		      bne	get_poly_voice_loop
     14  a64a
     15  a64a							; No free voices, ignore
     16  a64a		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note On code
     17  a64c		       60		      rts
     18  a64d
     19  a64d				   get_poly_voice_x
     20  a64d		       a9 01		      lda	#$01
     21  a64f		       99 61 00 	      sta	poly_flags,y
     22  a652		       60		      rts
     23  a653
     24  a653
     25  a653							;***************************************************************************
     26  a653							;********  Determine Channel to turn off in Poly Mode (set Y) **************
     27  a653							;***************************************************************************
     28  a653				   get_poly_voice_off
     29  a653
     30  a653		       a0 00		      ldy	#$00
     31  a655
     32  a655				   get_poly_voice_off_loop
     33  a655		       b9 61 00 	      lda	poly_flags,y	; Is the channel in use?
     34  a658		       f0 07		      beq	poly_next	; No, so skip it
     35  a65a
     36  a65a		       b9 68 00 	      lda	lastnote,y	; Get last note on this voice
     37  a65d		       c5 fc		      cmp	mididata0	; Compare to note received
     38  a65f		       f0 0b		      beq	get_poly_voice_off_x	; Matched!
     39  a661
     40  a661				   poly_next
     41  a661		       c8		      iny		; Next channel
     42  a662		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     43  a664		       d0 ef		      bne	get_poly_voice_off_loop
     44  a666
     45  a666							; No match to the note to turn off, ignore
     46  a666		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note Off code
     47  a668		       ee 0f 90 	      inc	screen_colors	; DEBUG
     48  a66b		       60		      rts
     49  a66c
     50  a66c				   get_poly_voice_off_x
     51  a66c		       a9 00		      lda	#$00
     52  a66e		       99 61 00 	      sta	poly_flags,y
     53  a671		       60		      rts
     54  a672
------- FILE vicmidi.asm
------- FILE keyboard.asm LEVEL 2 PASS 2
      0  a672					      include	"keyboard.asm"
      1  a672							;*******************************************************************************************
      2  a672							;********************************  keyboard stuff  *****************************************
      3  a672							;*******************************************************************************************
      4  a672
      5  a672							; --------------------------------------------------------------------------------------------------
      6  a672							;;;;;;;;;;;;;;; keyboard stuff
      7  a672							;previous keyboard column bits
      8  a672		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
      9  a672		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     10  a672		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     11  a672		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     12  a672
     13  a672		       91 20	   kb_column  =	$9120
     14  a672		       91 21	   kb_row     =	$9121
     15  a672
     16  a672							; 9121   9120: (Write column value to this address)
     17  a672							;
     18  a672							;	  7f	  bf	  df	  ef	  f7	  fb	  fd	  fe
     19  a672							;
     20  a672							;  fe	  2	  q	  CBM	  Space   RunStop Control Lft_arr 1
     21  a672							;  fd	  4	  e	  s	  z	  Shift_L a	  w	  3
     22  a672							;  fb	  6	  t	  f	  c	  x	  d	  r	  5
     23  a672							;  f7	  8	  u	  h	  b	  v	  g	  y	  7
     24  a672							;  ef	  0	  o	  k	  m	  n	  j	  i	  9
     25  a672							;  df	  -	  @	  :	  .	  ,	  l	  p	  +
     26  a672							;  bf	  Home	  Up_arr  =	  Shift_R /	  ;	  *	  GBP
     27  a672							;  7f	  F7	  F5	  F3	  F1	  Down	  Right   Return  Del
     28  a672
     29  a672				   GetKey
     30  a672		       78		      sei
     31  a673							; this should not be done, we want to compare the OLD recorded status with new one
     32  a673							;lda #$0
     33  a673							;sta kb_column
     34  a673							;lda kb_row
     35  a673							;cmp #$FF
     36  a673							;beq NoKey	 ; no key at all pressed
     37  a673
     38  a673				   Check7F
     39  a673							;now check for each column
     40  a673		       a9 7f		      lda	#$7F
     41  a675		       8d 20 91 	      sta	kb_column
     42  a678		       ad 21 91 	      lda	kb_row
     43  a67b		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     44  a67d		       c5 4e		      cmp	c0
     45  a67f		       f0 08		      beq	CheckBF	; these arent the droids you are looking for move along
     46  a681		       85 4e		      sta	c0
     47  a683		       8d 00 1e 	      sta	$1E00
     48  a686		       4c c8 a6 	      jmp	KeyDone
     49  a689				   CheckBF
     50  a689							;now check for each column
     51  a689		       a9 bf		      lda	#$BF
     52  a68b		       8d 20 91 	      sta	kb_column
     53  a68e		       ad 21 91 	      lda	kb_row
     54  a691		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     55  a693		       c5 4f		      cmp	c1
     56  a695		       f0 08		      beq	CheckFD	; these arent the droids you are looking for move along
     57  a697		       85 4f		      sta	c1
     58  a699		       8d 01 1e 	      sta	$1E01
     59  a69c		       4c c8 a6 	      jmp	KeyDone
     60  a69f				   CheckFD
     61  a69f							;now check for each column
     62  a69f		       a9 fd		      lda	#$FD
     63  a6a1		       8d 20 91 	      sta	kb_column
     64  a6a4		       ad 21 91 	      lda	kb_row
     65  a6a7		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     66  a6a9		       c5 50		      cmp	c2
     67  a6ab		       f0 08		      beq	CheckFE	; these arent the droids you are looking for move along
     68  a6ad		       85 50		      sta	c2
     69  a6af		       8d 02 1e 	      sta	$1E02
     70  a6b2		       4c c8 a6 	      jmp	KeyDone
     71  a6b5				   CheckFE
     72  a6b5							;now check for each column
     73  a6b5		       a9 fe		      lda	#$FE
     74  a6b7		       8d 20 91 	      sta	kb_column
     75  a6ba		       ad 21 91 	      lda	kb_row
     76  a6bd		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     77  a6bf		       c5 51		      cmp	c3
     78  a6c1		       f0 05		      beq	KeyDone	; these arent the droids you are looking for move along
     79  a6c3		       85 51		      sta	c3
     80  a6c5		       8d 03 1e 	      sta	$1E03
     81  a6c8				   KeyDone
     82  a6c8		       58		      cli
     83  a6c9		       60		      rts
     84  a6ca
     85  a6ca							; ---------------------------------------------------------------------------
     86  a6ca
     87  a6ca				   setchars
     88  a6ca		       a2 00		      ldx	#$00
     89  a6cc		       a9 51		      lda	#$51
     90  a6ce				   setcharsloop1
     91  a6ce		       9d 00 1e 	      sta	$1E00,x
     92  a6d1		       e8		      inx
     93  a6d2		       e0 00		      cpx	#$00
     94  a6d4		       d0 f8		      bne	setcharsloop1
     95  a6d6		       a2 00		      ldx	#$00
     96  a6d8		       a9 66		      lda	#$66
     97  a6da				   setcharsloop2
     98  a6da		       9d 00 1f 	      sta	$1F00,x
     99  a6dd		       e8		      inx
    100  a6de		       e0 00		      cpx	#$00
    101  a6e0		       d0 f8		      bne	setcharsloop2
    102  a6e2		       60		      rts
    103  a6e3
    104  a6e3
    105  a6e3
    106  a6e3							; ---------------------------------------------------------------------------
    107  a6e3							; Quick hack using KERNAL routines to read the keyboard
    108  a6e3
    109  a6e3				   ReadKey
    110  a6e3		       20 1e eb 	      jsr	ISCNKY	; Call this manually since the main timer IRQ is disabled.
    111  a6e6
    112  a6e6		       a5 c5		      lda	$C5	; Current key?
    113  a6e8		       c9 40		      cmp	#$40	; None
    114  a6ea		       d0 0e		      bne	keypressed
    115  a6ec
    116  a6ec							; No key was pressed.	But was one pressed previously?
    117  a6ec		       ad 23 10 	      lda	midinoteout
    118  a6ef		       f0 08		      beq	key_x	; No
    119  a6f1
    120  a6f1							; Yes, so turn that note off.
    121  a6f1		       20 4d a7 	      jsr	sendnoteoff
    122  a6f4		       a9 00		      lda	#$00
    123  a6f6		       8d 23 10 	      sta	midinoteout
    124  a6f9
    125  a6f9				   key_x
    126  a6f9		       60		      rts
    127  a6fa
    128  a6fa
    129  a6fa				   keypressed		; A contains key code
    130  a6fa		       aa		      tax
    131  a6fb		       bd 9e a7 	      lda	notelookup,x
    132  a6fe		       f0 f9		      beq	key_x	; Note was 0, in this context meaning no note
    133  a700
    134  a700		       8d 23 10 	      sta	midinoteout
    135  a703		       20 07 a7 	      jsr	sendnoteon
    136  a706
    137  a706		       60		      rts
    138  a707
    139  a707
    140  a707
    141  a707							; ---------------------------------------------------------------------------
    142  a707							; Send a NOTE ON MIDI Message.
    143  a707
    144  a707				   sendnoteon
    145  a707		       20 93 a7 	      jsr	wait_tx
    146  a70a		       ad 9b a7 	      lda	noteonval	; Note on
    147  a70d		       8d 00 9c 	      sta	UART_RXTX
    148  a710
    149  a710		       20 93 a7 	      jsr	wait_tx
    150  a713		       ad 23 10 	      lda	midinoteout
    151  a716		       8d 00 9c 	      sta	UART_RXTX
    152  a719
    153  a719		       20 93 a7 	      jsr	wait_tx
    154  a71c		       ad 9d a7 	      lda	defaultvelocity
    155  a71f		       8d 00 9c 	      sta	UART_RXTX
    156  a722
    157  a722							; Display
      0  a722					      HEXPOKE	(midi_display+0),noteonval
      1  a722		       a9 4d		      lda	#<(midi_display+0)
      2  a724		       85 22		      sta	$22
      3  a726		       a9 1e		      lda	#>(midi_display+0)
      4  a728		       85 23		      sta	$23
      5  a72a
      6  a72a		       ad 9b a7 	      lda	noteonval
      7  a72d		       20 dd a5 	      jsr	hexstr
      0  a730					      HEXPOKE	(midi_display+3),midinoteout
      1  a730		       a9 50		      lda	#<(midi_display+3)
      2  a732		       85 22		      sta	$22
      3  a734		       a9 1e		      lda	#>(midi_display+3)
      4  a736		       85 23		      sta	$23
      5  a738
      6  a738		       ad 23 10 	      lda	midinoteout
      7  a73b		       20 dd a5 	      jsr	hexstr
      0  a73e					      HEXPOKE	(midi_display+6),defaultvelocity
      1  a73e		       a9 53		      lda	#<(midi_display+6)
      2  a740		       85 22		      sta	$22
      3  a742		       a9 1e		      lda	#>(midi_display+6)
      4  a744		       85 23		      sta	$23
      5  a746
      6  a746		       ad 9d a7 	      lda	defaultvelocity
      7  a749		       20 dd a5 	      jsr	hexstr
    161  a74c
    162  a74c		       60		      rts
    163  a74d
    164  a74d
    165  a74d							; ---------------------------------------------------------------------------
    166  a74d							; Send a NOTE OFF MIDI Message.
    167  a74d
    168  a74d				   sendnoteoff
    169  a74d		       20 93 a7 	      jsr	wait_tx
    170  a750		       ad 9c a7 	      lda	noteoffval	; Note off
    171  a753		       8d 00 9c 	      sta	UART_RXTX
    172  a756
    173  a756		       20 93 a7 	      jsr	wait_tx
    174  a759		       ad 23 10 	      lda	midinoteout
    175  a75c		       8d 00 9c 	      sta	UART_RXTX
    176  a75f
    177  a75f		       20 93 a7 	      jsr	wait_tx
    178  a762		       ad 9d a7 	      lda	defaultvelocity	; Decimal - convention for velocity when velocity not supported.
    179  a765		       8d 00 9c 	      sta	UART_RXTX
    180  a768
    181  a768							; Display
      0  a768					      HEXPOKE	(midi_display+0),noteoffval
      1  a768		       a9 4d		      lda	#<(midi_display+0)
      2  a76a		       85 22		      sta	$22
      3  a76c		       a9 1e		      lda	#>(midi_display+0)
      4  a76e		       85 23		      sta	$23
      5  a770
      6  a770		       ad 9c a7 	      lda	noteoffval
      7  a773		       20 dd a5 	      jsr	hexstr
      0  a776					      HEXPOKE	(midi_display+3),midinoteout
      1  a776		       a9 50		      lda	#<(midi_display+3)
      2  a778		       85 22		      sta	$22
      3  a77a		       a9 1e		      lda	#>(midi_display+3)
      4  a77c		       85 23		      sta	$23
      5  a77e
      6  a77e		       ad 23 10 	      lda	midinoteout
      7  a781		       20 dd a5 	      jsr	hexstr
      0  a784					      HEXPOKE	(midi_display+6),defaultvelocity
      1  a784		       a9 53		      lda	#<(midi_display+6)
      2  a786		       85 22		      sta	$22
      3  a788		       a9 1e		      lda	#>(midi_display+6)
      4  a78a		       85 23		      sta	$23
      5  a78c
      6  a78c		       ad 9d a7 	      lda	defaultvelocity
      7  a78f		       20 dd a5 	      jsr	hexstr
    185  a792
    186  a792		       60		      rts
    187  a793
    188  a793
    189  a793							; ---------------------------------------------------------------------------
    190  a793							; Quick hack to wait for THR to be empty.  Ideally sending would be
    191  a793							; interrupt-driven with a ring buffer.
    192  a793
    193  a793				   wait_tx
    194  a793		       ad 05 9c 	      lda	UART_LSR
    195  a796		       29 20		      and	#32
    196  a798		       f0 f9		      beq	wait_tx
    197  a79a		       60		      rts
    198  a79b
    199  a79b				   noteonval
    200  a79b		       90		      byte.b	$90
    201  a79c
    202  a79c				   noteoffval
    203  a79c		       80		      byte.b	$80
    204  a79d
    205  a79d				   defaultvelocity
    206  a79d		       40		      byte.b	64	; Decimal - convention for velocity when velocity not supported.
    207  a79e
    208  a79e				   notelookup
    209  a79e
    210  a79e							;	MIDI Note#		Comments
    211  a79e		       00		      byte.b	0	;
    212  a79f		       3f		      byte.b	63	;
    213  a7a0		       42		      byte.b	66	;
    214  a7a1		       46		      byte.b	70	;
    215  a7a2		       49		      byte.b	73	;
    216  a7a3		       00		      byte.b	0	;
    217  a7a4		       50		      byte.b	80	;
    218  a7a5		       53		      byte.b	83	;
    219  a7a6		       00		      byte.b	0	;
    220  a7a7		       3e		      byte.b	62	;
    221  a7a8		       41		      byte.b	65	;
    222  a7a9		       45		      byte.b	69	;
    223  a7aa		       48		      byte.b	72	;
    224  a7ab		       4c		      byte.b	76	;
    225  a7ac		       4f		      byte.b	79	;
    226  a7ad		       00		      byte.b	0	;
    227  a7ae		       00		      byte.b	0	;
    228  a7af		       00		      byte.b	0	;
    229  a7b0		       00		      byte.b	0	;
    230  a7b1		       00		      byte.b	0	;
    231  a7b2		       00		      byte.b	0	;
    232  a7b3		       00		      byte.b	0	;
    233  a7b4		       00		      byte.b	0	;
    234  a7b5		       00		      byte.b	0	;
    235  a7b6		       00		      byte.b	0	;
    236  a7b7		       00		      byte.b	0	;
    237  a7b8		       00		      byte.b	0	;
    238  a7b9		       00		      byte.b	0	;
    239  a7ba		       00		      byte.b	0	;
    240  a7bb		       00		      byte.b	0	;
    241  a7bc		       00		      byte.b	0	;
    242  a7bd		       00		      byte.b	0	;
    243  a7be		       00		      byte.b	0	;
    244  a7bf		       00		      byte.b	0	;
    245  a7c0		       00		      byte.b	0	;
    246  a7c1		       00		      byte.b	0	;
    247  a7c2		       00		      byte.b	0	;
    248  a7c3		       00		      byte.b	0	;
    249  a7c4		       00		      byte.b	0	;
    250  a7c5		       00		      byte.b	0	;
    251  a7c6		       00		      byte.b	0	;
    252  a7c7		       00		      byte.b	0	;
    253  a7c8		       00		      byte.b	0	;
    254  a7c9		       00		      byte.b	0	;
    255  a7ca		       00		      byte.b	0	;
    256  a7cb		       00		      byte.b	0	;
    257  a7cc		       00		      byte.b	0	;
    258  a7cd		       00		      byte.b	0	;
    259  a7ce		       3c		      byte.b	60	;	Middle C (C5)
    260  a7cf		       40		      byte.b	64	;
    261  a7d0		       43		      byte.b	67	;
    262  a7d1		       47		      byte.b	71	;
    263  a7d2		       4a		      byte.b	74	;
    264  a7d3		       4d		      byte.b	77	;
    265  a7d4		       51		      byte.b	81	;
    266  a7d5		       00		      byte.b	0	;
    267  a7d6		       3d		      byte.b	61	;
    268  a7d7		       00		      byte.b	0	;
    269  a7d8		       44		      byte.b	68	;
    270  a7d9		       00		      byte.b	0	;
    271  a7da		       4b		      byte.b	75	;
    272  a7db		       4e		      byte.b	78	;
    273  a7dc		       52		      byte.b	82	;
    274  a7dd		       00		      byte.b	0	;
    275  a7de		       00		      byte.b	0	;	No key Pressed
    276  a7df		       00		      byte.b	0	;
    277  a7e0		       00		      byte.b	0	;
    278  a7e1		       00		      byte.b	0	;
    279  a7e2		       00		      byte.b	0	;
    280  a7e3		       00		      byte.b	0	;
    281  a7e4		       00		      byte.b	0	;
    282  a7e5		       00		      byte.b	0	;
    283  a7e6		       00		      byte.b	0	;
    284  a7e7		       00		      byte.b	0	;
    285  a7e8		       00		      byte.b	0	;
    286  a7e9		       00		      byte.b	0	;
    287  a7ea		       00		      byte.b	0	;
    288  a7eb		       00		      byte.b	0	;
    289  a7ec		       00		      byte.b	0	;
    290  a7ed		       00		      byte.b	0	;
    291  a7ee		       00		      byte.b	0	;
    292  a7ef		       00		      byte.b	0	;
    293  a7f0		       00		      byte.b	0	;
    294  a7f1		       00		      byte.b	0	;
    295  a7f2		       00		      byte.b	0	;
    296  a7f3		       00		      byte.b	0	;
    297  a7f4		       00		      byte.b	0	;
    298  a7f5		       00		      byte.b	0	;
    299  a7f6		       00		      byte.b	0	;
    300  a7f7		       00		      byte.b	0	;
    301  a7f8		       00		      byte.b	0	;
    302  a7f9		       00		      byte.b	0	;
    303  a7fa		       00		      byte.b	0	;
    304  a7fb		       00		      byte.b	0	;
    305  a7fc		       00		      byte.b	0	;
    306  a7fd		       00		      byte.b	0	;
    307  a7fe		       00		      byte.b	0	;
    308  a7ff		       00		      byte.b	0	;
    309  a800		       00		      byte.b	0	;
    310  a801		       00		      byte.b	0	;
    311  a802		       00		      byte.b	0	;
    312  a803		       00		      byte.b	0	;
    313  a804		       00		      byte.b	0	;
    314  a805		       00		      byte.b	0	;
    315  a806		       00		      byte.b	0	;
    316  a807		       00		      byte.b	0	;
    317  a808		       00		      byte.b	0	;
    318  a809		       00		      byte.b	0	;
    319  a80a		       00		      byte.b	0	;
    320  a80b		       00		      byte.b	0	;
    321  a80c		       00		      byte.b	0	;
    322  a80d		       00		      byte.b	0	;
    323  a80e		       00		      byte.b	0	;
    324  a80f		       00		      byte.b	0	;
    325  a810		       00		      byte.b	0	;
    326  a811		       00		      byte.b	0	;
    327  a812		       00		      byte.b	0	;
    328  a813		       00		      byte.b	0	;
    329  a814		       00		      byte.b	0	;
    330  a815		       00		      byte.b	0	;
    331  a816		       00		      byte.b	0	;
    332  a817		       00		      byte.b	0	;
    333  a818		       00		      byte.b	0	;
    334  a819		       00		      byte.b	0	;
    335  a81a		       00		      byte.b	0	;
    336  a81b		       00		      byte.b	0	;
    337  a81c		       00		      byte.b	0	;
    338  a81d		       00		      byte.b	0	;
    339  a81e		       00		      byte.b	0	;
    340  a81f		       00		      byte.b	0	;
    341  a820		       00		      byte.b	0	;
    342  a821		       00		      byte.b	0	;
    343  a822		       00		      byte.b	0	;
    344  a823		       00		      byte.b	0	;
    345  a824		       00		      byte.b	0	;
    346  a825		       00		      byte.b	0	;
    347  a826		       00		      byte.b	0	;
    348  a827		       00		      byte.b	0	;
    349  a828		       00		      byte.b	0	;
    350  a829		       00		      byte.b	0	;
    351  a82a		       00		      byte.b	0	;
    352  a82b		       00		      byte.b	0	;
    353  a82c		       00		      byte.b	0	;
    354  a82d		       00		      byte.b	0	;
    355  a82e		       00		      byte.b	0	;
    356  a82f		       00		      byte.b	0	;
    357  a830		       00		      byte.b	0	;
    358  a831		       00		      byte.b	0	;
    359  a832		       00		      byte.b	0	;
    360  a833		       00		      byte.b	0	;
    361  a834		       00		      byte.b	0	;
    362  a835		       00		      byte.b	0	;
    363  a836		       00		      byte.b	0	;
    364  a837		       00		      byte.b	0	;
    365  a838		       00		      byte.b	0	;
    366  a839		       00		      byte.b	0	;
    367  a83a		       00		      byte.b	0	;
    368  a83b		       00		      byte.b	0	;
    369  a83c		       00		      byte.b	0	;
    370  a83d		       00		      byte.b	0	;
    371  a83e		       00		      byte.b	0	;
    372  a83f		       00		      byte.b	0	;
    373  a840		       00		      byte.b	0	;
    374  a841		       00		      byte.b	0	;
    375  a842		       00		      byte.b	0	;
    376  a843		       00		      byte.b	0	;
    377  a844		       00		      byte.b	0	;
    378  a845		       00		      byte.b	0	;
    379  a846		       00		      byte.b	0	;
    380  a847		       00		      byte.b	0	;
    381  a848		       00		      byte.b	0	;
    382  a849		       00		      byte.b	0	;
    383  a84a		       00		      byte.b	0	;
    384  a84b		       00		      byte.b	0	;
    385  a84c		       00		      byte.b	0	;
    386  a84d		       00		      byte.b	0	;
    387  a84e		       00		      byte.b	0	;
    388  a84f		       00		      byte.b	0	;
    389  a850		       00		      byte.b	0	;
    390  a851		       00		      byte.b	0	;
    391  a852		       00		      byte.b	0	;
    392  a853		       00		      byte.b	0	;
    393  a854		       00		      byte.b	0	;
    394  a855		       00		      byte.b	0	;
    395  a856		       00		      byte.b	0	;
    396  a857		       00		      byte.b	0	;
    397  a858		       00		      byte.b	0	;
    398  a859		       00		      byte.b	0	;
    399  a85a		       00		      byte.b	0	;
    400  a85b		       00		      byte.b	0	;
    401  a85c		       00		      byte.b	0	;
    402  a85d		       00		      byte.b	0	;
    403  a85e		       00		      byte.b	0	;
    404  a85f		       00		      byte.b	0	;
    405  a860		       00		      byte.b	0	;
    406  a861		       00		      byte.b	0	;
    407  a862		       00		      byte.b	0	;
    408  a863		       00		      byte.b	0	;
    409  a864		       00		      byte.b	0	;
    410  a865		       00		      byte.b	0	;
    411  a866		       00		      byte.b	0	;
    412  a867		       00		      byte.b	0	;
    413  a868		       00		      byte.b	0	;
    414  a869		       00		      byte.b	0	;
    415  a86a		       00		      byte.b	0	;
    416  a86b		       00		      byte.b	0	;
    417  a86c		       00		      byte.b	0	;
    418  a86d		       00		      byte.b	0	;
    419  a86e		       00		      byte.b	0	;
    420  a86f		       00		      byte.b	0	;
    421  a870		       00		      byte.b	0	;
    422  a871		       00		      byte.b	0	;
    423  a872		       00		      byte.b	0	;
    424  a873		       00		      byte.b	0	;
    425  a874		       00		      byte.b	0	;
    426  a875		       00		      byte.b	0	;
    427  a876		       00		      byte.b	0	;
    428  a877		       00		      byte.b	0	;
    429  a878		       00		      byte.b	0	;
    430  a879		       00		      byte.b	0	;
    431  a87a		       00		      byte.b	0	;
    432  a87b		       00		      byte.b	0	;
    433  a87c		       00		      byte.b	0	;
    434  a87d		       00		      byte.b	0	;
    435  a87e		       00		      byte.b	0	;
    436  a87f		       00		      byte.b	0	;
    437  a880		       00		      byte.b	0	;
    438  a881		       00		      byte.b	0	;
    439  a882		       00		      byte.b	0	;
    440  a883		       00		      byte.b	0	;
    441  a884		       00		      byte.b	0	;
    442  a885		       00		      byte.b	0	;
    443  a886		       00		      byte.b	0	;
    444  a887		       00		      byte.b	0	;
    445  a888		       00		      byte.b	0	;
    446  a889		       00		      byte.b	0	;
    447  a88a		       00		      byte.b	0	;
    448  a88b		       00		      byte.b	0	;
    449  a88c		       00		      byte.b	0	;
    450  a88d		       00		      byte.b	0	;
    451  a88e		       00		      byte.b	0	;
    452  a88f		       00		      byte.b	0	;
    453  a890		       00		      byte.b	0	;
    454  a891		       00		      byte.b	0	;
    455  a892		       00		      byte.b	0	;
    456  a893		       00		      byte.b	0	;
    457  a894		       00		      byte.b	0	;
    458  a895		       00		      byte.b	0	;
    459  a896		       00		      byte.b	0	;
    460  a897		       00		      byte.b	0	;
    461  a898		       00		      byte.b	0	;
    462  a899		       00		      byte.b	0	;
    463  a89a		       00		      byte.b	0	;
    464  a89b		       00		      byte.b	0	;
    465  a89c		       00		      byte.b	0	;
    466  a89d		       00		      byte.b	0	;
------- FILE vicmidi.asm
    824  a89e				   setwaveorg
------- FILE setwave.asm LEVEL 2 PASS 2
      0  a89e					      include	"setwave.asm"
      1  a89e							;A short generic routine for setting any shift register value for any pulse
      2  a89e							;channel in about 150 cpu clocks. Use it freely.
      3  a89e
      4  a89e							; USAGE: y = channel ($0a..$0c)
      5  a89e							;	  x = initial frequency
      6  a89e							;	  a = shift register contents
      7  a89e							;
      8  a89e							; WARNING for purists: self-modifying code, illegal opcodes.
      9  a89e							;
     10  a89e							; code align assertion: make sure that the loop is within a page.
     11  a89e							; oscillator assertion: make sure that the channel has been at $7e
     12  a89e							; for some time before calling this function.
     13  a89e							; put TMP and TMP2 in the zero page.
     14  a89e
     15  a89e		       8e c0 a8 	      stx	initfreq	; 4
     16  a8a1
     17  a8a1		       8c af a8 	      sty	ch0	; 4
     18  a8a4		       8c ba a8 	      sty	ch1	; 4
     19  a8a7		       be be a8 	      ldx	ldfqmasks-$a,y	; 4
     20  a8aa		       85 57		      sta	TMP	; 3
     21  a8ac
     22  a8ac		       09 7f		      ora	#$7f	; 2
     23  a8ae
     24  a8ae		       8f 0c 90 	      .byte.b	$8f,$0C,$90	; axs $900c  ; 4  [$900c] = a AND x	     *ILLEGAL OPCODE*
     25  a8b1
     26  a8b1		       a8 af	   ch0	      =	*-2
     27  a8b1		       84 58		      sty	TMP2	; 3
     28  a8b3		       a0 07		      ldy	#7	; 2
     29  a8b5
     30  a8b5				   l0
     31  a8b5		       a9 7f		      lda	#$7f	; 2
     32  a8b7		       07 57		      .byte.b	$07,TMP	; aso TMP		 ; 5  asl tmp; a = [tmp] OR $7f  *ILLEGAL OPCODE*
     33  a8b9		       8f 0c 90 	      .byte.b	$8F,$0C,$90	; axs $900c	 ; 4  [$900c] = a AND x	  *ILLEGAL OPCODE*
     34  a8b9		       a8 ba	   ch1	      =	*-2
     35  a8bc		       88		      dey		; 2
     36  a8bd		       d0 f6		      bne	l0	; 3
     37  a8bf
     38  a8bf		       a9 80		      lda	#128	; 2
     39  a8bf		       a8 c0	   initfreq   =	*-1
     40  a8c1		       ea		      nop		; 2
     41  a8c2		       a4 58		      ldy	TMP2	; 3
     42  a8c4				   noset
     43  a8c4		       99 00 90 	      sta	$9000,y	; 5
     44  a8c7
     45  a8c7		       60		      rts		; 6	total clocks 11+4+3+2+16*7+16+6 eq 154
     46  a8c8
     47  a8c8				   ldfqmasks
     48  a8c8		       fe		      .byte.b	$fe	; $900a - 1 x 16 clocks/bit
     49  a8c9		       fd		      .byte.b	$fd	; $900b - 2 x	8 clocks/bit
     50  a8ca		       fb		      .byte.b	$fb	; $900c - 4 x	4 clocks/bit
     51  a8cb
     52  a8cb
     53  a8cb				   viznutwaveforms
     54  a8cb		       00		      .byte.b	0	; MIDI Program #1	default  0000000011111111
     55  a8cc		       02		      .byte.b	2	; MIDI Program #2	"10"	 0000001011111101
     56  a8cd		       04		      .byte.b	4	; MIDI Program #3	"100"	 0000010011111011
     57  a8ce		       06		      .byte.b	6	; MIDI Program #4	"110"	 0000011011111001
     58  a8cf		       08		      .byte.b	8	; MIDI Program #5	"1000"	 0000100011110111
     59  a8d0		       0a		      .byte.b	10	; MIDI Program #6	"1010"	 0000101011110101
     60  a8d1		       0b		      .byte.b	11	; MIDI Program #7	"1011"	 0000110011110011
     61  a8d2		       0e		      .byte.b	14	; MIDI Program #8	"1110"	 0000111011110001
     62  a8d3		       12		      .byte.b	18	; MIDI Program #9	"10010"  0001001011101101
     63  a8d4		       14		      .byte.b	20	; MIDI Program #10	"10100"  0001010011101011
     64  a8d5		       16		      .byte.b	22	; MIDI Program #11	"10110"  0001011011101001
     65  a8d6		       18		      .byte.b	24	; MIDI Program #12	"11000"  0001100011100111
     66  a8d7		       1a		      .byte.b	26	; MIDI Program #13	"11010"  0001101011100101
     67  a8d8		       24		      .byte.b	36	; MIDI Program #14	"100100" 0010010011011011
     68  a8d9		       2a		      .byte.b	42	; MIDI Program #15	"101010" 0010101011010101
     69  a8da		       2c		      .byte.b	44	; MIDI Program #16	"101100" 0010110011010011
------- FILE vicmidi.asm
    826  a8db
------- FILE lookup-ntsc.asm LEVEL 2 PASS 2
      0  a8db					      include	"lookup-ntsc.asm"
      1  a8db							; --------------------------------------------------------------------------------------------------
      2  a8db							; Note Lookups NTSC - 128 bytes each, map MIDI Note# to a VIC register value
      3  a8db							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a8db
      5  a8db				   voice1lookup_ntsc
      6  a8db		       00		      byte.b	0
      7  a8dc		       00		      byte.b	0
      8  a8dd		       00		      byte.b	0
      9  a8de		       00		      byte.b	0
     10  a8df		       00		      byte.b	0
     11  a8e0		       00		      byte.b	0
     12  a8e1		       00		      byte.b	0
     13  a8e2		       00		      byte.b	0
     14  a8e3		       00		      byte.b	0
     15  a8e4		       00		      byte.b	0
     16  a8e5		       00		      byte.b	0
     17  a8e6		       00		      byte.b	0
     18  a8e7		       00		      byte.b	0
     19  a8e8		       00		      byte.b	0
     20  a8e9		       00		      byte.b	0
     21  a8ea		       00		      byte.b	0
     22  a8eb		       00		      byte.b	0
     23  a8ec		       00		      byte.b	0
     24  a8ed		       00		      byte.b	0
     25  a8ee		       00		      byte.b	0
     26  a8ef		       00		      byte.b	0
     27  a8f0		       00		      byte.b	0
     28  a8f1		       00		      byte.b	0
     29  a8f2		       00		      byte.b	0
     30  a8f3		       85		      byte.b	133
     31  a8f4		       8c		      byte.b	140
     32  a8f5		       92		      byte.b	146
     33  a8f6		       98		      byte.b	152
     34  a8f7		       9e		      byte.b	158
     35  a8f8		       a3		      byte.b	163
     36  a8f9		       a9		      byte.b	169
     37  a8fa		       ad		      byte.b	173
     38  a8fb		       b2		      byte.b	178
     39  a8fc		       b6		      byte.b	182
     40  a8fd		       ba		      byte.b	186
     41  a8fe		       be		      byte.b	190
     42  a8ff		       c2		      byte.b	194
     43  a900		       c5		      byte.b	197
     44  a901		       c9		      byte.b	201
     45  a902		       cc		      byte.b	204
     46  a903		       cf		      byte.b	207
     47  a904		       d1		      byte.b	209
     48  a905		       d4		      byte.b	212
     49  a906		       d6		      byte.b	214
     50  a907		       d9		      byte.b	217
     51  a908		       db		      byte.b	219
     52  a909		       dd		      byte.b	221
     53  a90a		       df		      byte.b	223
     54  a90b		       e0		      byte.b	224
     55  a90c		       e2		      byte.b	226
     56  a90d		       e4		      byte.b	228
     57  a90e		       e5		      byte.b	229
     58  a90f		       e7		      byte.b	231
     59  a910		       e8		      byte.b	232
     60  a911		       e9		      byte.b	233
     61  a912		       eb		      byte.b	235
     62  a913		       ec		      byte.b	236
     63  a914		       ed		      byte.b	237
     64  a915		       ee		      byte.b	238
     65  a916		       ef		      byte.b	239
     66  a917		       f0		      byte.b	240
     67  a918		       00		      byte.b	0
     68  a919		       00		      byte.b	0
     69  a91a		       00		      byte.b	0
     70  a91b		       00		      byte.b	0
     71  a91c		       00		      byte.b	0
     72  a91d		       00		      byte.b	0
     73  a91e		       00		      byte.b	0
     74  a91f		       00		      byte.b	0
     75  a920		       00		      byte.b	0
     76  a921		       00		      byte.b	0
     77  a922		       00		      byte.b	0
     78  a923		       00		      byte.b	0
     79  a924		       00		      byte.b	0
     80  a925		       00		      byte.b	0
     81  a926		       00		      byte.b	0
     82  a927		       00		      byte.b	0
     83  a928		       00		      byte.b	0
     84  a929		       00		      byte.b	0
     85  a92a		       00		      byte.b	0
     86  a92b		       00		      byte.b	0
     87  a92c		       00		      byte.b	0
     88  a92d		       00		      byte.b	0
     89  a92e		       00		      byte.b	0
     90  a92f		       00		      byte.b	0
     91  a930		       00		      byte.b	0
     92  a931		       00		      byte.b	0
     93  a932		       00		      byte.b	0
     94  a933		       00		      byte.b	0
     95  a934		       00		      byte.b	0
     96  a935		       00		      byte.b	0
     97  a936		       00		      byte.b	0
     98  a937		       00		      byte.b	0
     99  a938		       00		      byte.b	0
    100  a939		       00		      byte.b	0
    101  a93a		       00		      byte.b	0
    102  a93b		       00		      byte.b	0
    103  a93c		       00		      byte.b	0
    104  a93d		       00		      byte.b	0
    105  a93e		       00		      byte.b	0
    106  a93f		       00		      byte.b	0
    107  a940		       00		      byte.b	0
    108  a941		       00		      byte.b	0
    109  a942		       00		      byte.b	0
    110  a943		       00		      byte.b	0
    111  a944		       00		      byte.b	0
    112  a945		       00		      byte.b	0
    113  a946		       00		      byte.b	0
    114  a947		       00		      byte.b	0
    115  a948		       00		      byte.b	0
    116  a949		       00		      byte.b	0
    117  a94a		       00		      byte.b	0
    118  a94b		       00		      byte.b	0
    119  a94c		       00		      byte.b	0
    120  a94d		       00		      byte.b	0
    121  a94e		       00		      byte.b	0
    122  a94f		       00		      byte.b	0
    123  a950		       00		      byte.b	0
    124  a951		       00		      byte.b	0
    125  a952		       00		      byte.b	0
    126  a953		       00		      byte.b	0
    127  a954		       00		      byte.b	0
    128  a955		       00		      byte.b	0
    129  a956		       00		      byte.b	0
    130  a957		       00		      byte.b	0
    131  a958		       00		      byte.b	0
    132  a959		       00		      byte.b	0
    133  a95a		       00		      byte.b	0
    134  a95b
    135  a95b				   voice2lookup_ntsc
    136  a95b		       00		      byte.b	0
    137  a95c		       00		      byte.b	0
    138  a95d		       00		      byte.b	0
    139  a95e		       00		      byte.b	0
    140  a95f		       00		      byte.b	0
    141  a960		       00		      byte.b	0
    142  a961		       00		      byte.b	0
    143  a962		       00		      byte.b	0
    144  a963		       00		      byte.b	0
    145  a964		       00		      byte.b	0
    146  a965		       00		      byte.b	0
    147  a966		       00		      byte.b	0
    148  a967		       00		      byte.b	0
    149  a968		       00		      byte.b	0
    150  a969		       00		      byte.b	0
    151  a96a		       00		      byte.b	0
    152  a96b		       00		      byte.b	0
    153  a96c		       00		      byte.b	0
    154  a96d		       00		      byte.b	0
    155  a96e		       00		      byte.b	0
    156  a96f		       00		      byte.b	0
    157  a970		       00		      byte.b	0
    158  a971		       00		      byte.b	0
    159  a972		       00		      byte.b	0
    160  a973		       00		      byte.b	0
    161  a974		       00		      byte.b	0
    162  a975		       00		      byte.b	0
    163  a976		       00		      byte.b	0
    164  a977		       00		      byte.b	0
    165  a978		       00		      byte.b	0
    166  a979		       00		      byte.b	0
    167  a97a		       00		      byte.b	0
    168  a97b		       00		      byte.b	0
    169  a97c		       00		      byte.b	0
    170  a97d		       00		      byte.b	0
    171  a97e		       00		      byte.b	0
    172  a97f		       85		      byte.b	133
    173  a980		       8c		      byte.b	140
    174  a981		       92		      byte.b	146
    175  a982		       98		      byte.b	152
    176  a983		       9e		      byte.b	158
    177  a984		       a3		      byte.b	163
    178  a985		       a9		      byte.b	169
    179  a986		       ad		      byte.b	173
    180  a987		       b2		      byte.b	178
    181  a988		       b6		      byte.b	182
    182  a989		       ba		      byte.b	186
    183  a98a		       be		      byte.b	190
    184  a98b		       c2		      byte.b	194
    185  a98c		       c5		      byte.b	197
    186  a98d		       c9		      byte.b	201
    187  a98e		       cc		      byte.b	204
    188  a98f		       cf		      byte.b	207
    189  a990		       d1		      byte.b	209
    190  a991		       d4		      byte.b	212
    191  a992		       d6		      byte.b	214
    192  a993		       d9		      byte.b	217
    193  a994		       db		      byte.b	219
    194  a995		       dd		      byte.b	221
    195  a996		       df		      byte.b	223
    196  a997		       e0		      byte.b	224
    197  a998		       e2		      byte.b	226
    198  a999		       e4		      byte.b	228
    199  a99a		       e5		      byte.b	229
    200  a99b		       e7		      byte.b	231
    201  a99c		       e8		      byte.b	232
    202  a99d		       e9		      byte.b	233
    203  a99e		       eb		      byte.b	235
    204  a99f		       ec		      byte.b	236
    205  a9a0		       ed		      byte.b	237
    206  a9a1		       ee		      byte.b	238
    207  a9a2		       ef		      byte.b	239
    208  a9a3		       f0		      byte.b	240
    209  a9a4		       00		      byte.b	0
    210  a9a5		       00		      byte.b	0
    211  a9a6		       00		      byte.b	0
    212  a9a7		       00		      byte.b	0
    213  a9a8		       00		      byte.b	0
    214  a9a9		       00		      byte.b	0
    215  a9aa		       00		      byte.b	0
    216  a9ab		       00		      byte.b	0
    217  a9ac		       00		      byte.b	0
    218  a9ad		       00		      byte.b	0
    219  a9ae		       00		      byte.b	0
    220  a9af		       00		      byte.b	0
    221  a9b0		       00		      byte.b	0
    222  a9b1		       00		      byte.b	0
    223  a9b2		       00		      byte.b	0
    224  a9b3		       00		      byte.b	0
    225  a9b4		       00		      byte.b	0
    226  a9b5		       00		      byte.b	0
    227  a9b6		       00		      byte.b	0
    228  a9b7		       00		      byte.b	0
    229  a9b8		       00		      byte.b	0
    230  a9b9		       00		      byte.b	0
    231  a9ba		       00		      byte.b	0
    232  a9bb		       00		      byte.b	0
    233  a9bc		       00		      byte.b	0
    234  a9bd		       00		      byte.b	0
    235  a9be		       00		      byte.b	0
    236  a9bf		       00		      byte.b	0
    237  a9c0		       00		      byte.b	0
    238  a9c1		       00		      byte.b	0
    239  a9c2		       00		      byte.b	0
    240  a9c3		       00		      byte.b	0
    241  a9c4		       00		      byte.b	0
    242  a9c5		       00		      byte.b	0
    243  a9c6		       00		      byte.b	0
    244  a9c7		       00		      byte.b	0
    245  a9c8		       00		      byte.b	0
    246  a9c9		       00		      byte.b	0
    247  a9ca		       00		      byte.b	0
    248  a9cb		       00		      byte.b	0
    249  a9cc		       00		      byte.b	0
    250  a9cd		       00		      byte.b	0
    251  a9ce		       00		      byte.b	0
    252  a9cf		       00		      byte.b	0
    253  a9d0		       00		      byte.b	0
    254  a9d1		       00		      byte.b	0
    255  a9d2		       00		      byte.b	0
    256  a9d3		       00		      byte.b	0
    257  a9d4		       00		      byte.b	0
    258  a9d5		       00		      byte.b	0
    259  a9d6		       00		      byte.b	0
    260  a9d7		       00		      byte.b	0
    261  a9d8		       00		      byte.b	0
    262  a9d9		       00		      byte.b	0
    263  a9da		       00		      byte.b	0
    264  a9db
    265  a9db				   voice3lookup_ntsc
    266  a9db		       00		      byte.b	0
    267  a9dc		       00		      byte.b	0
    268  a9dd		       00		      byte.b	0
    269  a9de		       00		      byte.b	0
    270  a9df		       00		      byte.b	0
    271  a9e0		       00		      byte.b	0
    272  a9e1		       00		      byte.b	0
    273  a9e2		       00		      byte.b	0
    274  a9e3		       00		      byte.b	0
    275  a9e4		       00		      byte.b	0
    276  a9e5		       00		      byte.b	0
    277  a9e6		       00		      byte.b	0
    278  a9e7		       00		      byte.b	0
    279  a9e8		       00		      byte.b	0
    280  a9e9		       00		      byte.b	0
    281  a9ea		       00		      byte.b	0
    282  a9eb		       00		      byte.b	0
    283  a9ec		       00		      byte.b	0
    284  a9ed		       00		      byte.b	0
    285  a9ee		       00		      byte.b	0
    286  a9ef		       00		      byte.b	0
    287  a9f0		       00		      byte.b	0
    288  a9f1		       00		      byte.b	0
    289  a9f2		       00		      byte.b	0
    290  a9f3		       00		      byte.b	0
    291  a9f4		       00		      byte.b	0
    292  a9f5		       00		      byte.b	0
    293  a9f6		       00		      byte.b	0
    294  a9f7		       00		      byte.b	0
    295  a9f8		       00		      byte.b	0
    296  a9f9		       00		      byte.b	0
    297  a9fa		       00		      byte.b	0
    298  a9fb		       00		      byte.b	0
    299  a9fc		       00		      byte.b	0
    300  a9fd		       00		      byte.b	0
    301  a9fe		       00		      byte.b	0
    302  a9ff		       00		      byte.b	0
    303  aa00		       00		      byte.b	0
    304  aa01		       00		      byte.b	0
    305  aa02		       00		      byte.b	0
    306  aa03		       00		      byte.b	0
    307  aa04		       00		      byte.b	0
    308  aa05		       00		      byte.b	0
    309  aa06		       00		      byte.b	0
    310  aa07		       00		      byte.b	0
    311  aa08		       00		      byte.b	0
    312  aa09		       00		      byte.b	0
    313  aa0a		       00		      byte.b	0
    314  aa0b		       85		      byte.b	133
    315  aa0c		       8c		      byte.b	140
    316  aa0d		       92		      byte.b	146
    317  aa0e		       98		      byte.b	152
    318  aa0f		       9e		      byte.b	158
    319  aa10		       a3		      byte.b	163
    320  aa11		       a9		      byte.b	169
    321  aa12		       ad		      byte.b	173
    322  aa13		       b2		      byte.b	178
    323  aa14		       b6		      byte.b	182
    324  aa15		       ba		      byte.b	186
    325  aa16		       be		      byte.b	190
    326  aa17		       c2		      byte.b	194
    327  aa18		       c5		      byte.b	197
    328  aa19		       c9		      byte.b	201
    329  aa1a		       cc		      byte.b	204
    330  aa1b		       cf		      byte.b	207
    331  aa1c		       d1		      byte.b	209
    332  aa1d		       d4		      byte.b	212
    333  aa1e		       d6		      byte.b	214
    334  aa1f		       d9		      byte.b	217
    335  aa20		       db		      byte.b	219
    336  aa21		       dd		      byte.b	221
    337  aa22		       df		      byte.b	223
    338  aa23		       e0		      byte.b	224
    339  aa24		       e2		      byte.b	226
    340  aa25		       e4		      byte.b	228
    341  aa26		       e5		      byte.b	229
    342  aa27		       e7		      byte.b	231
    343  aa28		       e8		      byte.b	232
    344  aa29		       e9		      byte.b	233
    345  aa2a		       eb		      byte.b	235
    346  aa2b		       ec		      byte.b	236
    347  aa2c		       ed		      byte.b	237
    348  aa2d		       ee		      byte.b	238
    349  aa2e		       ef		      byte.b	239
    350  aa2f		       f0		      byte.b	240
    351  aa30		       00		      byte.b	0
    352  aa31		       00		      byte.b	0
    353  aa32		       00		      byte.b	0
    354  aa33		       00		      byte.b	0
    355  aa34		       00		      byte.b	0
    356  aa35		       00		      byte.b	0
    357  aa36		       00		      byte.b	0
    358  aa37		       00		      byte.b	0
    359  aa38		       00		      byte.b	0
    360  aa39		       00		      byte.b	0
    361  aa3a		       00		      byte.b	0
    362  aa3b		       00		      byte.b	0
    363  aa3c		       00		      byte.b	0
    364  aa3d		       00		      byte.b	0
    365  aa3e		       00		      byte.b	0
    366  aa3f		       00		      byte.b	0
    367  aa40		       00		      byte.b	0
    368  aa41		       00		      byte.b	0
    369  aa42		       00		      byte.b	0
    370  aa43		       00		      byte.b	0
    371  aa44		       00		      byte.b	0
    372  aa45		       00		      byte.b	0
    373  aa46		       00		      byte.b	0
    374  aa47		       00		      byte.b	0
    375  aa48		       00		      byte.b	0
    376  aa49		       00		      byte.b	0
    377  aa4a		       00		      byte.b	0
    378  aa4b		       00		      byte.b	0
    379  aa4c		       00		      byte.b	0
    380  aa4d		       00		      byte.b	0
    381  aa4e		       00		      byte.b	0
    382  aa4f		       00		      byte.b	0
    383  aa50		       00		      byte.b	0
    384  aa51		       00		      byte.b	0
    385  aa52		       00		      byte.b	0
    386  aa53		       00		      byte.b	0
    387  aa54		       00		      byte.b	0
    388  aa55		       00		      byte.b	0
    389  aa56		       00		      byte.b	0
    390  aa57		       00		      byte.b	0
    391  aa58		       00		      byte.b	0
    392  aa59		       00		      byte.b	0
    393  aa5a		       00		      byte.b	0
    394  aa5b
    395  aa5b
    396  aa5b				   voice4lookup_ntsc
    397  aa5b		       00		      byte.b	0
    398  aa5c		       00		      byte.b	0
    399  aa5d		       00		      byte.b	0
    400  aa5e		       00		      byte.b	0
    401  aa5f		       00		      byte.b	0
    402  aa60		       00		      byte.b	0
    403  aa61		       00		      byte.b	0
    404  aa62		       00		      byte.b	0
    405  aa63		       00		      byte.b	0
    406  aa64		       00		      byte.b	0
    407  aa65		       00		      byte.b	0
    408  aa66		       00		      byte.b	0
    409  aa67		       00		      byte.b	0
    410  aa68		       00		      byte.b	0
    411  aa69		       00		      byte.b	0
    412  aa6a		       00		      byte.b	0
    413  aa6b		       00		      byte.b	0
    414  aa6c		       00		      byte.b	0
    415  aa6d		       00		      byte.b	0
    416  aa6e		       00		      byte.b	0
    417  aa6f		       00		      byte.b	0
    418  aa70		       00		      byte.b	0
    419  aa71		       00		      byte.b	0
    420  aa72		       00		      byte.b	0
    421  aa73		       00		      byte.b	0
    422  aa74		       00		      byte.b	0
    423  aa75		       00		      byte.b	0
    424  aa76		       00		      byte.b	0
    425  aa77		       00		      byte.b	0
    426  aa78		       00		      byte.b	0
    427  aa79		       00		      byte.b	0
    428  aa7a		       00		      byte.b	0
    429  aa7b		       00		      byte.b	0
    430  aa7c		       00		      byte.b	0
    431  aa7d		       00		      byte.b	0
    432  aa7e		       00		      byte.b	0
    433  aa7f		       85		      byte.b	133
    434  aa80		       8c		      byte.b	140
    435  aa81		       92		      byte.b	146
    436  aa82		       98		      byte.b	152
    437  aa83		       9e		      byte.b	158
    438  aa84		       a3		      byte.b	163
    439  aa85		       a9		      byte.b	169
    440  aa86		       ad		      byte.b	173
    441  aa87		       b2		      byte.b	178
    442  aa88		       b6		      byte.b	182
    443  aa89		       ba		      byte.b	186
    444  aa8a		       be		      byte.b	190
    445  aa8b		       c2		      byte.b	194
    446  aa8c		       c5		      byte.b	197
    447  aa8d		       c9		      byte.b	201
    448  aa8e		       cc		      byte.b	204
    449  aa8f		       cf		      byte.b	207
    450  aa90		       d1		      byte.b	209
    451  aa91		       d4		      byte.b	212
    452  aa92		       d6		      byte.b	214
    453  aa93		       d9		      byte.b	217
    454  aa94		       db		      byte.b	219
    455  aa95		       dd		      byte.b	221
    456  aa96		       df		      byte.b	223
    457  aa97		       e0		      byte.b	224
    458  aa98		       e2		      byte.b	226
    459  aa99		       e4		      byte.b	228
    460  aa9a		       e5		      byte.b	229
    461  aa9b		       e7		      byte.b	231
    462  aa9c		       e8		      byte.b	232
    463  aa9d		       e9		      byte.b	233
    464  aa9e		       eb		      byte.b	235
    465  aa9f		       ec		      byte.b	236
    466  aaa0		       ed		      byte.b	237
    467  aaa1		       ee		      byte.b	238
    468  aaa2		       ef		      byte.b	239
    469  aaa3		       f0		      byte.b	240
    470  aaa4		       00		      byte.b	0
    471  aaa5		       00		      byte.b	0
    472  aaa6		       00		      byte.b	0
    473  aaa7		       00		      byte.b	0
    474  aaa8		       00		      byte.b	0
    475  aaa9		       00		      byte.b	0
    476  aaaa		       00		      byte.b	0
    477  aaab		       00		      byte.b	0
    478  aaac		       00		      byte.b	0
    479  aaad		       00		      byte.b	0
    480  aaae		       00		      byte.b	0
    481  aaaf		       00		      byte.b	0
    482  aab0		       00		      byte.b	0
    483  aab1		       00		      byte.b	0
    484  aab2		       00		      byte.b	0
    485  aab3		       00		      byte.b	0
    486  aab4		       00		      byte.b	0
    487  aab5		       00		      byte.b	0
    488  aab6		       00		      byte.b	0
    489  aab7		       00		      byte.b	0
    490  aab8		       00		      byte.b	0
    491  aab9		       00		      byte.b	0
    492  aaba		       00		      byte.b	0
    493  aabb		       00		      byte.b	0
    494  aabc		       00		      byte.b	0
    495  aabd		       00		      byte.b	0
    496  aabe		       00		      byte.b	0
    497  aabf		       00		      byte.b	0
    498  aac0		       00		      byte.b	0
    499  aac1		       00		      byte.b	0
    500  aac2		       00		      byte.b	0
    501  aac3		       00		      byte.b	0
    502  aac4		       00		      byte.b	0
    503  aac5		       00		      byte.b	0
    504  aac6		       00		      byte.b	0
    505  aac7		       00		      byte.b	0
    506  aac8		       00		      byte.b	0
    507  aac9		       00		      byte.b	0
    508  aaca		       00		      byte.b	0
    509  aacb		       00		      byte.b	0
    510  aacc		       00		      byte.b	0
    511  aacd		       00		      byte.b	0
    512  aace		       00		      byte.b	0
    513  aacf		       00		      byte.b	0
    514  aad0		       00		      byte.b	0
    515  aad1		       00		      byte.b	0
    516  aad2		       00		      byte.b	0
    517  aad3		       00		      byte.b	0
    518  aad4		       00		      byte.b	0
    519  aad5		       00		      byte.b	0
    520  aad6		       00		      byte.b	0
    521  aad7		       00		      byte.b	0
    522  aad8		       00		      byte.b	0
    523  aad9		       00		      byte.b	0
    524  aada		       00		      byte.b	0
    525  aadb
    526  aadb							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-pal.asm LEVEL 2 PASS 2
      0  aadb					      include	"lookup-pal.asm"
      1  aadb							; --------------------------------------------------------------------------------------------------
      2  aadb							; Note Lookups PAL - 128 bytes each, map MIDI Note# to a VIC register value
      3  aadb							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  aadb
      5  aadb				   voice1lookup_pal
      6  aadb		       00		      byte.b	0
      7  aadc		       00		      byte.b	0
      8  aadd		       00		      byte.b	0
      9  aade		       00		      byte.b	0
     10  aadf		       00		      byte.b	0
     11  aae0		       00		      byte.b	0
     12  aae1		       00		      byte.b	0
     13  aae2		       00		      byte.b	0
     14  aae3		       00		      byte.b	0
     15  aae4		       00		      byte.b	0
     16  aae5		       00		      byte.b	0
     17  aae6		       00		      byte.b	0
     18  aae7		       00		      byte.b	0
     19  aae8		       00		      byte.b	0
     20  aae9		       00		      byte.b	0
     21  aaea		       00		      byte.b	0
     22  aaeb		       00		      byte.b	0
     23  aaec		       00		      byte.b	0
     24  aaed		       00		      byte.b	0
     25  aaee		       00		      byte.b	0
     26  aaef		       00		      byte.b	0
     27  aaf0		       00		      byte.b	0
     28  aaf1		       00		      byte.b	0
     29  aaf2		       00		      byte.b	0
     30  aaf3		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
     31  aaf4		       82		      byte.b	130
     32  aaf5		       89		      byte.b	137
     33  aaf6		       90		      byte.b	144
     34  aaf7		       96		      byte.b	150
     35  aaf8		       9c		      byte.b	156
     36  aaf9		       a1		      byte.b	161
     37  aafa		       a7		      byte.b	167
     38  aafb		       ac		      byte.b	172
     39  aafc		       b0		      byte.b	176
     40  aafd		       b5		      byte.b	181
     41  aafe		       b9		      byte.b	185
     42  aaff		       bd		      byte.b	189
     43  ab00		       c1		      byte.b	193
     44  ab01		       c4		      byte.b	196
     45  ab02		       c7		      byte.b	199
     46  ab03		       ca		      byte.b	202
     47  ab04		       cd		      byte.b	205
     48  ab05		       d0		      byte.b	208
     49  ab06		       d3		      byte.b	211
     50  ab07		       d5		      byte.b	213
     51  ab08		       d8		      byte.b	216
     52  ab09		       da		      byte.b	218
     53  ab0a		       dc		      byte.b	220
     54  ab0b		       de		      byte.b	222
     55  ab0c		       e0		      byte.b	224
     56  ab0d		       e2		      byte.b	226
     57  ab0e		       e3		      byte.b	227
     58  ab0f		       e5		      byte.b	229
     59  ab10		       e6		      byte.b	230
     60  ab11		       e8		      byte.b	232
     61  ab12		       e9		      byte.b	233
     62  ab13		       ea		      byte.b	234
     63  ab14		       eb		      byte.b	235
     64  ab15		       ec		      byte.b	236
     65  ab16		       ed		      byte.b	237
     66  ab17		       ee		      byte.b	238
     67  ab18		       00		      byte.b	0
     68  ab19		       00		      byte.b	0
     69  ab1a		       00		      byte.b	0
     70  ab1b		       00		      byte.b	0
     71  ab1c		       00		      byte.b	0
     72  ab1d		       00		      byte.b	0
     73  ab1e		       00		      byte.b	0
     74  ab1f		       00		      byte.b	0
     75  ab20		       00		      byte.b	0
     76  ab21		       00		      byte.b	0
     77  ab22		       00		      byte.b	0
     78  ab23		       00		      byte.b	0
     79  ab24		       00		      byte.b	0
     80  ab25		       00		      byte.b	0
     81  ab26		       00		      byte.b	0
     82  ab27		       00		      byte.b	0
     83  ab28		       00		      byte.b	0
     84  ab29		       00		      byte.b	0
     85  ab2a		       00		      byte.b	0
     86  ab2b		       00		      byte.b	0
     87  ab2c		       00		      byte.b	0
     88  ab2d		       00		      byte.b	0
     89  ab2e		       00		      byte.b	0
     90  ab2f		       00		      byte.b	0
     91  ab30		       00		      byte.b	0
     92  ab31		       00		      byte.b	0
     93  ab32		       00		      byte.b	0
     94  ab33		       00		      byte.b	0
     95  ab34		       00		      byte.b	0
     96  ab35		       00		      byte.b	0
     97  ab36		       00		      byte.b	0
     98  ab37		       00		      byte.b	0
     99  ab38		       00		      byte.b	0
    100  ab39		       00		      byte.b	0
    101  ab3a		       00		      byte.b	0
    102  ab3b		       00		      byte.b	0
    103  ab3c		       00		      byte.b	0
    104  ab3d		       00		      byte.b	0
    105  ab3e		       00		      byte.b	0
    106  ab3f		       00		      byte.b	0
    107  ab40		       00		      byte.b	0
    108  ab41		       00		      byte.b	0
    109  ab42		       00		      byte.b	0
    110  ab43		       00		      byte.b	0
    111  ab44		       00		      byte.b	0
    112  ab45		       00		      byte.b	0
    113  ab46		       00		      byte.b	0
    114  ab47		       00		      byte.b	0
    115  ab48		       00		      byte.b	0
    116  ab49		       00		      byte.b	0
    117  ab4a		       00		      byte.b	0
    118  ab4b		       00		      byte.b	0
    119  ab4c		       00		      byte.b	0
    120  ab4d		       00		      byte.b	0
    121  ab4e		       00		      byte.b	0
    122  ab4f		       00		      byte.b	0
    123  ab50		       00		      byte.b	0
    124  ab51		       00		      byte.b	0
    125  ab52		       00		      byte.b	0
    126  ab53		       00		      byte.b	0
    127  ab54		       00		      byte.b	0
    128  ab55		       00		      byte.b	0
    129  ab56		       00		      byte.b	0
    130  ab57		       00		      byte.b	0
    131  ab58		       00		      byte.b	0
    132  ab59		       00		      byte.b	0
    133  ab5a		       00		      byte.b	0
    134  ab5b
    135  ab5b				   voice2lookup_pal
    136  ab5b		       00		      byte.b	0
    137  ab5c		       00		      byte.b	0
    138  ab5d		       00		      byte.b	0
    139  ab5e		       00		      byte.b	0
    140  ab5f		       00		      byte.b	0
    141  ab60		       00		      byte.b	0
    142  ab61		       00		      byte.b	0
    143  ab62		       00		      byte.b	0
    144  ab63		       00		      byte.b	0
    145  ab64		       00		      byte.b	0
    146  ab65		       00		      byte.b	0
    147  ab66		       00		      byte.b	0
    148  ab67		       00		      byte.b	0
    149  ab68		       00		      byte.b	0
    150  ab69		       00		      byte.b	0
    151  ab6a		       00		      byte.b	0
    152  ab6b		       00		      byte.b	0
    153  ab6c		       00		      byte.b	0
    154  ab6d		       00		      byte.b	0
    155  ab6e		       00		      byte.b	0
    156  ab6f		       00		      byte.b	0
    157  ab70		       00		      byte.b	0
    158  ab71		       00		      byte.b	0
    159  ab72		       00		      byte.b	0
    160  ab73		       00		      byte.b	0
    161  ab74		       00		      byte.b	0
    162  ab75		       00		      byte.b	0
    163  ab76		       00		      byte.b	0
    164  ab77		       00		      byte.b	0
    165  ab78		       00		      byte.b	0
    166  ab79		       00		      byte.b	0
    167  ab7a		       00		      byte.b	0
    168  ab7b		       00		      byte.b	0
    169  ab7c		       00		      byte.b	0
    170  ab7d		       00		      byte.b	0
    171  ab7e		       00		      byte.b	0
    172  ab7f		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    173  ab80		       82		      byte.b	130
    174  ab81		       89		      byte.b	137
    175  ab82		       90		      byte.b	144
    176  ab83		       96		      byte.b	150
    177  ab84		       9c		      byte.b	156
    178  ab85		       a1		      byte.b	161
    179  ab86		       a7		      byte.b	167
    180  ab87		       ac		      byte.b	172
    181  ab88		       b0		      byte.b	176
    182  ab89		       b5		      byte.b	181
    183  ab8a		       b9		      byte.b	185
    184  ab8b		       bd		      byte.b	189
    185  ab8c		       c1		      byte.b	193
    186  ab8d		       c4		      byte.b	196
    187  ab8e		       c7		      byte.b	199
    188  ab8f		       ca		      byte.b	202
    189  ab90		       cd		      byte.b	205
    190  ab91		       d0		      byte.b	208
    191  ab92		       d3		      byte.b	211
    192  ab93		       d5		      byte.b	213
    193  ab94		       d8		      byte.b	216
    194  ab95		       da		      byte.b	218
    195  ab96		       dc		      byte.b	220
    196  ab97		       de		      byte.b	222
    197  ab98		       e0		      byte.b	224
    198  ab99		       e2		      byte.b	226
    199  ab9a		       e3		      byte.b	227
    200  ab9b		       e5		      byte.b	229
    201  ab9c		       e6		      byte.b	230
    202  ab9d		       e8		      byte.b	232
    203  ab9e		       e9		      byte.b	233
    204  ab9f		       ea		      byte.b	234
    205  aba0		       eb		      byte.b	235
    206  aba1		       ec		      byte.b	236
    207  aba2		       ed		      byte.b	237
    208  aba3		       ee		      byte.b	238
    209  aba4		       00		      byte.b	0
    210  aba5		       00		      byte.b	0
    211  aba6		       00		      byte.b	0
    212  aba7		       00		      byte.b	0
    213  aba8		       00		      byte.b	0
    214  aba9		       00		      byte.b	0
    215  abaa		       00		      byte.b	0
    216  abab		       00		      byte.b	0
    217  abac		       00		      byte.b	0
    218  abad		       00		      byte.b	0
    219  abae		       00		      byte.b	0
    220  abaf		       00		      byte.b	0
    221  abb0		       00		      byte.b	0
    222  abb1		       00		      byte.b	0
    223  abb2		       00		      byte.b	0
    224  abb3		       00		      byte.b	0
    225  abb4		       00		      byte.b	0
    226  abb5		       00		      byte.b	0
    227  abb6		       00		      byte.b	0
    228  abb7		       00		      byte.b	0
    229  abb8		       00		      byte.b	0
    230  abb9		       00		      byte.b	0
    231  abba		       00		      byte.b	0
    232  abbb		       00		      byte.b	0
    233  abbc		       00		      byte.b	0
    234  abbd		       00		      byte.b	0
    235  abbe		       00		      byte.b	0
    236  abbf		       00		      byte.b	0
    237  abc0		       00		      byte.b	0
    238  abc1		       00		      byte.b	0
    239  abc2		       00		      byte.b	0
    240  abc3		       00		      byte.b	0
    241  abc4		       00		      byte.b	0
    242  abc5		       00		      byte.b	0
    243  abc6		       00		      byte.b	0
    244  abc7		       00		      byte.b	0
    245  abc8		       00		      byte.b	0
    246  abc9		       00		      byte.b	0
    247  abca		       00		      byte.b	0
    248  abcb		       00		      byte.b	0
    249  abcc		       00		      byte.b	0
    250  abcd		       00		      byte.b	0
    251  abce		       00		      byte.b	0
    252  abcf		       00		      byte.b	0
    253  abd0		       00		      byte.b	0
    254  abd1		       00		      byte.b	0
    255  abd2		       00		      byte.b	0
    256  abd3		       00		      byte.b	0
    257  abd4		       00		      byte.b	0
    258  abd5		       00		      byte.b	0
    259  abd6		       00		      byte.b	0
    260  abd7		       00		      byte.b	0
    261  abd8		       00		      byte.b	0
    262  abd9		       00		      byte.b	0
    263  abda		       00		      byte.b	0
    264  abdb
    265  abdb				   voice3lookup_pal
    266  abdb		       00		      byte.b	0
    267  abdc		       00		      byte.b	0
    268  abdd		       00		      byte.b	0
    269  abde		       00		      byte.b	0
    270  abdf		       00		      byte.b	0
    271  abe0		       00		      byte.b	0
    272  abe1		       00		      byte.b	0
    273  abe2		       00		      byte.b	0
    274  abe3		       00		      byte.b	0
    275  abe4		       00		      byte.b	0
    276  abe5		       00		      byte.b	0
    277  abe6		       00		      byte.b	0
    278  abe7		       00		      byte.b	0
    279  abe8		       00		      byte.b	0
    280  abe9		       00		      byte.b	0
    281  abea		       00		      byte.b	0
    282  abeb		       00		      byte.b	0
    283  abec		       00		      byte.b	0
    284  abed		       00		      byte.b	0
    285  abee		       00		      byte.b	0
    286  abef		       00		      byte.b	0
    287  abf0		       00		      byte.b	0
    288  abf1		       00		      byte.b	0
    289  abf2		       00		      byte.b	0
    290  abf3		       00		      byte.b	0
    291  abf4		       00		      byte.b	0
    292  abf5		       00		      byte.b	0
    293  abf6		       00		      byte.b	0
    294  abf7		       00		      byte.b	0
    295  abf8		       00		      byte.b	0
    296  abf9		       00		      byte.b	0
    297  abfa		       00		      byte.b	0
    298  abfb		       00		      byte.b	0
    299  abfc		       00		      byte.b	0
    300  abfd		       00		      byte.b	0
    301  abfe		       00		      byte.b	0
    302  abff		       00		      byte.b	0
    303  ac00		       00		      byte.b	0
    304  ac01		       00		      byte.b	0
    305  ac02		       00		      byte.b	0
    306  ac03		       00		      byte.b	0
    307  ac04		       00		      byte.b	0
    308  ac05		       00		      byte.b	0
    309  ac06		       00		      byte.b	0
    310  ac07		       00		      byte.b	0
    311  ac08		       00		      byte.b	0
    312  ac09		       00		      byte.b	0
    313  ac0a		       00		      byte.b	0
    314  ac0b		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    315  ac0c		       82		      byte.b	130
    316  ac0d		       89		      byte.b	137
    317  ac0e		       90		      byte.b	144
    318  ac0f		       96		      byte.b	150
    319  ac10		       9c		      byte.b	156
    320  ac11		       a1		      byte.b	161
    321  ac12		       a7		      byte.b	167
    322  ac13		       ac		      byte.b	172
    323  ac14		       b0		      byte.b	176
    324  ac15		       b5		      byte.b	181
    325  ac16		       b9		      byte.b	185
    326  ac17		       bd		      byte.b	189
    327  ac18		       c1		      byte.b	193
    328  ac19		       c4		      byte.b	196
    329  ac1a		       c7		      byte.b	199
    330  ac1b		       ca		      byte.b	202
    331  ac1c		       cd		      byte.b	205
    332  ac1d		       d0		      byte.b	208
    333  ac1e		       d3		      byte.b	211
    334  ac1f		       d5		      byte.b	213
    335  ac20		       d8		      byte.b	216
    336  ac21		       da		      byte.b	218
    337  ac22		       dc		      byte.b	220
    338  ac23		       de		      byte.b	222
    339  ac24		       e0		      byte.b	224
    340  ac25		       e2		      byte.b	226
    341  ac26		       e3		      byte.b	227
    342  ac27		       e5		      byte.b	229
    343  ac28		       e6		      byte.b	230
    344  ac29		       e8		      byte.b	232
    345  ac2a		       e9		      byte.b	233
    346  ac2b		       ea		      byte.b	234
    347  ac2c		       eb		      byte.b	235
    348  ac2d		       ec		      byte.b	236
    349  ac2e		       ed		      byte.b	237
    350  ac2f		       ee		      byte.b	238
    351  ac30		       00		      byte.b	0
    352  ac31		       00		      byte.b	0
    353  ac32		       00		      byte.b	0
    354  ac33		       00		      byte.b	0
    355  ac34		       00		      byte.b	0
    356  ac35		       00		      byte.b	0
    357  ac36		       00		      byte.b	0
    358  ac37		       00		      byte.b	0
    359  ac38		       00		      byte.b	0
    360  ac39		       00		      byte.b	0
    361  ac3a		       00		      byte.b	0
    362  ac3b		       00		      byte.b	0
    363  ac3c		       00		      byte.b	0
    364  ac3d		       00		      byte.b	0
    365  ac3e		       00		      byte.b	0
    366  ac3f		       00		      byte.b	0
    367  ac40		       00		      byte.b	0
    368  ac41		       00		      byte.b	0
    369  ac42		       00		      byte.b	0
    370  ac43		       00		      byte.b	0
    371  ac44		       00		      byte.b	0
    372  ac45		       00		      byte.b	0
    373  ac46		       00		      byte.b	0
    374  ac47		       00		      byte.b	0
    375  ac48		       00		      byte.b	0
    376  ac49		       00		      byte.b	0
    377  ac4a		       00		      byte.b	0
    378  ac4b		       00		      byte.b	0
    379  ac4c		       00		      byte.b	0
    380  ac4d		       00		      byte.b	0
    381  ac4e		       00		      byte.b	0
    382  ac4f		       00		      byte.b	0
    383  ac50		       00		      byte.b	0
    384  ac51		       00		      byte.b	0
    385  ac52		       00		      byte.b	0
    386  ac53		       00		      byte.b	0
    387  ac54		       00		      byte.b	0
    388  ac55		       00		      byte.b	0
    389  ac56		       00		      byte.b	0
    390  ac57		       00		      byte.b	0
    391  ac58		       00		      byte.b	0
    392  ac59		       00		      byte.b	0
    393  ac5a		       00		      byte.b	0
    394  ac5b
    395  ac5b
    396  ac5b				   voice4lookup_pal
    397  ac5b		       00		      byte.b	0
    398  ac5c		       00		      byte.b	0
    399  ac5d		       00		      byte.b	0
    400  ac5e		       00		      byte.b	0
    401  ac5f		       00		      byte.b	0
    402  ac60		       00		      byte.b	0
    403  ac61		       00		      byte.b	0
    404  ac62		       00		      byte.b	0
    405  ac63		       00		      byte.b	0
    406  ac64		       00		      byte.b	0
    407  ac65		       00		      byte.b	0
    408  ac66		       00		      byte.b	0
    409  ac67		       00		      byte.b	0
    410  ac68		       00		      byte.b	0
    411  ac69		       00		      byte.b	0
    412  ac6a		       00		      byte.b	0
    413  ac6b		       00		      byte.b	0
    414  ac6c		       00		      byte.b	0
    415  ac6d		       00		      byte.b	0
    416  ac6e		       00		      byte.b	0
    417  ac6f		       00		      byte.b	0
    418  ac70		       00		      byte.b	0
    419  ac71		       00		      byte.b	0
    420  ac72		       00		      byte.b	0
    421  ac73		       00		      byte.b	0
    422  ac74		       00		      byte.b	0
    423  ac75		       00		      byte.b	0
    424  ac76		       00		      byte.b	0
    425  ac77		       00		      byte.b	0
    426  ac78		       00		      byte.b	0
    427  ac79		       00		      byte.b	0
    428  ac7a		       00		      byte.b	0
    429  ac7b		       00		      byte.b	0
    430  ac7c		       00		      byte.b	0
    431  ac7d		       00		      byte.b	0
    432  ac7e		       00		      byte.b	0
    433  ac7f		       85		      byte.b	133	; (122.60)  <- not reachable in PAL
    434  ac80		       8c		      byte.b	140
    435  ac81		       92		      byte.b	146
    436  ac82		       98		      byte.b	152
    437  ac83		       9e		      byte.b	158
    438  ac84		       a3		      byte.b	163
    439  ac85		       a9		      byte.b	169
    440  ac86		       ad		      byte.b	173
    441  ac87		       b2		      byte.b	178
    442  ac88		       b6		      byte.b	182
    443  ac89		       ba		      byte.b	186
    444  ac8a		       be		      byte.b	190
    445  ac8b		       c2		      byte.b	194
    446  ac8c		       c5		      byte.b	197
    447  ac8d		       c9		      byte.b	201
    448  ac8e		       cc		      byte.b	204
    449  ac8f		       cf		      byte.b	207
    450  ac90		       d1		      byte.b	209
    451  ac91		       d4		      byte.b	212
    452  ac92		       d6		      byte.b	214
    453  ac93		       d9		      byte.b	217
    454  ac94		       db		      byte.b	219
    455  ac95		       dd		      byte.b	221
    456  ac96		       df		      byte.b	223
    457  ac97		       e0		      byte.b	224
    458  ac98		       e2		      byte.b	226
    459  ac99		       e4		      byte.b	228
    460  ac9a		       e5		      byte.b	229
    461  ac9b		       e7		      byte.b	231
    462  ac9c		       e8		      byte.b	232
    463  ac9d		       e9		      byte.b	233
    464  ac9e		       eb		      byte.b	235
    465  ac9f		       ec		      byte.b	236
    466  aca0		       ed		      byte.b	237
    467  aca1		       ee		      byte.b	238
    468  aca2		       ef		      byte.b	239
    469  aca3		       f0		      byte.b	240
    470  aca4		       00		      byte.b	0
    471  aca5		       00		      byte.b	0
    472  aca6		       00		      byte.b	0
    473  aca7		       00		      byte.b	0
    474  aca8		       00		      byte.b	0
    475  aca9		       00		      byte.b	0
    476  acaa		       00		      byte.b	0
    477  acab		       00		      byte.b	0
    478  acac		       00		      byte.b	0
    479  acad		       00		      byte.b	0
    480  acae		       00		      byte.b	0
    481  acaf		       00		      byte.b	0
    482  acb0		       00		      byte.b	0
    483  acb1		       00		      byte.b	0
    484  acb2		       00		      byte.b	0
    485  acb3		       00		      byte.b	0
    486  acb4		       00		      byte.b	0
    487  acb5		       00		      byte.b	0
    488  acb6		       00		      byte.b	0
    489  acb7		       00		      byte.b	0
    490  acb8		       00		      byte.b	0
    491  acb9		       00		      byte.b	0
    492  acba		       00		      byte.b	0
    493  acbb		       00		      byte.b	0
    494  acbc		       00		      byte.b	0
    495  acbd		       00		      byte.b	0
    496  acbe		       00		      byte.b	0
    497  acbf		       00		      byte.b	0
    498  acc0		       00		      byte.b	0
    499  acc1		       00		      byte.b	0
    500  acc2		       00		      byte.b	0
    501  acc3		       00		      byte.b	0
    502  acc4		       00		      byte.b	0
    503  acc5		       00		      byte.b	0
    504  acc6		       00		      byte.b	0
    505  acc7		       00		      byte.b	0
    506  acc8		       00		      byte.b	0
    507  acc9		       00		      byte.b	0
    508  acca		       00		      byte.b	0
    509  accb		       00		      byte.b	0
    510  accc		       00		      byte.b	0
    511  accd		       00		      byte.b	0
    512  acce		       00		      byte.b	0
    513  accf		       00		      byte.b	0
    514  acd0		       00		      byte.b	0
    515  acd1		       00		      byte.b	0
    516  acd2		       00		      byte.b	0
    517  acd3		       00		      byte.b	0
    518  acd4		       00		      byte.b	0
    519  acd5		       00		      byte.b	0
    520  acd6		       00		      byte.b	0
    521  acd7		       00		      byte.b	0
    522  acd8		       00		      byte.b	0
    523  acd9		       00		      byte.b	0
    524  acda		       00		      byte.b	0
    525  acdb
    526  acdb							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-alt.asm LEVEL 2 PASS 2
      0  acdb					      include	"lookup-alt.asm"
      1  acdb							; --------------------------------------------------------------------------------------------------
      2  acdb							; Note Lookups Alternate - 128 bytes each, map MIDI Note# to a VIC register value
      3  acdb							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  acdb
      5  acdb				   voice1lookup_alt
      6  acdb		       00		      byte.b	0
      7  acdc		       00		      byte.b	0
      8  acdd		       00		      byte.b	0
      9  acde		       00		      byte.b	0
     10  acdf		       00		      byte.b	0
     11  ace0		       00		      byte.b	0
     12  ace1		       00		      byte.b	0
     13  ace2		       00		      byte.b	0
     14  ace3		       00		      byte.b	0
     15  ace4		       00		      byte.b	0
     16  ace5		       00		      byte.b	0
     17  ace6		       00		      byte.b	0
     18  ace7		       00		      byte.b	0
     19  ace8		       00		      byte.b	0
     20  ace9		       00		      byte.b	0
     21  acea		       00		      byte.b	0
     22  aceb		       00		      byte.b	0
     23  acec		       00		      byte.b	0
     24  aced		       00		      byte.b	0
     25  acee		       00		      byte.b	0
     26  acef		       00		      byte.b	0
     27  acf0		       00		      byte.b	0
     28  acf1		       00		      byte.b	0
     29  acf2		       00		      byte.b	0
     30  acf3		       ff		      byte.b	255
     31  acf4		       86		      byte.b	134
     32  acf5		       8d		      byte.b	141
     33  acf6		       93		      byte.b	147
     34  acf7		       99		      byte.b	153
     35  acf8		       9f		      byte.b	159
     36  acf9		       a4		      byte.b	164
     37  acfa		       aa		      byte.b	170
     38  acfb		       ae		      byte.b	174
     39  acfc		       b3		      byte.b	179
     40  acfd		       b7		      byte.b	183
     41  acfe		       bb		      byte.b	187
     42  acff		       bf		      byte.b	191
     43  ad00		       c3		      byte.b	195
     44  ad01		       c6		      byte.b	198
     45  ad02		       c9		      byte.b	201
     46  ad03		       cc		      byte.b	204
     47  ad04		       cf		      byte.b	207
     48  ad05		       d2		      byte.b	210
     49  ad06		       d4		      byte.b	212
     50  ad07		       d7		      byte.b	215
     51  ad08		       d9		      byte.b	217
     52  ad09		       db		      byte.b	219
     53  ad0a		       dd		      byte.b	221
     54  ad0b		       df		      byte.b	223
     55  ad0c		       e1		      byte.b	225
     56  ad0d		       e2		      byte.b	226
     57  ad0e		       e4		      byte.b	228
     58  ad0f		       e6		      byte.b	230
     59  ad10		       e7		      byte.b	231
     60  ad11		       e8		      byte.b	232
     61  ad12		       ea		      byte.b	234
     62  ad13		       eb		      byte.b	235
     63  ad14		       ec		      byte.b	236
     64  ad15		       ed		      byte.b	237
     65  ad16		       ee		      byte.b	238
     66  ad17		       ef		      byte.b	239
     67  ad18		       00		      byte.b	0
     68  ad19		       00		      byte.b	0
     69  ad1a		       00		      byte.b	0
     70  ad1b		       00		      byte.b	0
     71  ad1c		       00		      byte.b	0
     72  ad1d		       00		      byte.b	0
     73  ad1e		       00		      byte.b	0
     74  ad1f		       00		      byte.b	0
     75  ad20		       00		      byte.b	0
     76  ad21		       00		      byte.b	0
     77  ad22		       00		      byte.b	0
     78  ad23		       00		      byte.b	0
     79  ad24		       00		      byte.b	0
     80  ad25		       00		      byte.b	0
     81  ad26		       00		      byte.b	0
     82  ad27		       00		      byte.b	0
     83  ad28		       00		      byte.b	0
     84  ad29		       00		      byte.b	0
     85  ad2a		       00		      byte.b	0
     86  ad2b		       00		      byte.b	0
     87  ad2c		       00		      byte.b	0
     88  ad2d		       00		      byte.b	0
     89  ad2e		       00		      byte.b	0
     90  ad2f		       00		      byte.b	0
     91  ad30		       00		      byte.b	0
     92  ad31		       00		      byte.b	0
     93  ad32		       00		      byte.b	0
     94  ad33		       00		      byte.b	0
     95  ad34		       00		      byte.b	0
     96  ad35		       00		      byte.b	0
     97  ad36		       00		      byte.b	0
     98  ad37		       00		      byte.b	0
     99  ad38		       00		      byte.b	0
    100  ad39		       00		      byte.b	0
    101  ad3a		       00		      byte.b	0
    102  ad3b		       00		      byte.b	0
    103  ad3c		       00		      byte.b	0
    104  ad3d		       00		      byte.b	0
    105  ad3e		       00		      byte.b	0
    106  ad3f		       00		      byte.b	0
    107  ad40		       00		      byte.b	0
    108  ad41		       00		      byte.b	0
    109  ad42		       00		      byte.b	0
    110  ad43		       00		      byte.b	0
    111  ad44		       00		      byte.b	0
    112  ad45		       00		      byte.b	0
    113  ad46		       00		      byte.b	0
    114  ad47		       00		      byte.b	0
    115  ad48		       00		      byte.b	0
    116  ad49		       00		      byte.b	0
    117  ad4a		       00		      byte.b	0
    118  ad4b		       00		      byte.b	0
    119  ad4c		       00		      byte.b	0
    120  ad4d		       00		      byte.b	0
    121  ad4e		       00		      byte.b	0
    122  ad4f		       00		      byte.b	0
    123  ad50		       00		      byte.b	0
    124  ad51		       00		      byte.b	0
    125  ad52		       00		      byte.b	0
    126  ad53		       00		      byte.b	0
    127  ad54		       00		      byte.b	0
    128  ad55		       00		      byte.b	0
    129  ad56		       00		      byte.b	0
    130  ad57		       00		      byte.b	0
    131  ad58		       00		      byte.b	0
    132  ad59		       00		      byte.b	0
    133  ad5a		       00		      byte.b	0
    134  ad5b
    135  ad5b				   voice2lookup_alt
    136  ad5b		       00		      byte.b	0
    137  ad5c		       00		      byte.b	0
    138  ad5d		       00		      byte.b	0
    139  ad5e		       00		      byte.b	0
    140  ad5f		       00		      byte.b	0
    141  ad60		       00		      byte.b	0
    142  ad61		       00		      byte.b	0
    143  ad62		       00		      byte.b	0
    144  ad63		       00		      byte.b	0
    145  ad64		       00		      byte.b	0
    146  ad65		       00		      byte.b	0
    147  ad66		       00		      byte.b	0
    148  ad67		       00		      byte.b	0
    149  ad68		       00		      byte.b	0
    150  ad69		       00		      byte.b	0
    151  ad6a		       00		      byte.b	0
    152  ad6b		       00		      byte.b	0
    153  ad6c		       00		      byte.b	0
    154  ad6d		       00		      byte.b	0
    155  ad6e		       00		      byte.b	0
    156  ad6f		       00		      byte.b	0
    157  ad70		       00		      byte.b	0
    158  ad71		       00		      byte.b	0
    159  ad72		       00		      byte.b	0
    160  ad73		       00		      byte.b	0
    161  ad74		       00		      byte.b	0
    162  ad75		       00		      byte.b	0
    163  ad76		       00		      byte.b	0
    164  ad77		       00		      byte.b	0
    165  ad78		       00		      byte.b	0
    166  ad79		       00		      byte.b	0
    167  ad7a		       00		      byte.b	0
    168  ad7b		       00		      byte.b	0
    169  ad7c		       00		      byte.b	0
    170  ad7d		       00		      byte.b	0
    171  ad7e		       00		      byte.b	0
    172  ad7f		       ff		      byte.b	255
    173  ad80		       86		      byte.b	134
    174  ad81		       8d		      byte.b	141
    175  ad82		       93		      byte.b	147
    176  ad83		       99		      byte.b	153
    177  ad84		       9f		      byte.b	159
    178  ad85		       a4		      byte.b	164
    179  ad86		       aa		      byte.b	170
    180  ad87		       ae		      byte.b	174
    181  ad88		       b3		      byte.b	179
    182  ad89		       b7		      byte.b	183
    183  ad8a		       bb		      byte.b	187
    184  ad8b		       bf		      byte.b	191
    185  ad8c		       c3		      byte.b	195
    186  ad8d		       c6		      byte.b	198
    187  ad8e		       c9		      byte.b	201
    188  ad8f		       cc		      byte.b	204
    189  ad90		       cf		      byte.b	207
    190  ad91		       d2		      byte.b	210
    191  ad92		       d4		      byte.b	212
    192  ad93		       d7		      byte.b	215
    193  ad94		       d9		      byte.b	217
    194  ad95		       db		      byte.b	219
    195  ad96		       dd		      byte.b	221
    196  ad97		       df		      byte.b	223
    197  ad98		       e1		      byte.b	225
    198  ad99		       e2		      byte.b	226
    199  ad9a		       e4		      byte.b	228
    200  ad9b		       e6		      byte.b	230
    201  ad9c		       e7		      byte.b	231
    202  ad9d		       e8		      byte.b	232
    203  ad9e		       ea		      byte.b	234
    204  ad9f		       eb		      byte.b	235
    205  ada0		       ec		      byte.b	236
    206  ada1		       ed		      byte.b	237
    207  ada2		       ee		      byte.b	238
    208  ada3		       ef		      byte.b	239
    209  ada4		       00		      byte.b	0
    210  ada5		       00		      byte.b	0
    211  ada6		       00		      byte.b	0
    212  ada7		       00		      byte.b	0
    213  ada8		       00		      byte.b	0
    214  ada9		       00		      byte.b	0
    215  adaa		       00		      byte.b	0
    216  adab		       00		      byte.b	0
    217  adac		       00		      byte.b	0
    218  adad		       00		      byte.b	0
    219  adae		       00		      byte.b	0
    220  adaf		       00		      byte.b	0
    221  adb0		       00		      byte.b	0
    222  adb1		       00		      byte.b	0
    223  adb2		       00		      byte.b	0
    224  adb3		       00		      byte.b	0
    225  adb4		       00		      byte.b	0
    226  adb5		       00		      byte.b	0
    227  adb6		       00		      byte.b	0
    228  adb7		       00		      byte.b	0
    229  adb8		       00		      byte.b	0
    230  adb9		       00		      byte.b	0
    231  adba		       00		      byte.b	0
    232  adbb		       00		      byte.b	0
    233  adbc		       00		      byte.b	0
    234  adbd		       00		      byte.b	0
    235  adbe		       00		      byte.b	0
    236  adbf		       00		      byte.b	0
    237  adc0		       00		      byte.b	0
    238  adc1		       00		      byte.b	0
    239  adc2		       00		      byte.b	0
    240  adc3		       00		      byte.b	0
    241  adc4		       00		      byte.b	0
    242  adc5		       00		      byte.b	0
    243  adc6		       00		      byte.b	0
    244  adc7		       00		      byte.b	0
    245  adc8		       00		      byte.b	0
    246  adc9		       00		      byte.b	0
    247  adca		       00		      byte.b	0
    248  adcb		       00		      byte.b	0
    249  adcc		       00		      byte.b	0
    250  adcd		       00		      byte.b	0
    251  adce		       00		      byte.b	0
    252  adcf		       00		      byte.b	0
    253  add0		       00		      byte.b	0
    254  add1		       00		      byte.b	0
    255  add2		       00		      byte.b	0
    256  add3		       00		      byte.b	0
    257  add4		       00		      byte.b	0
    258  add5		       00		      byte.b	0
    259  add6		       00		      byte.b	0
    260  add7		       00		      byte.b	0
    261  add8		       00		      byte.b	0
    262  add9		       00		      byte.b	0
    263  adda		       00		      byte.b	0
    264  addb
    265  addb				   voice3lookup_alt
    266  addb		       00		      byte.b	0
    267  addc		       00		      byte.b	0
    268  addd		       00		      byte.b	0
    269  adde		       00		      byte.b	0
    270  addf		       00		      byte.b	0
    271  ade0		       00		      byte.b	0
    272  ade1		       00		      byte.b	0
    273  ade2		       00		      byte.b	0
    274  ade3		       00		      byte.b	0
    275  ade4		       00		      byte.b	0
    276  ade5		       00		      byte.b	0
    277  ade6		       00		      byte.b	0
    278  ade7		       00		      byte.b	0
    279  ade8		       00		      byte.b	0
    280  ade9		       00		      byte.b	0
    281  adea		       00		      byte.b	0
    282  adeb		       00		      byte.b	0
    283  adec		       00		      byte.b	0
    284  aded		       00		      byte.b	0
    285  adee		       00		      byte.b	0
    286  adef		       00		      byte.b	0
    287  adf0		       00		      byte.b	0
    288  adf1		       00		      byte.b	0
    289  adf2		       00		      byte.b	0
    290  adf3		       00		      byte.b	0
    291  adf4		       00		      byte.b	0
    292  adf5		       00		      byte.b	0
    293  adf6		       00		      byte.b	0
    294  adf7		       00		      byte.b	0
    295  adf8		       00		      byte.b	0
    296  adf9		       00		      byte.b	0
    297  adfa		       00		      byte.b	0
    298  adfb		       00		      byte.b	0
    299  adfc		       00		      byte.b	0
    300  adfd		       00		      byte.b	0
    301  adfe		       00		      byte.b	0
    302  adff		       00		      byte.b	0
    303  ae00		       00		      byte.b	0
    304  ae01		       00		      byte.b	0
    305  ae02		       00		      byte.b	0
    306  ae03		       00		      byte.b	0
    307  ae04		       00		      byte.b	0
    308  ae05		       00		      byte.b	0
    309  ae06		       00		      byte.b	0
    310  ae07		       00		      byte.b	0
    311  ae08		       00		      byte.b	0
    312  ae09		       00		      byte.b	0
    313  ae0a		       00		      byte.b	0
    314  ae0b		       ff		      byte.b	255
    315  ae0c		       86		      byte.b	134
    316  ae0d		       8d		      byte.b	141
    317  ae0e		       93		      byte.b	147
    318  ae0f		       99		      byte.b	153
    319  ae10		       9f		      byte.b	159
    320  ae11		       a4		      byte.b	164
    321  ae12		       aa		      byte.b	170
    322  ae13		       ae		      byte.b	174
    323  ae14		       b3		      byte.b	179
    324  ae15		       b7		      byte.b	183
    325  ae16		       bb		      byte.b	187
    326  ae17		       bf		      byte.b	191
    327  ae18		       c3		      byte.b	195
    328  ae19		       c6		      byte.b	198
    329  ae1a		       c9		      byte.b	201
    330  ae1b		       cc		      byte.b	204
    331  ae1c		       cf		      byte.b	207
    332  ae1d		       d2		      byte.b	210
    333  ae1e		       d4		      byte.b	212
    334  ae1f		       d7		      byte.b	215
    335  ae20		       d9		      byte.b	217
    336  ae21		       db		      byte.b	219
    337  ae22		       dd		      byte.b	221
    338  ae23		       df		      byte.b	223
    339  ae24		       e1		      byte.b	225
    340  ae25		       e2		      byte.b	226
    341  ae26		       e4		      byte.b	228
    342  ae27		       e6		      byte.b	230
    343  ae28		       e7		      byte.b	231
    344  ae29		       e8		      byte.b	232
    345  ae2a		       ea		      byte.b	234
    346  ae2b		       eb		      byte.b	235
    347  ae2c		       ec		      byte.b	236
    348  ae2d		       ed		      byte.b	237
    349  ae2e		       ee		      byte.b	238
    350  ae2f		       ef		      byte.b	239
    351  ae30		       00		      byte.b	0
    352  ae31		       00		      byte.b	0
    353  ae32		       00		      byte.b	0
    354  ae33		       00		      byte.b	0
    355  ae34		       00		      byte.b	0
    356  ae35		       00		      byte.b	0
    357  ae36		       00		      byte.b	0
    358  ae37		       00		      byte.b	0
    359  ae38		       00		      byte.b	0
    360  ae39		       00		      byte.b	0
    361  ae3a		       00		      byte.b	0
    362  ae3b		       00		      byte.b	0
    363  ae3c		       00		      byte.b	0
    364  ae3d		       00		      byte.b	0
    365  ae3e		       00		      byte.b	0
    366  ae3f		       00		      byte.b	0
    367  ae40		       00		      byte.b	0
    368  ae41		       00		      byte.b	0
    369  ae42		       00		      byte.b	0
    370  ae43		       00		      byte.b	0
    371  ae44		       00		      byte.b	0
    372  ae45		       00		      byte.b	0
    373  ae46		       00		      byte.b	0
    374  ae47		       00		      byte.b	0
    375  ae48		       00		      byte.b	0
    376  ae49		       00		      byte.b	0
    377  ae4a		       00		      byte.b	0
    378  ae4b		       00		      byte.b	0
    379  ae4c		       00		      byte.b	0
    380  ae4d		       00		      byte.b	0
    381  ae4e		       00		      byte.b	0
    382  ae4f		       00		      byte.b	0
    383  ae50		       00		      byte.b	0
    384  ae51		       00		      byte.b	0
    385  ae52		       00		      byte.b	0
    386  ae53		       00		      byte.b	0
    387  ae54		       00		      byte.b	0
    388  ae55		       00		      byte.b	0
    389  ae56		       00		      byte.b	0
    390  ae57		       00		      byte.b	0
    391  ae58		       00		      byte.b	0
    392  ae59		       00		      byte.b	0
    393  ae5a		       00		      byte.b	0
    394  ae5b
    395  ae5b
    396  ae5b				   voice4lookup_alt
    397  ae5b		       00		      byte.b	0
    398  ae5c		       00		      byte.b	0
    399  ae5d		       00		      byte.b	0
    400  ae5e		       00		      byte.b	0
    401  ae5f		       00		      byte.b	0
    402  ae60		       00		      byte.b	0
    403  ae61		       00		      byte.b	0
    404  ae62		       00		      byte.b	0
    405  ae63		       00		      byte.b	0
    406  ae64		       00		      byte.b	0
    407  ae65		       00		      byte.b	0
    408  ae66		       00		      byte.b	0
    409  ae67		       00		      byte.b	0
    410  ae68		       00		      byte.b	0
    411  ae69		       00		      byte.b	0
    412  ae6a		       00		      byte.b	0
    413  ae6b		       00		      byte.b	0
    414  ae6c		       00		      byte.b	0
    415  ae6d		       00		      byte.b	0
    416  ae6e		       00		      byte.b	0
    417  ae6f		       00		      byte.b	0
    418  ae70		       00		      byte.b	0
    419  ae71		       00		      byte.b	0
    420  ae72		       00		      byte.b	0
    421  ae73		       00		      byte.b	0
    422  ae74		       00		      byte.b	0
    423  ae75		       00		      byte.b	0
    424  ae76		       00		      byte.b	0
    425  ae77		       00		      byte.b	0
    426  ae78		       00		      byte.b	0
    427  ae79		       00		      byte.b	0
    428  ae7a		       00		      byte.b	0
    429  ae7b		       00		      byte.b	0
    430  ae7c		       00		      byte.b	0
    431  ae7d		       00		      byte.b	0
    432  ae7e		       00		      byte.b	0
    433  ae7f		       ff		      byte.b	255
    434  ae80		       86		      byte.b	134
    435  ae81		       8d		      byte.b	141
    436  ae82		       93		      byte.b	147
    437  ae83		       99		      byte.b	153
    438  ae84		       9f		      byte.b	159
    439  ae85		       a4		      byte.b	164
    440  ae86		       aa		      byte.b	170
    441  ae87		       ae		      byte.b	174
    442  ae88		       b3		      byte.b	179
    443  ae89		       b7		      byte.b	183
    444  ae8a		       bb		      byte.b	187
    445  ae8b		       bf		      byte.b	191
    446  ae8c		       c3		      byte.b	195
    447  ae8d		       c6		      byte.b	198
    448  ae8e		       c9		      byte.b	201
    449  ae8f		       cc		      byte.b	204
    450  ae90		       cf		      byte.b	207
    451  ae91		       d2		      byte.b	210
    452  ae92		       d4		      byte.b	212
    453  ae93		       d7		      byte.b	215
    454  ae94		       d9		      byte.b	217
    455  ae95		       db		      byte.b	219
    456  ae96		       dd		      byte.b	221
    457  ae97		       df		      byte.b	223
    458  ae98		       e1		      byte.b	225
    459  ae99		       e2		      byte.b	226
    460  ae9a		       e4		      byte.b	228
    461  ae9b		       e6		      byte.b	230
    462  ae9c		       e7		      byte.b	231
    463  ae9d		       e8		      byte.b	232
    464  ae9e		       ea		      byte.b	234
    465  ae9f		       eb		      byte.b	235
    466  aea0		       ec		      byte.b	236
    467  aea1		       ed		      byte.b	237
    468  aea2		       ee		      byte.b	238
    469  aea3		       ef		      byte.b	239
    470  aea4		       00		      byte.b	0
    471  aea5		       00		      byte.b	0
    472  aea6		       00		      byte.b	0
    473  aea7		       00		      byte.b	0
    474  aea8		       00		      byte.b	0
    475  aea9		       00		      byte.b	0
    476  aeaa		       00		      byte.b	0
    477  aeab		       00		      byte.b	0
    478  aeac		       00		      byte.b	0
    479  aead		       00		      byte.b	0
    480  aeae		       00		      byte.b	0
    481  aeaf		       00		      byte.b	0
    482  aeb0		       00		      byte.b	0
    483  aeb1		       00		      byte.b	0
    484  aeb2		       00		      byte.b	0
    485  aeb3		       00		      byte.b	0
    486  aeb4		       00		      byte.b	0
    487  aeb5		       00		      byte.b	0
    488  aeb6		       00		      byte.b	0
    489  aeb7		       00		      byte.b	0
    490  aeb8		       00		      byte.b	0
    491  aeb9		       00		      byte.b	0
    492  aeba		       00		      byte.b	0
    493  aebb		       00		      byte.b	0
    494  aebc		       00		      byte.b	0
    495  aebd		       00		      byte.b	0
    496  aebe		       00		      byte.b	0
    497  aebf		       00		      byte.b	0
    498  aec0		       00		      byte.b	0
    499  aec1		       00		      byte.b	0
    500  aec2		       00		      byte.b	0
    501  aec3		       00		      byte.b	0
    502  aec4		       00		      byte.b	0
    503  aec5		       00		      byte.b	0
    504  aec6		       00		      byte.b	0
    505  aec7		       00		      byte.b	0
    506  aec8		       00		      byte.b	0
    507  aec9		       00		      byte.b	0
    508  aeca		       00		      byte.b	0
    509  aecb		       00		      byte.b	0
    510  aecc		       00		      byte.b	0
    511  aecd		       00		      byte.b	0
    512  aece		       00		      byte.b	0
    513  aecf		       00		      byte.b	0
    514  aed0		       00		      byte.b	0
    515  aed1		       00		      byte.b	0
    516  aed2		       00		      byte.b	0
    517  aed3		       00		      byte.b	0
    518  aed4		       00		      byte.b	0
    519  aed5		       00		      byte.b	0
    520  aed6		       00		      byte.b	0
    521  aed7		       00		      byte.b	0
    522  aed8		       00		      byte.b	0
    523  aed9		       00		      byte.b	0
    524  aeda		       00		      byte.b	0
    525  aedb
    526  aedb							; EOF!
------- FILE vicmidi.asm
    830  aedb
    831  aedb							; ----------------------------------------------------------------------------
    832  aedb							; Binary includes
    833  aedb
    834  aedb				   fontorg
    835  aedb					      incbin	"font.bin"
    836  b2db
    837  b2db							; EOF!
