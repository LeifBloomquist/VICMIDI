------- FILE vicmidi.asm LEVEL 1 PASS 2
      1  a6e0 ????						; VIC-20 MIDI Interface
      2  a6e0 ????						; By David Viens and Leif Bloomquist
      3  a6e0 ????
      4  a6e0 ????						; This version is a merge of the version from November 18 2009
      5  a6e0 ????						; And the September 24th 2011 version modded to use STC16C450
      6  a6e0 ????						; Further updated at ECCC 2012
      7  a6e0 ????
      8  a6e0 ????						; --------------------------------------------------------------------------------------------------
      9  a6e0 ????
     10  a6e0 ????				      processor	6502	;  VIC-20
     11  a6e0 ????
     12  a6e0 ????						; Assume no memory expansion.
     13  a6e0 ????						; Compile as Cartridge ROM in Block 5.
     14  a000					      org	$A000	; Block 5
     15  a000
------- FILE macros.asm LEVEL 2 PASS 2
      0  a000					      include	"macros.asm"
      1  a000
      2  a000							; ==============================================================
      3  a000							; Macro wrapping the fast hex poke
      4  a000							; ==============================================================
      5  a000
      6  a000					      MAC	hexpoke
      7  a000					      lda	#<{1}	; Low byte
      8  a000					      sta	$22
      9  a000					      lda	#>{1}	; High byte
     10  a000					      sta	$23
     11  a000
     12  a000					      lda	{2}	; Note - address
     13  a000					      jsr	hexstr
     14  a000					      ENDM
     15  a000
     16  a000							; ==============================================================
     17  a000							; Macro to position the cursor
     18  a000							; ==============================================================
     19  a000
     20  a000					      MAC	plot
     21  a000					      ldy	#{1}
     22  a000					      ldx	#{2}
     23  a000					      clc
     24  a000					      jsr	$E50A	; PLOT - same on 64 and VIC
     25  a000					      ENDM
     26  a000
     27  a000							; ==============================================================
     28  a000							; Macro to print a string
     29  a000							; ==============================================================
     30  a000
     31  a000					      MAC	printstring
     32  a000					      ldy	#>{0}
     33  a000					      lda	#<{0}
     34  a000					      jsr	STROUT
     35  a000					      ENDM
     36  a000
     37  a000							; ==============================================================
     38  a000							; Macro to print a byte (Hex)
     39  a000							; ==============================================================
     40  a000
     41  a000					      MAC	printbyte
     42  a000					      ldx	#$00
     43  a000					      ldy	#$0F
     44  a000					      lda	{0}
     45  a000					      jsr	printnum
     46  a000					      ENDM
------- FILE vicmidi.asm
------- FILE equates.asm LEVEL 2 PASS 2
      0  a000					      include	"equates.asm"
      1  a000							; --------------------------------------------------------------------------------------------------
      2  a000							;;free zero page (to use as vars)
      3  a000							;INDEX1: $0022-$0023, First utility pointer		       used by HEXPOKE
      4  a000							;INDEX2: $0024-$0025, Second utility pointer		       bytesexpected, midicounter
      5  a000							;FORNAM: $0049-$004A, Pointer to FOR/NEXT index variable etc  channel
      6  a000							;TEMPF3: $004E-$0052, Temporary FLPT storage		       Used by keyboard routines
      7  a000							;TEMPF1: $0057-$005B, Temporary FLPT storage		       Used by setwave
      8  a000							;TEMPF2: $005C-$0060: Temporary FLPT storage		       FIFO pointers
      9  a000							;FAC:	  $0061-$0066, Floating-point Accumulator (FAC)        Flags for Poly mode
     10  a000							;AFAC:   $0069-$006E, Alternative/Auxilary FAC 	       69=last note
     11  a000
     12  a000		       00 24	   midicounter =	$24
     13  a000		       00 25	   bytesexpected =	$25
     14  a000
     15  a000		       00 49	   channel    =	$49
     16  a000
     17  a000		       00 5c	   write_pointer =	$5C	; FIFO current write pointer - incremented on byte received
     18  a000		       00 5d	   read_pointer =	$5D	; FIFO current read pointer - incremented on byte removed
     19  a000
     20  a000		       00 61	   poly_flags =	$61	; Flags for polymode
     21  a000							; Also 62,63,64
     22  a000
     23  a000		       00 69	   lastnote   =	$69	; Remembers last note, so Note Off applies to that note only
     24  a000							; Also 69,6A,6B
     25  a000
     26  a000		       00 6c	   temp1      =	$6C	; Used for screen colors
     27  a000		       00 6d	   tempx      =	$6D	; Used by program change
     28  a000
     29  a000							;*00FB-00FE  251-254  Operating system free zero page space
     30  a000		       00 fb	   statusbyte =	$FB
     31  a000		       00 fc	   mididata0  =	$FC
     32  a000		       00 fd	   mididata1  =	$FD
     33  a000		       00 fe	   mididata2  =	$FE	; If needed
     34  a000
     35  a000							; ---- Addresses ---------------------------------------------------
     36  a000							;previous keyboard column bits.  Moving this causes compilation errors?
     37  a000		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
     38  a000		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     39  a000		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     40  a000		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     41  a000
     42  a000							; ---- Addresses ---------------------------------------------------
     43  a000
     44  a000							; Setwave Target
     45  a000		       10 00	   setwave    =	$1000	; This is right at the start of BASIC space.  Code has to all be on one page.
     46  a000
     47  a000							; Input Buffer
     48  a000		       11 00	   buffer     =	$1100
     49  a000
     50  a000							; ST16C450 Registers
     51  a000		       9c 00	   UART_RXTX  =	$9C00
     52  a000		       9c 01	   UART_IER   =	$9C01
     53  a000		       9c 02	   UART_ISR   =	$9C02
     54  a000		       9c 03	   UART_LCR   =	$9C03
     55  a000		       9c 05	   UART_LSR   =	$9C05
     56  a000		       9c 07	   UART_SCRATCHPAD =	$9C07
     57  a000		       9c 00	   UART_DIVISOR_LSB =	$9C00	; Yes, same as above
     58  a000		       9c 01	   UART_DIVISOR_MSB =	$9C01
     59  a000
     60  a000							;Sound and Video Registers
     61  a000		       90 0a	   sound_voice1 =	$900A	; Frequency for oscillator 1 (low)    (on: 128-255)
     62  a000		       90 0b	   sound_voice2 =	$900B	; Frequency for oscillator 2 (medium) (on: 128-255)
     63  a000		       90 0c	   sound_voice3 =	$900C	; Frequency for oscillator 3 (high)   (on: 128-255)
     64  a000		       90 0d	   sound_noise =	$900D	; Frequency of noise source	       (on: 128-255)
     65  a000		       90 0e	   sound_volume =	$900E	; Bits 0-3 sets volume of all sound.  Bits 4-7 are auxiliary color information (not used)
     66  a000		       90 0f	   screen_colors =	$900F
     67  a000
     68  a000							;Screen locations
     69  a000		       1e 00	   screen_start =	$1E00
     70  a000		       1e 4d	   midi_display =	$1E4D
     71  a000		       1e 77	   voice_display =	$1E77
     72  a000		       1f f9	   spin_display =	$1FF9	; Lower-right corner
     73  a000		       97 f9	   spin_color =	spin_display + $7800
------- FILE vicmidi.asm
     18  a000
     19  a000							; ---- Startup Code ---------------------------------------------------
     20  a000		       09 a0		      dc.w	START	; Entry point for power up
     21  a002		       f7 a2		      dc.w	RESTORE	; Entry point for warm start (RESTORE)
     22  a004
     23  a004		       41 30 c3 c2*	      dc.b	"A0",$C3,$C2,$CD	; 'A0CBM' boot string
     24  a009
     25  a009				   START
     26  a009							;Kernel Init
     27  a009		       20 8d fd 	      jsr	$fd8d	; RAMTAS - Initialise System Constants
     28  a00c		       20 52 fd 	      jsr	$fd52	; Init Vectors
     29  a00f		       20 f9 fd 	      jsr	$fdf9	; Init I/O
     30  a012		       20 18 e5 	      jsr	$e518	; Init I/O
     31  a015
     32  a015							;BASIC Init (Partial)
     33  a015		       20 5b e4 	      jsr	$e45b	; Init Vectors
     34  a018		       20 a4 e3 	      jsr	$e3a4	; BASIC RAM
     35  a01b		       20 04 e4 	      jsr	$e404	; INIT Message (needed so keycheck routine below works)
     36  a01e
     37  a01e				   entry
     38  a01e		       20 e7 a2 	      jsr	titlescreen
     39  a021		       20 46 a3 	      jsr	setup_pal
     40  a024		       20 35 a4 	      jsr	setwavecopy
     41  a027		       20 76 a2 	      jsr	checkuart
     42  a02a		       20 b2 a2 	      jsr	setupirq
     43  a02d		       20 98 a2 	      jsr	resetuart
     44  a030
     45  a030							; Default to maximum volume
     46  a030		       a9 0f		      lda	#$0F
     47  a032		       20 7e a1 	      jsr	setvolume
     48  a035
     49  a035							; Initial Values
     50  a035		       a9 00		      lda	#$00
     51  a037		       85 24		      sta	midicounter	; midicounter=0
     52  a039		       85 fb		      sta	statusbyte	; statusbyte=0
     53  a03b		       85 fc		      sta	mididata0	; mididata0=0
     54  a03d		       85 fd		      sta	mididata1	; mididata1=0
     55  a03f		       85 fe		      sta	mididata2	; mididata2=0
     56  a041		       85 4e		      sta	c0	; no keys are pressed in 7F
     57  a043		       85 4f		      sta	c1	; no keys are pressed in BF
     58  a045		       85 50		      sta	c2	; no keys are pressed in FD
     59  a047		       85 51		      sta	c3	; no keys are pressed in FE
     60  a049		       85 69		      sta	lastnote+0	; Clear
     61  a04b		       85 6a		      sta	lastnote+1	;    last
     62  a04d		       85 6b		      sta	lastnote+2	;	note
     63  a04f		       85 61		      sta	poly_flags+0	; Clear
     64  a051		       85 62		      sta	poly_flags+1	;   poly
     65  a053		       85 63		      sta	poly_flags+2	;     flags
     66  a055		       8d f9 97 	      sta	spin_color
     67  a058		       85 5c		      sta	write_pointer
     68  a05a		       85 5d		      sta	read_pointer
     69  a05c
     70  a05c
     71  a05c		       a9 6c		      lda	#$6C
     72  a05e		       8d f9 1f 	      sta	spin_display
     73  a061
     74  a061							;;; ========================================================================
     75  a061							;;; main LOOP!
     76  a061				   loop
     77  a061		       ee f9 97 	      inc	spin_color	; Prove we aren't 'frozen'
     78  a064							;jsr GetKey	  ; create events from keyboard if needed
     79  a064
     80  a064		       a5 5d		      lda	read_pointer
     81  a066		       c5 5c		      cmp	write_pointer
     82  a068		       f0 f7		      beq	loop	; Pointers match, no data
     83  a06a							;;; ========================================================================
     84  a06a
     85  a06a							; We have data!
     86  a06a							; Advance pointer for next read
     87  a06a		       e6 5d		      inc	read_pointer
     88  a06c
     89  a06c							; Read current byte
     90  a06c		       aa		      tax		; Since A still contains the unincremented pointer
     91  a06d		       bd 00 11 	      lda	buffer,x
     92  a070
     93  a070							; If Bit 7 is set, it means it's a status byte and we need to prepare for a new message
     94  a070		       10 18		      bpl	data	; Not a status byte
     95  a072
     96  a072							; Store the status byte
     97  a072		       85 fb		      sta	statusbyte
     98  a074
     99  a074							; Reset the midi counter to 0
    100  a074		       a2 00		      ldx	#$00
    101  a076		       86 24		      stx	midicounter
    102  a078
    103  a078							; Also, check how many bytes we'll need - Normally 3, but 2 for Program Change
    104  a078		       29 f0		      and	#$F0	; Get the upper nybble
    105  a07a		       c9 c0		      cmp	#$C0	; Program change
    106  a07c		       d0 05		      bne	bytes2
    107  a07e
    108  a07e				   bytes1
    109  a07e		       a0 01		      ldy	#$01
    110  a080		       4c 85 a0 	      jmp	setbytes
    111  a083
    112  a083				   bytes2
    113  a083		       a0 02		      ldy	#$02
    114  a085
    115  a085				   setbytes
    116  a085		       84 25		      sty	bytesexpected
    117  a087		       4c 61 a0 	      jmp	loop	; Wait for next byte
    118  a08a
    119  a08a							; --------------------------------------------------------------------------------------------------
    120  a08a							; Store data byte
    121  a08a
    122  a08a				   data
    123  a08a		       a6 24		      ldx	midicounter	; What byte are we at?
    124  a08c		       95 fc		      sta	mididata0,x	; Store received midi data pointed by x
    125  a08e
    126  a08e		       e8		      inx		; x++
    127  a08f		       86 24		      stx	midicounter	; and store x
    128  a091
    129  a091		       e4 25		      cpx	bytesexpected	; Number of data bytes expected in this MIDI message (i.e. 2)
    130  a093		       f0 03		      beq	messageproc	; Complete MIDI message received.
    131  a095
    132  a095							; Not complete, wait for more bytes.
    133  a095		       4c 61 a0 	      jmp	loop
    134  a098
    135  a098							; --------------------------------------------------------------------------------------------------
    136  a098							; Process a complete MIDI message
    137  a098
    138  a098				   messageproc
    139  a098							; Reset midicounter back to 0 for next message - this might be redundant (see above line 100)
    140  a098		       a9 00		      lda	#$00
    141  a09a		       85 24		      sta	midicounter
    142  a09c
    143  a09c							; Display received message bytes
      0  a09c					      HEXPOKE	(midi_display+0),statusbyte
      1  a09c		       a9 4d		      lda	#<(midi_display+0)
      2  a09e		       85 22		      sta	$22
      3  a0a0		       a9 1e		      lda	#>(midi_display+0)
      4  a0a2		       85 23		      sta	$23
      5  a0a4
      6  a0a4		       a5 fb		      lda	statusbyte
      7  a0a6		       20 fa a2 	      jsr	hexstr
      0  a0a9					      HEXPOKE	(midi_display+3),mididata0
      1  a0a9		       a9 50		      lda	#<(midi_display+3)
      2  a0ab		       85 22		      sta	$22
      3  a0ad		       a9 1e		      lda	#>(midi_display+3)
      4  a0af		       85 23		      sta	$23
      5  a0b1
      6  a0b1		       a5 fc		      lda	mididata0
      7  a0b3		       20 fa a2 	      jsr	hexstr
      0  a0b6					      HEXPOKE	(midi_display+6),mididata1
      1  a0b6		       a9 53		      lda	#<(midi_display+6)
      2  a0b8		       85 22		      sta	$22
      3  a0ba		       a9 1e		      lda	#>(midi_display+6)
      4  a0bc		       85 23		      sta	$23
      5  a0be
      6  a0be		       a5 fd		      lda	mididata1
      7  a0c0		       20 fa a2 	      jsr	hexstr
    147  a0c3
    148  a0c3							; Save channel
    149  a0c3		       a5 fb		      lda	statusbyte
    150  a0c5		       29 0f		      and	#$0F
    151  a0c7		       85 49		      sta	channel
    152  a0c9
    153  a0c9							; Determine Command
    154  a0c9		       a5 fb		      lda	statusbyte	; Status Byte
    155  a0cb		       29 f0		      and	#$F0	; Get the upper nybble
    156  a0cd
    157  a0cd				   m8
    158  a0cd		       c9 80		      cmp	#$80	; Note Off
    159  a0cf		       d0 06		      bne	m9
    160  a0d1		       20 31 a1 	      jsr	noteoff
    161  a0d4		       4c 61 a0 	      jmp	loop
    162  a0d7
    163  a0d7				   m9
    164  a0d7		       c9 90		      cmp	#$90	; Note On
    165  a0d9		       d0 06		      bne	mb
    166  a0db		       20 f5 a0 	      jsr	noteon
    167  a0de		       4c 61 a0 	      jmp	loop
    168  a0e1
    169  a0e1				   mb
    170  a0e1		       c9 b0		      cmp	#$B0	; Control Change
    171  a0e3		       d0 06		      bne	mc
    172  a0e5		       20 4a a1 	      jsr	controlchange
    173  a0e8		       4c 61 a0 	      jmp	loop
    174  a0eb
    175  a0eb				   mc
    176  a0eb		       c9 c0		      cmp	#$C0	; Program Change
    177  a0ed		       d0 03		      bne	mx
    178  a0ef		       20 a9 a1 	      jsr	programchange
    179  a0f2							; Drop through
    180  a0f2				   mx
    181  a0f2							; All others (Aftertouch, etc.) ignored.
    182  a0f2		       4c 61 a0 	      jmp	loop
    183  a0f5
    184  a0f5
    185  a0f5							;******************************************************************************
    186  a0f5							;*************************  MIDI Processing  **********************************
    187  a0f5							;******************************************************************************
    188  a0f5
    189  a0f5							; ---- Note On ---------------------------------------------------
    190  a0f5							; 9c nn vv
    191  a0f5
    192  a0f5				   noteon
    193  a0f5							; Special Case: Treat Velocity=0 as Note Off.	Velocity ignored otherwise.
    194  a0f5		       a5 fd		      lda	mididata1
    195  a0f7		       f0 38		      beq	noteoff
    196  a0f9
    197  a0f9		       a4 49		      ldy	channel	; Y now contains Channel # (0-offset)
    198  a0fb		       a6 fc		      ldx	mididata0	; X now contains MIDI Note #
    199  a0fd
    200  a0fd							; Special Case: Channel 5 used for Poly mode
    201  a0fd		       c0 04		      cpy	#$04
    202  a0ff		       d0 03		      bne	savenote
    203  a101		       20 4f a3 	      jsr	get_poly_voice
    204  a104
    205  a104				   savenote
    206  a104							; Save the note# so that later Note Offs only apply to this note.
    207  a104		       8a		      txa
    208  a105		       99 69 00 	      sta	lastnote,y
    209  a108
    210  a108							; Perform a table lookup of MIDI Note# to VIC Register
    211  a108							; Table to use depends on voice/channel
    212  a108		       c0 00		      cpy	#$00
    213  a10a		       f0 0d		      beq	vl1
    214  a10c
    215  a10c		       c0 01		      cpy	#$01
    216  a10e		       f0 0f		      beq	vl2
    217  a110
    218  a110		       c0 02		      cpy	#$02
    219  a112		       f0 11		      beq	vl3
    220  a114
    221  a114		       c0 03		      cpy	#$03
    222  a116		       f0 13		      beq	vl4
    223  a118
    224  a118							; Ignore all other channels
    225  a118		       60		      rts
    226  a119
    227  a119				   vl1
    228  a119		       bd e0 a4 	      lda	voice1lookup,x
    229  a11c		       4c 1d a2 	      jmp	setvoice
    230  a11f
    231  a11f				   vl2
    232  a11f		       bd 60 a5 	      lda	voice2lookup,x
    233  a122		       4c 1d a2 	      jmp	setvoice
    234  a125
    235  a125				   vl3
    236  a125		       bd e0 a5 	      lda	voice3lookup,x
    237  a128		       4c 1d a2 	      jmp	setvoice
    238  a12b
    239  a12b				   vl4
    240  a12b		       bd 60 a6 	      lda	voice4lookup,x
    241  a12e		       4c 1d a2 	      jmp	setvoice
    242  a131
    243  a131
    244  a131							; ---- Note Off ---------------------------------------------------
    245  a131							; 8c nn vv
    246  a131
    247  a131				   noteoff
    248  a131		       a4 49		      ldy	channel	; Y now contains channel #
    249  a133
    250  a133							; Special Case: Channel 5 used for Poly mode
    251  a133		       c0 04		      cpy	#$04
    252  a135		       d0 06		      bne	noteoff_check
    253  a137
    254  a137		       20 64 a3 	      jsr	get_poly_voice_off
    255  a13a		       4c 44 a1 	      jmp	noteoff_off
    256  a13d
    257  a13d				   noteoff_check
    258  a13d							;For Channels 1-4
    259  a13d							;Check if it matches the last.  If not, ignore.
    260  a13d		       b9 69 00 	      lda	lastnote,y
    261  a140		       c5 fc		      cmp	mididata0
    262  a142		       d0 05		      bne	noteoff_x
    263  a144
    264  a144				   noteoff_off
    265  a144		       a9 00		      lda	#$00	; Off
    266  a146		       4c 1d a2 	      jmp	setvoice
    267  a149
    268  a149				   noteoff_x
    269  a149		       60		      rts
    270  a14a
    271  a14a							; ---- Control Change ---------------------------------------------------
    272  a14a							; Bc CC vv
    273  a14a
    274  a14a				   controlchange
    275  a14a		       a4 49		      ldy	channel	; Y now contains channel #
    276  a14c
    277  a14c		       a5 fc		      lda	mididata0	; Controller number
    278  a14e				   cc1
    279  a14e		       c9 01		      cmp	#01	; Modulation Wheel (coarse) - decimal
    280  a150		       d0 03		      bne	cc7
    281  a152		       4c 72 a1 	      jmp	modwheel
    282  a155
    283  a155				   cc7
    284  a155		       c9 07		      cmp	#07	; Volume (coarse) - decimal
    285  a157		       d0 03		      bne	cc74
    286  a159		       4c 79 a1 	      jmp	volume
    287  a15c
    288  a15c				   cc74
    289  a15c		       c9 4a		      cmp	#74	; Brightness - decimal
    290  a15e		       d0 03		      bne	cc120
    291  a160		       4c 90 a1 	      jmp	screencolors
    292  a163
    293  a163				   cc120
    294  a163		       c9 78		      cmp	#120	; All Sound Off - decimal
    295  a165		       d0 03		      bne	cc123
    296  a167		       4c a4 a1 	      jmp	soundoff
    297  a16a
    298  a16a				   cc123
    299  a16a		       c9 7b		      cmp	#123	; All Notes Off - decimal
    300  a16c		       d0 03		      bne	ccx
    301  a16e		       4c a4 a1 	      jmp	soundoff
    302  a171
    303  a171				   ccx			; Ignore all the rest
    304  a171		       60		      rts
    305  a172
    306  a172
    307  a172							; ---- MOD Wheel Controller --------------------------------------------
    308  a172							; Bc 01 vv
    309  a172
    310  a172							; Poke the data directly to the register, after OR'ing with $80
    311  a172				   modwheel
    312  a172		       a5 fd		      lda	mididata1
    313  a174		       09 80		      ora	#$80
    314  a176		       4c 1d a2 	      jmp	setvoice
    315  a179
    316  a179
    317  a179							; ---- Volume Controller ------------------------------------------------
    318  a179							; Bc 07 vv
    319  a179
    320  a179				   volume
    321  a179		       a5 fd		      lda	mididata1
    322  a17b		       4a		      lsr
    323  a17c		       4a		      lsr
    324  a17d		       4a		      lsr
    325  a17e
    326  a17e				   setvolume
    327  a17e		       8d 0e 90 	      sta	sound_volume
      0  a181					      HEXPOKE	(voice_display+110),sound_volume
      1  a181		       a9 e5		      lda	#<(voice_display+110)
      2  a183		       85 22		      sta	$22
      3  a185		       a9 1e		      lda	#>(voice_display+110)
      4  a187		       85 23		      sta	$23
      5  a189
      6  a189		       ad 0e 90 	      lda	sound_volume
      7  a18c		       20 fa a2 	      jsr	hexstr
    329  a18f		       60		      rts
    330  a190
    331  a190							; ---- Brightness Controller (used for screen color)-------------------------
    332  a190							; Bc 4a vv
    333  a190
    334  a190				   screencolors
    335  a190		       18		      clc
    336  a191		       a5 fd		      lda	mididata1	; 7-bit
    337  a193
    338  a193		       29 07		      and	#%00000111	; Get border
    339  a195		       85 6c		      sta	temp1
    340  a197
    341  a197		       a5 fd		      lda	mididata1
    342  a199		       29 78		      and	#%01111000	; Get background
    343  a19b		       0a		      asl		; Shift 1 bit left
    344  a19c
    345  a19c		       05 6c		      ora	temp1	; Put border back in
    346  a19e		       09 08		      ora	#%00001000	; No Reverse Mode
    347  a1a0
    348  a1a0		       8d 0f 90 	      sta	screen_colors
    349  a1a3		       60		      rts
    350  a1a4
    351  a1a4							; ---- Sound Off / All Notes Off Controller------------------------------------
    352  a1a4							; Bc 78 xx
    353  a1a4							; Bc 7B xx
    354  a1a4
    355  a1a4				   soundoff
    356  a1a4		       a9 00		      lda	#$00	; Off
    357  a1a6		       4c 1d a2 	      jmp	setvoice
    358  a1a9
    359  a1a9
    360  a1a9							; ---- Program Change ---------------------------------------------------
    361  a1a9							; Cc pn  <NOTE 2 bytes!>
    362  a1a9
    363  a1a9				   programchange
    364  a1a9							;Blank the unused MIDI byte
    365  a1a9		       a9 2d		      lda	#45	; -
    366  a1ab		       8d 53 1e 	      sta	midi_display+6
    367  a1ae		       8d 54 1e 	      sta	midi_display+7
    368  a1b1
    369  a1b1		       a4 49		      ldy	channel	; Y now contains channel #
    370  a1b3
    371  a1b3				   pc_0
    372  a1b3		       c0 00		      cpy	#$00
    373  a1b5		       d0 10		      bne	pc_1
      0  a1b7					      HEXPOKE	(voice_display+5),mididata0
      1  a1b7		       a9 7c		      lda	#<(voice_display+5)
      2  a1b9		       85 22		      sta	$22
      3  a1bb		       a9 1e		      lda	#>(voice_display+5)
      4  a1bd		       85 23		      sta	$23
      5  a1bf
      6  a1bf		       a5 fc		      lda	mididata0
      7  a1c1		       20 fa a2 	      jsr	hexstr
    375  a1c4		       4c 04 a2 	      jmp	pc_do
    376  a1c7
    377  a1c7				   pc_1
    378  a1c7		       c0 01		      cpy	#$01
    379  a1c9		       d0 10		      bne	pc_2
      0  a1cb					      HEXPOKE	(voice_display+27),mididata0
      1  a1cb		       a9 92		      lda	#<(voice_display+27)
      2  a1cd		       85 22		      sta	$22
      3  a1cf		       a9 1e		      lda	#>(voice_display+27)
      4  a1d1		       85 23		      sta	$23
      5  a1d3
      6  a1d3		       a5 fc		      lda	mididata0
      7  a1d5		       20 fa a2 	      jsr	hexstr
    381  a1d8		       4c 04 a2 	      jmp	pc_do
    382  a1db
    383  a1db				   pc_2
    384  a1db		       c0 02		      cpy	#$02
    385  a1dd		       d0 10		      bne	pc_3
      0  a1df					      HEXPOKE	(voice_display+49),mididata0
      1  a1df		       a9 a8		      lda	#<(voice_display+49)
      2  a1e1		       85 22		      sta	$22
      3  a1e3		       a9 1e		      lda	#>(voice_display+49)
      4  a1e5		       85 23		      sta	$23
      5  a1e7
      6  a1e7		       a5 fc		      lda	mididata0
      7  a1e9		       20 fa a2 	      jsr	hexstr
    387  a1ec		       4c 04 a2 	      jmp	pc_do
    388  a1ef
    389  a1ef				   pc_3
    390  a1ef		       c0 03		      cpy	#$03
    391  a1f1		       d0 10		      bne	pc_rts
      0  a1f3					      HEXPOKE	(voice_display+71),mididata0
      1  a1f3		       a9 be		      lda	#<(voice_display+71)
      2  a1f5		       85 22		      sta	$22
      3  a1f7		       a9 1e		      lda	#>(voice_display+71)
      4  a1f9		       85 23		      sta	$23
      5  a1fb
      6  a1fb		       a5 fc		      lda	mididata0
      7  a1fd		       20 fa a2 	      jsr	hexstr
    393  a200		       4c 04 a2 	      jmp	pc_do
    394  a203
    395  a203							;Ignore all other channels
    396  a203				   pc_rts
    397  a203		       60		      rts
    398  a204
    399  a204
    400  a204				   pc_do
    401  a204		       a4 49		      ldy	channel	; Y now contains channel # (0-3) (temp)
    402  a206
    403  a206		       b9 0a 90 	      lda	sound_voice1,y
    404  a209		       85 6d		      sta	tempx	; See below
    405  a20b
    406  a20b		       b9 dc a4 	      lda	voice_to_register,y
    407  a20e		       a8		      tay		; Y Now contains low byte of register
    408  a20f
    409  a20f		       a5 fc		      lda	mididata0
    410  a211		       29 0f		      and	#$0f	; Get low nybble, since there are only 16 viznut waveforms
    411  a213		       aa		      tax
    412  a214		       bd 21 a4 	      lda	viznutwaveforms,x	; A now contains the desired shift register contents
    413  a217
    414  a217		       a6 6d		      ldx	tempx	; X now contains initial frequency of selected channel
    415  a219
    416  a219							; X,Y,A are set - Set the waveform.
    417  a219		       20 00 10 	      jsr	setwave
    418  a21c		       60		      rts
    419  a21d
    420  a21d
    421  a21d							;***************************************************************************
    422  a21d							;*******************  Set/Display Functions  *******************************
    423  a21d							;***************************************************************************
    424  a21d
    425  a21d							; Dispatcher for setting the appropriate voice.
    426  a21d							; Channel# in Y (Channel 0 = Voice 1, etc)
    427  a21d							; Value to set it to in A.
    428  a21d
    429  a21d				   setvoice
    430  a21d		       c0 00		      cpy	#$00
    431  a21f		       f0 0d		      beq	v1
    432  a221
    433  a221		       c0 01		      cpy	#$01
    434  a223		       f0 1b		      beq	v2
    435  a225
    436  a225		       c0 02		      cpy	#$02
    437  a227		       f0 29		      beq	v3
    438  a229
    439  a229		       c0 03		      cpy	#$03
    440  a22b		       f0 37		      beq	v4
    441  a22d
    442  a22d							; Ignore all other channels
    443  a22d		       60		      rts
    444  a22e
    445  a22e							; ---- Voice 1 -------
    446  a22e				   v1
    447  a22e		       8d 0a 90 	      sta	sound_voice1
      0  a231					      HEXPOKE	(voice_display+00),sound_voice1
      1  a231		       a9 77		      lda	#<(voice_display+00)
      2  a233		       85 22		      sta	$22
      3  a235		       a9 1e		      lda	#>(voice_display+00)
      4  a237		       85 23		      sta	$23
      5  a239
      6  a239		       ad 0a 90 	      lda	sound_voice1
      7  a23c		       20 fa a2 	      jsr	hexstr
    449  a23f		       60		      rts
    450  a240
    451  a240							; ---- Voice 2 -------
    452  a240				   v2
    453  a240		       8d 0b 90 	      sta	sound_voice2
      0  a243					      HEXPOKE	(voice_display+22),sound_voice2
      1  a243		       a9 8d		      lda	#<(voice_display+22)
      2  a245		       85 22		      sta	$22
      3  a247		       a9 1e		      lda	#>(voice_display+22)
      4  a249		       85 23		      sta	$23
      5  a24b
      6  a24b		       ad 0b 90 	      lda	sound_voice2
      7  a24e		       20 fa a2 	      jsr	hexstr
    455  a251		       60		      rts
    456  a252
    457  a252							; ---- Voice 3 -------
    458  a252				   v3
    459  a252		       8d 0c 90 	      sta	sound_voice3
      0  a255					      HEXPOKE	(voice_display+44),sound_voice3
      1  a255		       a9 a3		      lda	#<(voice_display+44)
      2  a257		       85 22		      sta	$22
      3  a259		       a9 1e		      lda	#>(voice_display+44)
      4  a25b		       85 23		      sta	$23
      5  a25d
      6  a25d		       ad 0c 90 	      lda	sound_voice3
      7  a260		       20 fa a2 	      jsr	hexstr
    461  a263		       60		      rts
    462  a264
    463  a264							; ---- Voice 4 -------
    464  a264				   v4
    465  a264		       8d 0d 90 	      sta	sound_noise
      0  a267					      HEXPOKE	(voice_display+66),sound_noise
      1  a267		       a9 b9		      lda	#<(voice_display+66)
      2  a269		       85 22		      sta	$22
      3  a26b		       a9 1e		      lda	#>(voice_display+66)
      4  a26d		       85 23		      sta	$23
      5  a26f
      6  a26f		       ad 0d 90 	      lda	sound_noise
      7  a272		       20 fa a2 	      jsr	hexstr
    467  a275		       60		      rts
    468  a276
    469  a276							;***************************************************************************
    470  a276							;*******************	 Hardware Functions   *******************************
    471  a276							;***************************************************************************
    472  a276
    473  a276							; ----------------------------------------------------------------------------
    474  a276							; Confirm the presence of the ST16C450 UART
    475  a276				   checkuart
    476  a276		       a9 55		      lda	#$55
    477  a278		       8d 07 9c 	      sta	UART_SCRATCHPAD
    478  a27b
    479  a27b		       ad 07 9c 	      lda	UART_SCRATCHPAD
    480  a27e		       c9 55		      cmp	#$55
    481  a280		       f0 15		      beq	checkuart_ok
    482  a282
    483  a282							; Not found!
      0  a282					      PLOT	0,20
      1  a282		       a0 00		      ldy	#0
      2  a284		       a2 14		      ldx	#20
      3  a286		       18		      clc
      4  a287		       20 0a e5 	      jsr	$E50A
      0  a28a					      PRINTSTRING	"**uart NOT FOUND! ***"
      1  a28a		       a0 2a		      ldy	#>"**uart NOT FOUND! ***"
      2  a28c		       a9 2a		      lda	#<"**uart NOT FOUND! ***"
      3  a28e		       20 1e cb 	      jsr	STROUT
    486  a291
    487  a291				   uloop
    488  a291		       ee 0f 90 	      inc	screen_colors
    489  a294		       4c 91 a2 	      jmp	uloop
    490  a297
    491  a297				   checkuart_ok
    492  a297		       60		      rts
    493  a298
    494  a298							; ----------------------------------------------------------------------------
    495  a298							; Set up the UART
    496  a298
    497  a298				   resetuart
    498  a298							; Expose the divisor latch.
    499  a298		       a9 80		      lda	#%10000000
    500  a29a		       8d 03 9c 	      sta	UART_LCR
    501  a29d
    502  a29d							; Set the MIDI baud rate.
    503  a29d							; The ST16C450 datasheet says that it divides the input clock rate by
    504  a29d							; 16, so with a 2Mhz crystal on board, that gives
    505  a29d							; 2000000 * (1/16) * (1/x) = 31250.  Solving gives x=4 for the low
    506  a29d							; byte of the divisor, and 0 for the high byte.
    507  a29d
    508  a29d		       a2 00		      ldx	#$00
    509  a29f		       a0 04		      ldy	#$04
    510  a2a1		       8e 01 9c 	      stx	UART_DIVISOR_MSB
    511  a2a4		       8c 00 9c 	      sty	UART_DIVISOR_LSB
    512  a2a7
    513  a2a7							; Set to MIDI: Word length 8, Stop bits 1, no parity (also hides divisor latch)
    514  a2a7		       a9 03		      lda	#%00000011
    515  a2a9		       8d 03 9c 	      sta	UART_LCR
    516  a2ac
    517  a2ac							; Enable the interrupt when data is received
    518  a2ac		       a9 01		      lda	#%00000001
    519  a2ae		       8d 01 9c 	      sta	UART_IER
    520  a2b1		       60		      rts
    521  a2b2
    522  a2b2							; ----------------------------------------------------------------------------
    523  a2b2							; Set up the IRQ for reading bytes from the UART
    524  a2b2
    525  a2b2				   setupirq
    526  a2b2		       78		      sei
    527  a2b3
    528  a2b3							; Point to my interrupt vector
    529  a2b3		       a9 c7		      lda	#<theirq
    530  a2b5		       8d 14 03 	      sta	$0314
    531  a2b8		       a9 a2		      lda	#>theirq
    532  a2ba		       8d 15 03 	      sta	$0315
    533  a2bd
    534  a2bd							; Disable timer interrupts
    535  a2bd
    536  a2bd		       a9 60		      lda	#%01100000
    537  a2bf		       8d 2e 91 	      sta	$912e	; disable and acknowledge interrupts
    538  a2c2		       8d 2d 91 	      sta	$912d
    539  a2c5							;sta $911e	; disable NMIs (Restore key)
    540  a2c5
    541  a2c5		       58		      cli
    542  a2c6		       60		      rts
    543  a2c7
    544  a2c7							; ----------------------------------------------------------------------------
    545  a2c7							; The IRQ.
    546  a2c7
    547  a2c7				   theirq
    548  a2c7							; Fetch the received byte
    549  a2c7		       ad 00 9c 	      lda	UART_RXTX	;get data
    550  a2ca		       a4 5c		      ldy	write_pointer
    551  a2cc		       99 00 11 	      sta	buffer,y
    552  a2cf		       e6 5c		      inc	write_pointer
    553  a2d1
    554  a2d1							; Clear the interrupt from the UART by reading the status register
    555  a2d1		       ad 02 9c 	      lda	UART_ISR
    556  a2d4
    557  a2d4		       4c 56 ff 	      jmp	$ff56	; Use this in place of rti because it restores the A,X,Y registers from the stack
    558  a2d7							;jmp $eabf	; return to normal IRQ	(scans keyboard and stuff)
    559  a2d7
    560  a2d7							; ----------------------------------------------------------------------------
    561  a2d7
    562  a2d7				   setcolors
    563  a2d7		       a2 00		      ldx	#$00
    564  a2d9		       a9 00		      lda	#$00
    565  a2db				   setcolorsloop
    566  a2db		       9d 00 96 	      sta	$9600,x
    567  a2de		       9d 00 97 	      sta	$9700,x
    568  a2e1		       e8		      inx
    569  a2e2		       e0 00		      cpx	#$00
    570  a2e4		       d0 f5		      bne	setcolorsloop
    571  a2e6		       60		      rts
    572  a2e7
    573  a2e7							; ----------------------------------------------------------------------------
    574  a2e7							; Draw Title Screen
    575  a2e7
    576  a2e7				   titlescreen
    577  a2e7		       20 5f e5 	      jsr	CLRSCREEN
    578  a2ea		       a9 06		      lda	#$06	; Blue
    579  a2ec		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a2ef					      PRINTSTRING	maintext
      1  a2ef		       a0 a4		      ldy	#>maintext
      2  a2f1		       a9 41		      lda	#<maintext
      3  a2f3		       20 1e cb 	      jsr	STROUT
    581  a2f6		       60		      rts
    582  a2f7
    583  a2f7							; ----------------------------------------------------------------------------
    584  a2f7							; Handle the RESTORE key
    585  a2f7
    586  a2f7				   RESTORE
    587  a2f7		       4c c7 fe 	      jmp	$fec7	; Continue as if no cartridge installed
    588  a2fa
    589  a2fa							; ----------------------------------------------------------------------------
    590  a2fa							; More includes
    591  a2fa
------- FILE utils.asm LEVEL 2 PASS 2
      0  a2fa					      include	"utils.asm"
      1  a2fa							; VIC Version by Schema/AIC (Leif Bloomquist)
      2  a2fa							; Original by Six/Style (Oliver VieBrooks)
      3  a2fa
      4  a2fa							; Kernal/BASIC Routines
      5  a2fa		       f2 7a	   CHROUT     =	$f27a
      6  a2fa		       e5 5f	   CLRSCREEN  =	$e55f
      7  a2fa		       e5 81	   HOME       =	$E581
      8  a2fa		       cb 1e	   STROUT     =	$CB1E	; Print string pointed to by (A/Y) until zero byte.
      9  a2fa
     10  a2fa		       00 08	   CG_DCS     =	8	;disable shift+C=
     11  a2fa		       00 09	   CG_ECS     =	9	;enable shift+C=
     12  a2fa
     13  a2fa		       00 0e	   CG_LCS     =	14	;switch to lowercase
     14  a2fa		       00 8e	   CG_UCS     =	142	;switch to uppercase
     15  a2fa
     16  a2fa							;cursor movement
     17  a2fa		       00 13	   CS_HOM     =	19
     18  a2fa		       00 91	   CS_U       =	145
     19  a2fa		       00 11	   CS_D       =	17
     20  a2fa		       00 9d	   CS_L       =	157
     21  a2fa		       00 1d	   CS_R       =	29
     22  a2fa
     23  a2fa		       00 0d	   CRLF       =	13
     24  a2fa
     25  a2fa							; Fast POKE of hex value to screen
     26  a2fa							; also see HEXPOKE macro
     27  a2fa							; print hex  char $ of number in a at location referenced by screen_temp
     28  a2fa
     29  a2fa				   hexstr
     30  a2fa		       a0 00		      ldy	#$00
     31  a2fc		       48		      pha
     32  a2fd		       29 f0		      and	#$f0
     33  a2ff		       18		      clc
     34  a300		       4a		      lsr
     35  a301		       4a		      lsr
     36  a302		       4a		      lsr
     37  a303		       4a		      lsr
     38  a304		       aa		      tax
     39  a305		       bd 36 a3 	      lda	hexstring,x
     40  a308		       91 22		      sta	($22),y
     41  a30a
     42  a30a		       c8		      iny
     43  a30b		       68		      pla
     44  a30c		       29 0f		      and	#$0f
     45  a30e		       aa		      tax
     46  a30f		       bd 36 a3 	      lda	hexstring,x
     47  a312		       91 22		      sta	($22),y
     48  a314		       60		      rts
     49  a315
     50  a315
     51  a315							; print hex  char $ of number in a    SLOW!
     52  a315		       00	   hexx       dc.b	$00
     53  a316
     54  a316				   printhexstr
     55  a316		       8e 15 a3 	      stx	hexx
     56  a319		       48		      pha
     57  a31a		       29 f0		      and	#$f0
     58  a31c		       18		      clc
     59  a31d		       4a		      lsr
     60  a31e		       4a		      lsr
     61  a31f		       4a		      lsr
     62  a320		       4a		      lsr
     63  a321		       aa		      tax
     64  a322		       bd 36 a3 	      lda	hexstring,x
     65  a325		       20 d2 ff 	      jsr	$ffd2
     66  a328
     67  a328		       68		      pla
     68  a329		       29 0f		      and	#$0f
     69  a32b		       aa		      tax
     70  a32c		       bd 36 a3 	      lda	hexstring,x
     71  a32f		       20 d2 ff 	      jsr	$ffd2
     72  a332		       ae 15 a3 	      ldx	hexx
     73  a335		       60		      rts
     74  a336
     75  a336				   hexstring
     76  a336		       30 31 32 33*	      .byte.b	"0123456789ABCDEF"
     77  a346
     78  a346
     79  a346							; ==============================================================
     80  a346							; All defaults are NTSC.  This code overrides for PAL.
     81  a346							; ==============================================================
     82  a346
     83  a346				   setup_pal
     84  a346							;PLOT 13,9
     85  a346
     86  a346		       ad e4 ed 	      lda	$EDE4
     87  a349		       c9 0c		      cmp	#$0C
     88  a34b		       f0 01		      beq	DOPAL
     89  a34d
     90  a34d							; NTSC System detected, don't change anything
     91  a34d							;PRINTSTRING "ntsc"
     92  a34d		       60		      rts
     93  a34e
     94  a34e							; PAL System detected, make changes
     95  a34e				   DOPAL
     96  a34e
     97  a34e							;PRINTSTRING "pal"
     98  a34e							; TODO, set default bank
     99  a34e
    100  a34e		       60		      rts
------- FILE vicmidi.asm
------- FILE polymode.asm LEVEL 2 PASS 2
      0  a34f					      include	"polymode.asm"
      1  a34f
      2  a34f							;***************************************************************************
      3  a34f							;***************  Determine next Channel in Poly Mode (set Y) **************
      4  a34f							;***************************************************************************
      5  a34f				   get_poly_voice
      6  a34f		       a0 00		      ldy	#$00
      7  a351
      8  a351				   get_poly_voice_loop
      9  a351		       b9 61 00 	      lda	poly_flags,y	; 0=not in use, 1=in use
     10  a354		       f0 08		      beq	get_poly_voice_x
     11  a356		       c8		      iny
     12  a357		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     13  a359		       d0 f6		      bne	get_poly_voice_loop
     14  a35b
     15  a35b							; No free voices, ignore
     16  a35b		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note On code
     17  a35d		       60		      rts
     18  a35e
     19  a35e				   get_poly_voice_x
     20  a35e		       a9 01		      lda	#$01
     21  a360		       99 61 00 	      sta	poly_flags,y
     22  a363		       60		      rts
     23  a364
     24  a364
     25  a364							;***************************************************************************
     26  a364							;********  Determine Channel to turn off in Poly Mode (set Y) **************
     27  a364							;***************************************************************************
     28  a364				   get_poly_voice_off
     29  a364
     30  a364		       a0 00		      ldy	#$00
     31  a366
     32  a366				   get_poly_voice_off_loop
     33  a366		       b9 61 00 	      lda	poly_flags,y	; Is the channel in use?
     34  a369		       f0 07		      beq	poly_next	; No, so skip it
     35  a36b
     36  a36b		       b9 69 00 	      lda	lastnote,y	; Get last note on this voice
     37  a36e		       c5 fc		      cmp	mididata0	; Compare to note received
     38  a370		       f0 0b		      beq	get_poly_voice_off_x	; Matched!
     39  a372
     40  a372				   poly_next
     41  a372		       c8		      iny		; Next channel
     42  a373		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     43  a375		       d0 ef		      bne	get_poly_voice_off_loop
     44  a377
     45  a377							; No match to the note to turn off, ignore
     46  a377		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note Off code
     47  a379		       ee 0f 90 	      inc	screen_colors	; DEBUG
     48  a37c		       60		      rts
     49  a37d
     50  a37d				   get_poly_voice_off_x
     51  a37d		       a9 00		      lda	#$00
     52  a37f		       99 61 00 	      sta	poly_flags,y
     53  a382		       60		      rts
     54  a383
------- FILE vicmidi.asm
------- FILE keyboard.asm LEVEL 2 PASS 2
      0  a383					      include	"keyboard.asm"
      1  a383							;*******************************************************************************************
      2  a383							;********************************  keyboard stuff  *****************************************
      3  a383							;*******************************************************************************************
      4  a383
      5  a383							; --------------------------------------------------------------------------------------------------
      6  a383							;;;;;;;;;;;;;;; keyboard stuff
      7  a383							;previous keyboard column bits
      8  a383		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
      9  a383		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     10  a383		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     11  a383		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     12  a383
     13  a383		       91 20	   kb_column  =	$9120
     14  a383		       91 21	   kb_row     =	$9121
     15  a383
     16  a383							; 9121   9120: (Write column value to this address)
     17  a383							;
     18  a383							;	  7f	  bf	  df	  ef	  f7	  fb	  fd	  fe
     19  a383							;
     20  a383							;  fe	  2	  q	  CBM	  Space   RunStop Control Lft_arr 1
     21  a383							;  fd	  4	  e	  s	  z	  Shift_L a	  w	  3
     22  a383							;  fb	  6	  t	  f	  c	  x	  d	  r	  5
     23  a383							;  f7	  8	  u	  h	  b	  v	  g	  y	  7
     24  a383							;  ef	  0	  o	  k	  m	  n	  j	  i	  9
     25  a383							;  df	  -	  @	  :	  .	  ,	  l	  p	  +
     26  a383							;  bf	  Home	  Up_arr  =	  Shift_R /	  ;	  *	  GBP
     27  a383							;  7f	  F7	  F5	  F3	  F1	  Down	  Right   Return  Del
     28  a383
     29  a383				   GetKey
     30  a383		       78		      sei
     31  a384							; this should not be done, we want to compare the OLD recorded status with new one
     32  a384							;lda #$0
     33  a384							;sta kb_column
     34  a384							;lda kb_row
     35  a384							;cmp #$FF
     36  a384							;beq NoKey	 ; no key at all pressed
     37  a384
     38  a384				   Check7F
     39  a384							;now check for each column
     40  a384		       a9 7f		      lda	#$7F
     41  a386		       8d 20 91 	      sta	kb_column
     42  a389		       ad 21 91 	      lda	kb_row
     43  a38c		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     44  a38e		       c5 4e		      cmp	c0
     45  a390		       f0 08		      beq	CheckBF	; these arent the droids you are looking for move along
     46  a392		       85 4e		      sta	c0
     47  a394		       8d 00 1e 	      sta	$1E00
     48  a397		       4c d9 a3 	      jmp	KeyDone
     49  a39a				   CheckBF
     50  a39a							;now check for each column
     51  a39a		       a9 bf		      lda	#$BF
     52  a39c		       8d 20 91 	      sta	kb_column
     53  a39f		       ad 21 91 	      lda	kb_row
     54  a3a2		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     55  a3a4		       c5 4f		      cmp	c1
     56  a3a6		       f0 08		      beq	CheckFD	; these arent the droids you are looking for move along
     57  a3a8		       85 4f		      sta	c1
     58  a3aa		       8d 01 1e 	      sta	$1E01
     59  a3ad		       4c d9 a3 	      jmp	KeyDone
     60  a3b0				   CheckFD
     61  a3b0							;now check for each column
     62  a3b0		       a9 fd		      lda	#$FD
     63  a3b2		       8d 20 91 	      sta	kb_column
     64  a3b5		       ad 21 91 	      lda	kb_row
     65  a3b8		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     66  a3ba		       c5 50		      cmp	c2
     67  a3bc		       f0 08		      beq	CheckFE	; these arent the droids you are looking for move along
     68  a3be		       85 50		      sta	c2
     69  a3c0		       8d 02 1e 	      sta	$1E02
     70  a3c3		       4c d9 a3 	      jmp	KeyDone
     71  a3c6				   CheckFE
     72  a3c6							;now check for each column
     73  a3c6		       a9 fe		      lda	#$FE
     74  a3c8		       8d 20 91 	      sta	kb_column
     75  a3cb		       ad 21 91 	      lda	kb_row
     76  a3ce		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     77  a3d0		       c5 51		      cmp	c3
     78  a3d2		       f0 05		      beq	KeyDone	; these arent the droids you are looking for move along
     79  a3d4		       85 51		      sta	c3
     80  a3d6		       8d 03 1e 	      sta	$1E03
     81  a3d9				   KeyDone
     82  a3d9		       58		      cli
     83  a3da		       60		      rts
     84  a3db
     85  a3db							; ---------------------------------------------------------------------------
     86  a3db
     87  a3db				   setchars
     88  a3db		       a2 00		      ldx	#$00
     89  a3dd		       a9 51		      lda	#$51
     90  a3df				   setcharsloop1
     91  a3df		       9d 00 1e 	      sta	$1E00,x
     92  a3e2		       e8		      inx
     93  a3e3		       e0 00		      cpx	#$00
     94  a3e5		       d0 f8		      bne	setcharsloop1
     95  a3e7		       a2 00		      ldx	#$00
     96  a3e9		       a9 66		      lda	#$66
     97  a3eb				   setcharsloop2
     98  a3eb		       9d 00 1f 	      sta	$1F00,x
     99  a3ee		       e8		      inx
    100  a3ef		       e0 00		      cpx	#$00
    101  a3f1		       d0 f8		      bne	setcharsloop2
    102  a3f3		       60		      rts
------- FILE vicmidi.asm
    595  a3f4				   setwaveorg
------- FILE setwave.asm LEVEL 2 PASS 2
      0  a3f4					      include	"setwave.asm"
      1  a3f4							;A short generic routine for setting any shift register value for any pulse
      2  a3f4							;channel in about 150 cpu clocks. Use it freely.
      3  a3f4
      4  a3f4		       00 57	   TMP	      =	$57
      5  a3f4		       00 58	   TMP2       =	$58
      6  a3f4
      7  a3f4							; USAGE: y = channel ($0a..$0c)
      8  a3f4							;	  x = initial frequency
      9  a3f4							;	  a = shift register contents
     10  a3f4							;
     11  a3f4							; WARNING for purists: self-modifying code, illegal opcodes.
     12  a3f4							;
     13  a3f4							; code align assertion: make sure that the loop is within a page.
     14  a3f4							; oscillator assertion: make sure that the channel has been at $7e
     15  a3f4							; for some time before calling this function.
     16  a3f4							; put TMP and TMP2 in the zero page.
     17  a3f4
     18  a3f4		       8e 16 a4 	      stx	initfreq	; 4
     19  a3f7
     20  a3f7		       8c 05 a4 	      sty	ch0	; 4
     21  a3fa		       8c 10 a4 	      sty	ch1	; 4
     22  a3fd		       be 14 a4 	      ldx	ldfqmasks-$a,y	; 4
     23  a400		       85 57		      sta	TMP	; 3
     24  a402
     25  a402		       09 7f		      ora	#$7f	; 2
     26  a404
     27  a404		       8f 0c 90 	      .byte.b	$8f,$0C,$90	; axs $900c  ; 4  [$900c] = a AND x	     *ILLEGAL OPCODE*
     28  a407
     29  a407		       a4 05	   ch0	      =	*-2
     30  a407		       84 58		      sty	TMP2	; 3
     31  a409		       a0 07		      ldy	#7	; 2
     32  a40b
     33  a40b				   l0
     34  a40b		       a9 7f		      lda	#$7f	; 2
     35  a40d		       07 57		      .byte.b	$07,TMP	; aso TMP		 ; 5  asl tmp; a = [tmp] OR $7f  *ILLEGAL OPCODE*
     36  a40f		       8f 0c 90 	      .byte.b	$8F,$0C,$90	; axs $900c	 ; 4  [$900c] = a AND x	  *ILLEGAL OPCODE*
     37  a40f		       a4 10	   ch1	      =	*-2
     38  a412		       88		      dey		; 2
     39  a413		       d0 f6		      bne	l0	; 3
     40  a415
     41  a415		       a9 80		      lda	#128	; 2
     42  a415		       a4 16	   initfreq   =	*-1
     43  a417		       ea		      nop		; 2
     44  a418		       a4 58		      ldy	TMP2	; 3
     45  a41a				   noset
     46  a41a		       99 00 90 	      sta	$9000,y	; 5
     47  a41d
     48  a41d		       60		      rts		; 6	total clocks 11+4+3+2+16*7+16+6 eq 154
     49  a41e
     50  a41e				   ldfqmasks
     51  a41e		       fe		      .byte.b	$fe	; $900a - 1 x 16 clocks/bit
     52  a41f		       fd		      .byte.b	$fd	; $900b - 2 x	8 clocks/bit
     53  a420		       fb		      .byte.b	$fb	; $900c - 4 x	4 clocks/bit
     54  a421
     55  a421
     56  a421				   viznutwaveforms
     57  a421		       00		      .byte.b	0	; MIDI Program #1	default  0000000011111111
     58  a422		       02		      .byte.b	2	; MIDI Program #2	"10"	 0000001011111101
     59  a423		       04		      .byte.b	4	; MIDI Program #3	"100"	 0000010011111011
     60  a424		       06		      .byte.b	6	; MIDI Program #4	"110"	 0000011011111001
     61  a425		       08		      .byte.b	8	; MIDI Program #5	"1000"	 0000100011110111
     62  a426		       0a		      .byte.b	10	; MIDI Program #6	"1010"	 0000101011110101
     63  a427		       0b		      .byte.b	11	; MIDI Program #7	"1011"	 0000110011110011
     64  a428		       0e		      .byte.b	14	; MIDI Program #8	"1110"	 0000111011110001
     65  a429		       12		      .byte.b	18	; MIDI Program #9	"10010"  0001001011101101
     66  a42a		       14		      .byte.b	20	; MIDI Program #10	"10100"  0001010011101011
     67  a42b		       16		      .byte.b	22	; MIDI Program #11	"10110"  0001011011101001
     68  a42c		       18		      .byte.b	24	; MIDI Program #12	"11000"  0001100011100111
     69  a42d		       1a		      .byte.b	26	; MIDI Program #13	"11010"  0001101011100101
     70  a42e		       24		      .byte.b	36	; MIDI Program #14	"100100" 0010010011011011
     71  a42f		       2a		      .byte.b	42	; MIDI Program #15	"101010" 0010101011010101
     72  a430		       2c		      .byte.b	44	; MIDI Program #16	"101100" 0010110011010011
------- FILE vicmidi.asm
    597  a431		       00 00 00 00	      byte.b	0,0,0,0
    598  a435
    599  a435							; setwave needs to start on a page and is self-modifying,
    600  a435							; so it is copied to RAM here
    601  a435
    602  a435				   setwavecopy
    603  a435		       a2 00		      ldx	#$00
    604  a437				   copyloop
    605  a437		       bd f4 a3 	      lda	setwaveorg,x
    606  a43a		       9d 00 10 	      sta	setwave,x
    607  a43d		       e8		      inx
    608  a43e		       d0 f7		      bne	copyloop
    609  a440		       60		      rts
    610  a441
    611  a441
    612  a441							; ----------------------------------------------------------------------------
    613  a441							; Strings
    614  a441
    615  a441				   maintext
    616  a441		       0e 08		      byte.b	CG_LCS, CG_DCS
    617  a443		       2a 76 69 63*	      byte.b	"*vic20 midi iNTERFACE*", CRLF
    618  a45a		       0d		      byte.b	CRLF
    619  a45b		       6d 69 64 69*	      byte.b	"midi dATA: --:--:--", CRLF
    620  a46f		       0d		      byte.b	CRLF
    621  a470		       76 4f 49 43*	      byte.b	"vOICE 1: -- / --", CRLF
    622  a481		       76 4f 49 43*	      byte.b	"vOICE 2: -- / --", CRLF
    623  a492		       76 4f 49 43*	      byte.b	"vOICE 3: -- / --", CRLF
    624  a4a3		       76 4f 49 43*	      byte.b	"vOICE 4: -- / --", CRLF
    625  a4b4		       0d		      byte.b	CRLF
    626  a4b5		       76 4f 4c 55*	      byte.b	"vOLUME : --", CRLF
    627  a4c1		       62 41 4e 4b*	      byte.b	"bANK	 : --", CRLF
    628  a4cd		       0d		      byte.b	CRLF
    629  a4ce		       73 59 53 54*	      byte.b	"sYSTEM : tbd", CRLF
    630  a4db
    631  a4db		       00		      byte.b	0
    632  a4dc
    633  a4dc							; ----------------------------------------------------------------------------
    634  a4dc							; Lookup table between voice #(0-3) and low byte of register# ($0A-$0D)
    635  a4dc
    636  a4dc				   voice_to_register
    637  a4dc		       0a 0b 0c 0d	      byte.b	$0A,$0B,$0C,$0D
    638  a4e0
------- FILE lookup-ntsc.asm LEVEL 2 PASS 2
      0  a4e0					      include	"lookup-ntsc.asm"
      1  a4e0							; --------------------------------------------------------------------------------------------------
      2  a4e0							; Note Lookups - 128 bytes each, map MIDI Note# to a VIC register value
      3  a4e0
      4  a4e0				   voice1lookup
      5  a4e0		       00		      byte.b	0
      6  a4e1		       00		      byte.b	0
      7  a4e2		       00		      byte.b	0
      8  a4e3		       00		      byte.b	0
      9  a4e4		       00		      byte.b	0
     10  a4e5		       00		      byte.b	0
     11  a4e6		       00		      byte.b	0
     12  a4e7		       00		      byte.b	0
     13  a4e8		       00		      byte.b	0
     14  a4e9		       00		      byte.b	0
     15  a4ea		       00		      byte.b	0
     16  a4eb		       00		      byte.b	0
     17  a4ec		       00		      byte.b	0
     18  a4ed		       00		      byte.b	0
     19  a4ee		       00		      byte.b	0
     20  a4ef		       00		      byte.b	0
     21  a4f0		       00		      byte.b	0
     22  a4f1		       00		      byte.b	0
     23  a4f2		       00		      byte.b	0
     24  a4f3		       00		      byte.b	0
     25  a4f4		       00		      byte.b	0
     26  a4f5		       00		      byte.b	0
     27  a4f6		       00		      byte.b	0
     28  a4f7		       00		      byte.b	0
     29  a4f8		       85		      byte.b	133
     30  a4f9		       8c		      byte.b	140
     31  a4fa		       92		      byte.b	146
     32  a4fb		       98		      byte.b	152
     33  a4fc		       9e		      byte.b	158
     34  a4fd		       a3		      byte.b	163
     35  a4fe		       a9		      byte.b	169
     36  a4ff		       ad		      byte.b	173
     37  a500		       b2		      byte.b	178
     38  a501		       b6		      byte.b	182
     39  a502		       ba		      byte.b	186
     40  a503		       be		      byte.b	190
     41  a504		       c2		      byte.b	194
     42  a505		       c5		      byte.b	197
     43  a506		       c9		      byte.b	201
     44  a507		       cc		      byte.b	204
     45  a508		       cf		      byte.b	207
     46  a509		       d1		      byte.b	209
     47  a50a		       d4		      byte.b	212
     48  a50b		       d6		      byte.b	214
     49  a50c		       d9		      byte.b	217
     50  a50d		       db		      byte.b	219
     51  a50e		       dd		      byte.b	221
     52  a50f		       df		      byte.b	223
     53  a510		       e0		      byte.b	224
     54  a511		       e2		      byte.b	226
     55  a512		       e4		      byte.b	228
     56  a513		       e5		      byte.b	229
     57  a514		       e7		      byte.b	231
     58  a515		       e8		      byte.b	232
     59  a516		       e9		      byte.b	233
     60  a517		       eb		      byte.b	235
     61  a518		       ec		      byte.b	236
     62  a519		       ed		      byte.b	237
     63  a51a		       ee		      byte.b	238
     64  a51b		       ef		      byte.b	239
     65  a51c		       f0		      byte.b	240
     66  a51d		       00		      byte.b	0
     67  a51e		       00		      byte.b	0
     68  a51f		       00		      byte.b	0
     69  a520		       00		      byte.b	0
     70  a521		       00		      byte.b	0
     71  a522		       00		      byte.b	0
     72  a523		       00		      byte.b	0
     73  a524		       00		      byte.b	0
     74  a525		       00		      byte.b	0
     75  a526		       00		      byte.b	0
     76  a527		       00		      byte.b	0
     77  a528		       00		      byte.b	0
     78  a529		       00		      byte.b	0
     79  a52a		       00		      byte.b	0
     80  a52b		       00		      byte.b	0
     81  a52c		       00		      byte.b	0
     82  a52d		       00		      byte.b	0
     83  a52e		       00		      byte.b	0
     84  a52f		       00		      byte.b	0
     85  a530		       00		      byte.b	0
     86  a531		       00		      byte.b	0
     87  a532		       00		      byte.b	0
     88  a533		       00		      byte.b	0
     89  a534		       00		      byte.b	0
     90  a535		       00		      byte.b	0
     91  a536		       00		      byte.b	0
     92  a537		       00		      byte.b	0
     93  a538		       00		      byte.b	0
     94  a539		       00		      byte.b	0
     95  a53a		       00		      byte.b	0
     96  a53b		       00		      byte.b	0
     97  a53c		       00		      byte.b	0
     98  a53d		       00		      byte.b	0
     99  a53e		       00		      byte.b	0
    100  a53f		       00		      byte.b	0
    101  a540		       00		      byte.b	0
    102  a541		       00		      byte.b	0
    103  a542		       00		      byte.b	0
    104  a543		       00		      byte.b	0
    105  a544		       00		      byte.b	0
    106  a545		       00		      byte.b	0
    107  a546		       00		      byte.b	0
    108  a547		       00		      byte.b	0
    109  a548		       00		      byte.b	0
    110  a549		       00		      byte.b	0
    111  a54a		       00		      byte.b	0
    112  a54b		       00		      byte.b	0
    113  a54c		       00		      byte.b	0
    114  a54d		       00		      byte.b	0
    115  a54e		       00		      byte.b	0
    116  a54f		       00		      byte.b	0
    117  a550		       00		      byte.b	0
    118  a551		       00		      byte.b	0
    119  a552		       00		      byte.b	0
    120  a553		       00		      byte.b	0
    121  a554		       00		      byte.b	0
    122  a555		       00		      byte.b	0
    123  a556		       00		      byte.b	0
    124  a557		       00		      byte.b	0
    125  a558		       00		      byte.b	0
    126  a559		       00		      byte.b	0
    127  a55a		       00		      byte.b	0
    128  a55b		       00		      byte.b	0
    129  a55c		       00		      byte.b	0
    130  a55d		       00		      byte.b	0
    131  a55e		       00		      byte.b	0
    132  a55f		       00		      byte.b	0
    133  a560
    134  a560				   voice2lookup
    135  a560		       00		      byte.b	0
    136  a561		       00		      byte.b	0
    137  a562		       00		      byte.b	0
    138  a563		       00		      byte.b	0
    139  a564		       00		      byte.b	0
    140  a565		       00		      byte.b	0
    141  a566		       00		      byte.b	0
    142  a567		       00		      byte.b	0
    143  a568		       00		      byte.b	0
    144  a569		       00		      byte.b	0
    145  a56a		       00		      byte.b	0
    146  a56b		       00		      byte.b	0
    147  a56c		       00		      byte.b	0
    148  a56d		       00		      byte.b	0
    149  a56e		       00		      byte.b	0
    150  a56f		       00		      byte.b	0
    151  a570		       00		      byte.b	0
    152  a571		       00		      byte.b	0
    153  a572		       00		      byte.b	0
    154  a573		       00		      byte.b	0
    155  a574		       00		      byte.b	0
    156  a575		       00		      byte.b	0
    157  a576		       00		      byte.b	0
    158  a577		       00		      byte.b	0
    159  a578		       00		      byte.b	0
    160  a579		       00		      byte.b	0
    161  a57a		       00		      byte.b	0
    162  a57b		       00		      byte.b	0
    163  a57c		       00		      byte.b	0
    164  a57d		       00		      byte.b	0
    165  a57e		       00		      byte.b	0
    166  a57f		       00		      byte.b	0
    167  a580		       00		      byte.b	0
    168  a581		       00		      byte.b	0
    169  a582		       00		      byte.b	0
    170  a583		       00		      byte.b	0
    171  a584		       85		      byte.b	133
    172  a585		       8c		      byte.b	140
    173  a586		       92		      byte.b	146
    174  a587		       98		      byte.b	152
    175  a588		       9e		      byte.b	158
    176  a589		       a3		      byte.b	163
    177  a58a		       a9		      byte.b	169
    178  a58b		       ad		      byte.b	173
    179  a58c		       b2		      byte.b	178
    180  a58d		       b6		      byte.b	182
    181  a58e		       ba		      byte.b	186
    182  a58f		       be		      byte.b	190
    183  a590		       c2		      byte.b	194
    184  a591		       c5		      byte.b	197
    185  a592		       c9		      byte.b	201
    186  a593		       cc		      byte.b	204
    187  a594		       cf		      byte.b	207
    188  a595		       d1		      byte.b	209
    189  a596		       d4		      byte.b	212
    190  a597		       d6		      byte.b	214
    191  a598		       d9		      byte.b	217
    192  a599		       db		      byte.b	219
    193  a59a		       dd		      byte.b	221
    194  a59b		       df		      byte.b	223
    195  a59c		       e0		      byte.b	224
    196  a59d		       e2		      byte.b	226
    197  a59e		       e4		      byte.b	228
    198  a59f		       e5		      byte.b	229
    199  a5a0		       e7		      byte.b	231
    200  a5a1		       e8		      byte.b	232
    201  a5a2		       e9		      byte.b	233
    202  a5a3		       eb		      byte.b	235
    203  a5a4		       ec		      byte.b	236
    204  a5a5		       ed		      byte.b	237
    205  a5a6		       ee		      byte.b	238
    206  a5a7		       ef		      byte.b	239
    207  a5a8		       f0		      byte.b	240
    208  a5a9		       00		      byte.b	0
    209  a5aa		       00		      byte.b	0
    210  a5ab		       00		      byte.b	0
    211  a5ac		       00		      byte.b	0
    212  a5ad		       00		      byte.b	0
    213  a5ae		       00		      byte.b	0
    214  a5af		       00		      byte.b	0
    215  a5b0		       00		      byte.b	0
    216  a5b1		       00		      byte.b	0
    217  a5b2		       00		      byte.b	0
    218  a5b3		       00		      byte.b	0
    219  a5b4		       00		      byte.b	0
    220  a5b5		       00		      byte.b	0
    221  a5b6		       00		      byte.b	0
    222  a5b7		       00		      byte.b	0
    223  a5b8		       00		      byte.b	0
    224  a5b9		       00		      byte.b	0
    225  a5ba		       00		      byte.b	0
    226  a5bb		       00		      byte.b	0
    227  a5bc		       00		      byte.b	0
    228  a5bd		       00		      byte.b	0
    229  a5be		       00		      byte.b	0
    230  a5bf		       00		      byte.b	0
    231  a5c0		       00		      byte.b	0
    232  a5c1		       00		      byte.b	0
    233  a5c2		       00		      byte.b	0
    234  a5c3		       00		      byte.b	0
    235  a5c4		       00		      byte.b	0
    236  a5c5		       00		      byte.b	0
    237  a5c6		       00		      byte.b	0
    238  a5c7		       00		      byte.b	0
    239  a5c8		       00		      byte.b	0
    240  a5c9		       00		      byte.b	0
    241  a5ca		       00		      byte.b	0
    242  a5cb		       00		      byte.b	0
    243  a5cc		       00		      byte.b	0
    244  a5cd		       00		      byte.b	0
    245  a5ce		       00		      byte.b	0
    246  a5cf		       00		      byte.b	0
    247  a5d0		       00		      byte.b	0
    248  a5d1		       00		      byte.b	0
    249  a5d2		       00		      byte.b	0
    250  a5d3		       00		      byte.b	0
    251  a5d4		       00		      byte.b	0
    252  a5d5		       00		      byte.b	0
    253  a5d6		       00		      byte.b	0
    254  a5d7		       00		      byte.b	0
    255  a5d8		       00		      byte.b	0
    256  a5d9		       00		      byte.b	0
    257  a5da		       00		      byte.b	0
    258  a5db		       00		      byte.b	0
    259  a5dc		       00		      byte.b	0
    260  a5dd		       00		      byte.b	0
    261  a5de		       00		      byte.b	0
    262  a5df		       00		      byte.b	0
    263  a5e0
    264  a5e0				   voice3lookup
    265  a5e0		       00		      byte.b	0
    266  a5e1		       00		      byte.b	0
    267  a5e2		       00		      byte.b	0
    268  a5e3		       00		      byte.b	0
    269  a5e4		       00		      byte.b	0
    270  a5e5		       00		      byte.b	0
    271  a5e6		       00		      byte.b	0
    272  a5e7		       00		      byte.b	0
    273  a5e8		       00		      byte.b	0
    274  a5e9		       00		      byte.b	0
    275  a5ea		       00		      byte.b	0
    276  a5eb		       00		      byte.b	0
    277  a5ec		       00		      byte.b	0
    278  a5ed		       00		      byte.b	0
    279  a5ee		       00		      byte.b	0
    280  a5ef		       00		      byte.b	0
    281  a5f0		       00		      byte.b	0
    282  a5f1		       00		      byte.b	0
    283  a5f2		       00		      byte.b	0
    284  a5f3		       00		      byte.b	0
    285  a5f4		       00		      byte.b	0
    286  a5f5		       00		      byte.b	0
    287  a5f6		       00		      byte.b	0
    288  a5f7		       00		      byte.b	0
    289  a5f8		       00		      byte.b	0
    290  a5f9		       00		      byte.b	0
    291  a5fa		       00		      byte.b	0
    292  a5fb		       00		      byte.b	0
    293  a5fc		       00		      byte.b	0
    294  a5fd		       00		      byte.b	0
    295  a5fe		       00		      byte.b	0
    296  a5ff		       00		      byte.b	0
    297  a600		       00		      byte.b	0
    298  a601		       00		      byte.b	0
    299  a602		       00		      byte.b	0
    300  a603		       00		      byte.b	0
    301  a604		       00		      byte.b	0
    302  a605		       00		      byte.b	0
    303  a606		       00		      byte.b	0
    304  a607		       00		      byte.b	0
    305  a608		       00		      byte.b	0
    306  a609		       00		      byte.b	0
    307  a60a		       00		      byte.b	0
    308  a60b		       00		      byte.b	0
    309  a60c		       00		      byte.b	0
    310  a60d		       00		      byte.b	0
    311  a60e		       00		      byte.b	0
    312  a60f		       00		      byte.b	0
    313  a610		       85		      byte.b	133
    314  a611		       8c		      byte.b	140
    315  a612		       92		      byte.b	146
    316  a613		       98		      byte.b	152
    317  a614		       9e		      byte.b	158
    318  a615		       a3		      byte.b	163
    319  a616		       a9		      byte.b	169
    320  a617		       ad		      byte.b	173
    321  a618		       b2		      byte.b	178
    322  a619		       b6		      byte.b	182
    323  a61a		       ba		      byte.b	186
    324  a61b		       be		      byte.b	190
    325  a61c		       c2		      byte.b	194
    326  a61d		       c5		      byte.b	197
    327  a61e		       c9		      byte.b	201
    328  a61f		       cc		      byte.b	204
    329  a620		       cf		      byte.b	207
    330  a621		       d1		      byte.b	209
    331  a622		       d4		      byte.b	212
    332  a623		       d6		      byte.b	214
    333  a624		       d9		      byte.b	217
    334  a625		       db		      byte.b	219
    335  a626		       dd		      byte.b	221
    336  a627		       df		      byte.b	223
    337  a628		       e0		      byte.b	224
    338  a629		       e2		      byte.b	226
    339  a62a		       e4		      byte.b	228
    340  a62b		       e5		      byte.b	229
    341  a62c		       e7		      byte.b	231
    342  a62d		       e8		      byte.b	232
    343  a62e		       e9		      byte.b	233
    344  a62f		       eb		      byte.b	235
    345  a630		       ec		      byte.b	236
    346  a631		       ed		      byte.b	237
    347  a632		       ee		      byte.b	238
    348  a633		       ef		      byte.b	239
    349  a634		       f0		      byte.b	240
    350  a635		       00		      byte.b	0
    351  a636		       00		      byte.b	0
    352  a637		       00		      byte.b	0
    353  a638		       00		      byte.b	0
    354  a639		       00		      byte.b	0
    355  a63a		       00		      byte.b	0
    356  a63b		       00		      byte.b	0
    357  a63c		       00		      byte.b	0
    358  a63d		       00		      byte.b	0
    359  a63e		       00		      byte.b	0
    360  a63f		       00		      byte.b	0
    361  a640		       00		      byte.b	0
    362  a641		       00		      byte.b	0
    363  a642		       00		      byte.b	0
    364  a643		       00		      byte.b	0
    365  a644		       00		      byte.b	0
    366  a645		       00		      byte.b	0
    367  a646		       00		      byte.b	0
    368  a647		       00		      byte.b	0
    369  a648		       00		      byte.b	0
    370  a649		       00		      byte.b	0
    371  a64a		       00		      byte.b	0
    372  a64b		       00		      byte.b	0
    373  a64c		       00		      byte.b	0
    374  a64d		       00		      byte.b	0
    375  a64e		       00		      byte.b	0
    376  a64f		       00		      byte.b	0
    377  a650		       00		      byte.b	0
    378  a651		       00		      byte.b	0
    379  a652		       00		      byte.b	0
    380  a653		       00		      byte.b	0
    381  a654		       00		      byte.b	0
    382  a655		       00		      byte.b	0
    383  a656		       00		      byte.b	0
    384  a657		       00		      byte.b	0
    385  a658		       00		      byte.b	0
    386  a659		       00		      byte.b	0
    387  a65a		       00		      byte.b	0
    388  a65b		       00		      byte.b	0
    389  a65c		       00		      byte.b	0
    390  a65d		       00		      byte.b	0
    391  a65e		       00		      byte.b	0
    392  a65f		       00		      byte.b	0
    393  a660
    394  a660
    395  a660				   voice4lookup
    396  a660		       00		      byte.b	0
    397  a661		       00		      byte.b	0
    398  a662		       00		      byte.b	0
    399  a663		       00		      byte.b	0
    400  a664		       00		      byte.b	0
    401  a665		       00		      byte.b	0
    402  a666		       00		      byte.b	0
    403  a667		       00		      byte.b	0
    404  a668		       00		      byte.b	0
    405  a669		       00		      byte.b	0
    406  a66a		       00		      byte.b	0
    407  a66b		       00		      byte.b	0
    408  a66c		       00		      byte.b	0
    409  a66d		       00		      byte.b	0
    410  a66e		       00		      byte.b	0
    411  a66f		       00		      byte.b	0
    412  a670		       00		      byte.b	0
    413  a671		       00		      byte.b	0
    414  a672		       00		      byte.b	0
    415  a673		       00		      byte.b	0
    416  a674		       00		      byte.b	0
    417  a675		       00		      byte.b	0
    418  a676		       00		      byte.b	0
    419  a677		       00		      byte.b	0
    420  a678		       00		      byte.b	0
    421  a679		       00		      byte.b	0
    422  a67a		       00		      byte.b	0
    423  a67b		       00		      byte.b	0
    424  a67c		       00		      byte.b	0
    425  a67d		       00		      byte.b	0
    426  a67e		       00		      byte.b	0
    427  a67f		       00		      byte.b	0
    428  a680		       00		      byte.b	0
    429  a681		       00		      byte.b	0
    430  a682		       00		      byte.b	0
    431  a683		       00		      byte.b	0
    432  a684		       85		      byte.b	133
    433  a685		       8c		      byte.b	140
    434  a686		       92		      byte.b	146
    435  a687		       98		      byte.b	152
    436  a688		       9e		      byte.b	158
    437  a689		       a3		      byte.b	163
    438  a68a		       a9		      byte.b	169
    439  a68b		       ad		      byte.b	173
    440  a68c		       b2		      byte.b	178
    441  a68d		       b6		      byte.b	182
    442  a68e		       ba		      byte.b	186
    443  a68f		       be		      byte.b	190
    444  a690		       c2		      byte.b	194
    445  a691		       c5		      byte.b	197
    446  a692		       c9		      byte.b	201
    447  a693		       cc		      byte.b	204
    448  a694		       cf		      byte.b	207
    449  a695		       d1		      byte.b	209
    450  a696		       d4		      byte.b	212
    451  a697		       d6		      byte.b	214
    452  a698		       d9		      byte.b	217
    453  a699		       db		      byte.b	219
    454  a69a		       dd		      byte.b	221
    455  a69b		       df		      byte.b	223
    456  a69c		       e0		      byte.b	224
    457  a69d		       e2		      byte.b	226
    458  a69e		       e4		      byte.b	228
    459  a69f		       e5		      byte.b	229
    460  a6a0		       e7		      byte.b	231
    461  a6a1		       e8		      byte.b	232
    462  a6a2		       e9		      byte.b	233
    463  a6a3		       eb		      byte.b	235
    464  a6a4		       ec		      byte.b	236
    465  a6a5		       ed		      byte.b	237
    466  a6a6		       ee		      byte.b	238
    467  a6a7		       ef		      byte.b	239
    468  a6a8		       f0		      byte.b	240
    469  a6a9		       00		      byte.b	0
    470  a6aa		       00		      byte.b	0
    471  a6ab		       00		      byte.b	0
    472  a6ac		       00		      byte.b	0
    473  a6ad		       00		      byte.b	0
    474  a6ae		       00		      byte.b	0
    475  a6af		       00		      byte.b	0
    476  a6b0		       00		      byte.b	0
    477  a6b1		       00		      byte.b	0
    478  a6b2		       00		      byte.b	0
    479  a6b3		       00		      byte.b	0
    480  a6b4		       00		      byte.b	0
    481  a6b5		       00		      byte.b	0
    482  a6b6		       00		      byte.b	0
    483  a6b7		       00		      byte.b	0
    484  a6b8		       00		      byte.b	0
    485  a6b9		       00		      byte.b	0
    486  a6ba		       00		      byte.b	0
    487  a6bb		       00		      byte.b	0
    488  a6bc		       00		      byte.b	0
    489  a6bd		       00		      byte.b	0
    490  a6be		       00		      byte.b	0
    491  a6bf		       00		      byte.b	0
    492  a6c0		       00		      byte.b	0
    493  a6c1		       00		      byte.b	0
    494  a6c2		       00		      byte.b	0
    495  a6c3		       00		      byte.b	0
    496  a6c4		       00		      byte.b	0
    497  a6c5		       00		      byte.b	0
    498  a6c6		       00		      byte.b	0
    499  a6c7		       00		      byte.b	0
    500  a6c8		       00		      byte.b	0
    501  a6c9		       00		      byte.b	0
    502  a6ca		       00		      byte.b	0
    503  a6cb		       00		      byte.b	0
    504  a6cc		       00		      byte.b	0
    505  a6cd		       00		      byte.b	0
    506  a6ce		       00		      byte.b	0
    507  a6cf		       00		      byte.b	0
    508  a6d0		       00		      byte.b	0
    509  a6d1		       00		      byte.b	0
    510  a6d2		       00		      byte.b	0
    511  a6d3		       00		      byte.b	0
    512  a6d4		       00		      byte.b	0
    513  a6d5		       00		      byte.b	0
    514  a6d6		       00		      byte.b	0
    515  a6d7		       00		      byte.b	0
    516  a6d8		       00		      byte.b	0
    517  a6d9		       00		      byte.b	0
    518  a6da		       00		      byte.b	0
    519  a6db		       00		      byte.b	0
    520  a6dc		       00		      byte.b	0
    521  a6dd		       00		      byte.b	0
    522  a6de		       00		      byte.b	0
    523  a6df		       00		      byte.b	0
    524  a6e0
    525  a6e0							;;;; end of file
------- FILE vicmidi.asm
    640  a6e0							;include "lookup-pal.asm"
    641  a6e0							;include "lookup-ntsc-alt.asm"
    642  a6e0							;include "lookup-pal-alt.asm"
    643  a6e0
    644  a6e0							; EOF!
