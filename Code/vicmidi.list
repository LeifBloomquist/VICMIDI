------- FILE vicmidi.asm LEVEL 1 PASS 2
      1  b0e2 ????						; VIC-20 MIDI Interface
      2  b0e2 ????						; By David Viens and Leif Bloomquist, portions by
      3  b0e2 ????						; Michael Kircher and Viznut
      4  b0e2 ????
      5  b0e2 ????						; ----------------------------------------------------------------------------
      6  b0e2 ????
      7  b0e2 ????				      processor	6502	; VIC-20
      8  b0e2 ????
      9  b0e2 ????						; Assume no memory expansion.	 Compile as Cartridge ROM in Block 5.
     10  a000					      org	$A000	; Block 5
     11  a000
     12  a000							; Macro and equate includes (must be at start)
------- FILE macros.asm LEVEL 2 PASS 2
      0  a000					      include	"macros.asm"
      1  a000
      2  a000							; ==============================================================
      3  a000							; Macro wrapping the fast hex poke
      4  a000							; ==============================================================
      5  a000
      6  a000					      MAC	hexpoke
      7  a000					      lda	#<{1}	; Low byte
      8  a000					      sta	$22
      9  a000					      lda	#>{1}	; High byte
     10  a000					      sta	$23
     11  a000
     12  a000					      lda	{2}	; Note - address
     13  a000					      jsr	hexstr
     14  a000					      ENDM
     15  a000
     16  a000							; ==============================================================
     17  a000							; Macro to position the cursor
     18  a000							; ==============================================================
     19  a000
     20  a000					      MAC	plot
     21  a000					      ldy	#{1}
     22  a000					      ldx	#{2}
     23  a000					      clc
     24  a000					      jsr	$E50A	; PLOT - same on 64 and VIC
     25  a000					      ENDM
     26  a000
     27  a000							; ==============================================================
     28  a000							; Macro to print a string
     29  a000							; ==============================================================
     30  a000
     31  a000					      MAC	printstring
     32  a000					      ldy	#>{0}
     33  a000					      lda	#<{0}
     34  a000					      jsr	STROUT
     35  a000					      ENDM
     36  a000
     37  a000							; ==============================================================
     38  a000							; Macro to print a byte (Hex)
     39  a000							; ==============================================================
     40  a000
     41  a000					      MAC	printbyte
     42  a000					      ldx	#$00
     43  a000					      ldy	#$0F
     44  a000					      lda	{0}
     45  a000					      jsr	printnum
     46  a000					      ENDM
------- FILE vicmidi.asm
------- FILE equates.asm LEVEL 2 PASS 2
      0  a000					      include	"equates.asm"
      1  a000							; --------------------------------------------------------------------------------------------------
      2  a000							;;free zero page (to use as vars)
      3  a000							;INDEX1: $0022-$0023, First utility pointer		       used by HEXPOKE
      4  a000							;INDEX2: $0024-$0025, Second utility pointer		       bytesexpected, midicounter
      5  a000							;FORNAM: $0049-$004A, Pointer to FOR/NEXT index variable etc  channel
      6  a000							;TEMPF3: $004E-$0052, Temporary FLPT storage		       Used by keyboard routines
      7  a000							;TEMPF1: $0057-$005B, Temporary FLPT storage		       Used by setwave
      8  a000							;TEMPF2: $005C-$0060: Temporary FLPT storage		       FIFO pointers
      9  a000							;FAC:	  $0061-$0066, Floating-point Accumulator (FAC)        Flags for Poly mode
     10  a000							;AFAC:   $0069-$006E, Alternative/Auxilary FAC 	       69=last note
     11  a000
     12  a000							; ---- Zero Page Addresses -------------------------------------------------
     13  a000
     14  a000		       00 24	   midicounter =	$24
     15  a000		       00 25	   bytesexpected =	$25
     16  a000
     17  a000		       00 49	   channel    =	$49
     18  a000		       00 4a	   bank       =	$4A	; 0=NTSC Normal, 1=PAL Normal, 2=NTSC Alt., 3=PAL Alt.
     19  a000
     20  a000							; Previous keyboard column bits.
     21  a000		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
     22  a000		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     23  a000		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     24  a000		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     25  a000
     26  a000							; Used by setwave
     27  a000		       00 57	   TMP	      =	$57
     28  a000		       00 58	   TMP2       =	$58
     29  a000
     30  a000		       00 5c	   write_pointer =	$5C	; FIFO current write pointer - incremented on byte received
     31  a000		       00 5d	   read_pointer =	$5D	; FIFO current read pointer - incremented on byte removed
     32  a000
     33  a000		       00 5e	   currentvalue =	$5E	; Current value for voice settings
     34  a000
     35  a000		       00 61	   poly_flags =	$61	; Flags for polymode
     36  a000							; Also 62,63,64
     37  a000
     38  a000		       00 68	   lastnote   =	$68	; Remembers last note, so Note Off applies to that note only
     39  a000							; Also 69,6A,6B
     40  a000
     41  a000		       00 6c	   temp1      =	$6C	; Used for screen colors
     42  a000		       00 6d	   tempx      =	$6D	; Used by program change
     43  a000
     44  a000							;*00FB-00FE  251-254  Operating system free zero page space
     45  a000		       00 fb	   statusbyte =	$FB
     46  a000		       00 fc	   mididata0  =	$FC
     47  a000		       00 fd	   mididata1  =	$FD
     48  a000		       00 fe	   mididata2  =	$FE	; If needed
     49  a000
     50  a000							; ---- Non Zero Page Addresses -----------------------------------------------
     51  a000
     52  a000							; Store viznut waveform being used per voice  (located neat start of BASIC space)
     53  a000		       10 10	   waveform1  =	$1010
     54  a000		       10 11	   waveform2  =	$1011
     55  a000		       10 12	   waveform3  =	$1012
     56  a000		       10 13	   waveform4  =	$1013
     57  a000
     58  a000							; Scratch space for setwave parameters
     59  a000		       10 20	   setwavechannel =	$1020	; y = channel ($0a..$0c)
     60  a000		       10 21	   setwavefrequency =	$1021	; x = initial frequency
     61  a000		       10 22	   setwaveshiftreg =	$1022	; a = shift register contents
     62  a000
     63  a000							; Setwave Target
     64  a000		       11 00	   setwave    =	$1100	; Setwave code has to all be on one page.
     65  a000
     66  a000							; Input Buffer
     67  a000		       12 00	   buffer     =	$1200
     68  a000
     69  a000							; Font (copied here from ROM)
     70  a000		       18 00	   font       =	$1800	; 6144 decimal
     71  a000
     72  a000							; ST16C450 Registers
     73  a000		       9c 00	   UART_RXTX  =	$9C00
     74  a000		       9c 01	   UART_IER   =	$9C01
     75  a000		       9c 02	   UART_ISR   =	$9C02
     76  a000		       9c 03	   UART_LCR   =	$9C03
     77  a000		       9c 05	   UART_LSR   =	$9C05
     78  a000		       9c 07	   UART_SCRATCHPAD =	$9C07
     79  a000		       9c 00	   UART_DIVISOR_LSB =	$9C00	; Yes, same as UART_RXTX
     80  a000		       9c 01	   UART_DIVISOR_MSB =	$9C01
     81  a000
     82  a000							;Sound and Video Registers
     83  a000		       90 0a	   sound_voice1 =	$900A	; Frequency for oscillator 1 (low)    (on: 128-255)
     84  a000		       90 0b	   sound_voice2 =	$900B	; Frequency for oscillator 2 (medium) (on: 128-255)
     85  a000		       90 0c	   sound_voice3 =	$900C	; Frequency for oscillator 3 (high)   (on: 128-255)
     86  a000		       90 0d	   sound_noise =	$900D	; Frequency of noise source	       (on: 128-255)
     87  a000		       90 0e	   sound_volume =	$900E	; Bits 0-3 sets volume of all sound.  Bits 4-7 are auxiliary color information (not used)
     88  a000		       90 0f	   screen_colors =	$900F
     89  a000
     90  a000							;Screen locations
     91  a000		       1e 00	   screen_start =	$1E00
     92  a000		       1e 4d	   midi_display =	$1E4D
     93  a000		       1e 77	   voice_display =	$1E77
     94  a000		       1f f9	   spin_display =	$1FF9	; Lower-right corner
     95  a000		       97 f9	   spin_color =	spin_display + $7800
     96  a000
     97  a000
     98  a000							; Kernal/BASIC Routines
     99  a000		       f2 7a	   CHROUT     =	$f27a
    100  a000		       e5 5f	   CLRSCREEN  =	$e55f
    101  a000		       e5 81	   HOME       =	$E581
    102  a000		       cb 1e	   STROUT     =	$CB1E	; Print string pointed to by (A/Y) until zero byte.
    103  a000
    104  a000		       00 08	   CG_DCS     =	8	;disable shift+C=
    105  a000		       00 09	   CG_ECS     =	9	;enable shift+C=
    106  a000
    107  a000		       00 0e	   CG_LCS     =	14	;switch to lowercase
    108  a000		       00 8e	   CG_UCS     =	142	;switch to uppercase
    109  a000
    110  a000							;cursor movement
    111  a000		       00 13	   CS_HOM     =	19
    112  a000		       00 91	   CS_U       =	145
    113  a000		       00 11	   CS_D       =	17
    114  a000		       00 9d	   CS_L       =	157
    115  a000		       00 1d	   CS_R       =	29
    116  a000
    117  a000		       00 0d	   CRLF       =	13
    118  a000
    119  a000							; EOF!
------- FILE vicmidi.asm
     15  a000
     16  a000							; ---- Startup Code ---------------------------------------------------------
     17  a000		       09 a0		      dc.w	START	; Entry point for power up
     18  a002		       86 a5		      dc.w	RESTORE	; Entry point for warm start (RESTORE)
     19  a004
     20  a004		       41 30 c3 c2*	      dc.b	"A0",$C3,$C2,$CD	; 'A0CBM' boot string
     21  a009
     22  a009				   START
     23  a009							;Kernel Init
     24  a009		       20 8d fd 	      jsr	$fd8d	; RAMTAS - Initialise System Constants
     25  a00c		       20 52 fd 	      jsr	$fd52	; Init Vectors
     26  a00f		       20 f9 fd 	      jsr	$fdf9	; Init I/O
     27  a012		       20 18 e5 	      jsr	$e518	; Init I/O
     28  a015
     29  a015							;BASIC Init (Partial)
     30  a015		       20 5b e4 	      jsr	$e45b	; Init Vectors
     31  a018		       20 a4 e3 	      jsr	$e3a4	; BASIC RAM
     32  a01b		       20 04 e4 	      jsr	$e404	; INIT Message (needed (?) so keycheck routines work)
     33  a01e
     34  a01e				   entry
     35  a01e		       20 8b a3 	      jsr	setupfont
     36  a021		       20 50 a3 	      jsr	mainscreen
     37  a024		       20 eb a5 	      jsr	setup_pal
     38  a027		       20 7f a3 	      jsr	setwavecopy
     39  a02a		       20 1e a5 	      jsr	checkuart
     40  a02d		       20 61 a5 	      jsr	setupirq
     41  a030		       20 47 a5 	      jsr	resetuart
     42  a033
     43  a033							; Default to maximum volume
     44  a033		       a9 0f		      lda	#$0F
     45  a035		       20 30 a2 	      jsr	setvolume
     46  a038
     47  a038							; Initial Values
     48  a038		       a9 00		      lda	#$00
     49  a03a		       85 24		      sta	midicounter	; midicounter=0
     50  a03c		       85 fb		      sta	statusbyte	; statusbyte=0
     51  a03e		       85 fc		      sta	mididata0	; mididata0=0
     52  a040		       85 fd		      sta	mididata1	; mididata1=0
     53  a042		       85 fe		      sta	mididata2	; mididata2=0
     54  a044		       85 4e		      sta	c0	; no keys are pressed in 7F
     55  a046		       85 4f		      sta	c1	; no keys are pressed in BF
     56  a048		       85 50		      sta	c2	; no keys are pressed in FD
     57  a04a		       85 51		      sta	c3	; no keys are pressed in FE
     58  a04c		       85 68		      sta	lastnote+0	; Clear
     59  a04e		       85 69		      sta	lastnote+1	;    last
     60  a050		       85 6a		      sta	lastnote+2	;	note
     61  a052		       85 6b		      sta	lastnote+3	;	  (including noise)
     62  a054		       85 61		      sta	poly_flags+0	; Clear
     63  a056		       85 62		      sta	poly_flags+1	;   poly
     64  a058		       85 63		      sta	poly_flags+2	;     flags
     65  a05a		       8d f9 97 	      sta	spin_color
     66  a05d		       85 5c		      sta	write_pointer
     67  a05f		       85 5d		      sta	read_pointer
     68  a061		       8d 10 10 	      sta	waveform1
     69  a064		       8d 11 10 	      sta	waveform2
     70  a067		       8d 12 10 	      sta	waveform3
     71  a06a		       8d 13 10 	      sta	waveform4
     72  a06d
     73  a06d							;;; ==========================================================================
     74  a06d							;;; main LOOP!
     75  a06d				   loop
     76  a06d		       ee f9 97 	      inc	spin_color	; Prove we aren't 'frozen'
     77  a070							;jsr GetKey	  ; create events from keyboard if needed - TODO
     78  a070
     79  a070		       a5 5d		      lda	read_pointer
     80  a072		       c5 5c		      cmp	write_pointer
     81  a074		       f0 f7		      beq	loop	; Pointers match, no data
     82  a076							;;; ==========================================================================
     83  a076
     84  a076							; We have data!
     85  a076							; Advance pointer for next read
     86  a076		       e6 5d		      inc	read_pointer
     87  a078
     88  a078							; Read current byte
     89  a078		       aa		      tax		; Since A still contains the unincremented pointer
     90  a079		       bd 00 12 	      lda	buffer,x
     91  a07c
     92  a07c							; If Bit 7 is set, it means it's a status byte and we need to prepare for a new message
     93  a07c		       10 18		      bpl	data	; Not a status byte
     94  a07e
     95  a07e							; Store the status byte
     96  a07e		       85 fb		      sta	statusbyte
     97  a080
     98  a080							; Reset the midi counter to 0
     99  a080		       a2 00		      ldx	#$00
    100  a082		       86 24		      stx	midicounter
    101  a084
    102  a084							; Also, check how many bytes we'll need - Normally 3, but 2 for Program Change
    103  a084		       29 f0		      and	#$F0	; Get the upper nybble
    104  a086		       c9 c0		      cmp	#$C0	; Program change
    105  a088		       d0 05		      bne	bytes2
    106  a08a
    107  a08a				   bytes1
    108  a08a		       a0 01		      ldy	#$01
    109  a08c		       4c 91 a0 	      jmp	setbytes
    110  a08f
    111  a08f				   bytes2
    112  a08f		       a0 02		      ldy	#$02
    113  a091
    114  a091				   setbytes
    115  a091		       84 25		      sty	bytesexpected
    116  a093		       4c 6d a0 	      jmp	loop	; Wait for next byte
    117  a096
    118  a096							; ----------------------------------------------------------------------------
    119  a096							; Store data byte
    120  a096
    121  a096				   data
    122  a096		       a6 24		      ldx	midicounter	; What byte are we at?
    123  a098		       95 fc		      sta	mididata0,x	; Store received midi data pointed by x
    124  a09a
    125  a09a		       e8		      inx		; x++
    126  a09b		       86 24		      stx	midicounter	; and store x
    127  a09d
    128  a09d		       e4 25		      cpx	bytesexpected	; Number of data bytes expected in this MIDI message (i.e. 2)
    129  a09f		       f0 03		      beq	messageproc	; Complete MIDI message received.
    130  a0a1
    131  a0a1							; Not complete, wait for more bytes.
    132  a0a1		       4c 6d a0 	      jmp	loop
    133  a0a4
    134  a0a4							; ----------------------------------------------------------------------------
    135  a0a4							; Process a complete MIDI message
    136  a0a4
    137  a0a4				   messageproc
    138  a0a4							; Reset midicounter back to 0 for next message -
    139  a0a4							; This might be redundant, see above line 100
    140  a0a4		       a9 00		      lda	#$00
    141  a0a6		       85 24		      sta	midicounter
    142  a0a8
    143  a0a8							; Display received message bytes
      0  a0a8					      HEXPOKE	(midi_display+0),statusbyte
      1  a0a8		       a9 4d		      lda	#<(midi_display+0)
      2  a0aa		       85 22		      sta	$22
      3  a0ac		       a9 1e		      lda	#>(midi_display+0)
      4  a0ae		       85 23		      sta	$23
      5  a0b0
      6  a0b0		       a5 fb		      lda	statusbyte
      7  a0b2		       20 9f a5 	      jsr	hexstr
      0  a0b5					      HEXPOKE	(midi_display+3),mididata0
      1  a0b5		       a9 50		      lda	#<(midi_display+3)
      2  a0b7		       85 22		      sta	$22
      3  a0b9		       a9 1e		      lda	#>(midi_display+3)
      4  a0bb		       85 23		      sta	$23
      5  a0bd
      6  a0bd		       a5 fc		      lda	mididata0
      7  a0bf		       20 9f a5 	      jsr	hexstr
      0  a0c2					      HEXPOKE	(midi_display+6),mididata1
      1  a0c2		       a9 53		      lda	#<(midi_display+6)
      2  a0c4		       85 22		      sta	$22
      3  a0c6		       a9 1e		      lda	#>(midi_display+6)
      4  a0c8		       85 23		      sta	$23
      5  a0ca
      6  a0ca		       a5 fd		      lda	mididata1
      7  a0cc		       20 9f a5 	      jsr	hexstr
    147  a0cf
    148  a0cf							; Save channel
    149  a0cf		       a5 fb		      lda	statusbyte
    150  a0d1		       29 0f		      and	#$0F
    151  a0d3		       85 49		      sta	channel
    152  a0d5
    153  a0d5							; Determine Command
    154  a0d5		       a5 fb		      lda	statusbyte	; Status Byte
    155  a0d7		       29 f0		      and	#$F0	; Get the upper nybble
    156  a0d9
    157  a0d9		       c9 80		      cmp	#$80	; Note Off
    158  a0db		       f0 0f		      beq	donoteoff
    159  a0dd
    160  a0dd		       c9 90		      cmp	#$90	; Note On
    161  a0df		       f0 11		      beq	donoteon
    162  a0e1
    163  a0e1		       c9 b0		      cmp	#$B0	; Control Change
    164  a0e3		       f0 13		      beq	docontrolchange
    165  a0e5
    166  a0e5		       c9 c0		      cmp	#$C0	; Program Change
    167  a0e7		       f0 15		      beq	doprogramchange
    168  a0e9
    169  a0e9							; All others (Aftertouch, etc.) ignored.
    170  a0e9		       4c 6d a0 	      jmp	loop
    171  a0ec
    172  a0ec				   donoteoff
    173  a0ec		       20 a8 a1 	      jsr	noteoff
    174  a0ef		       4c 6d a0 	      jmp	loop
    175  a0f2
    176  a0f2				   donoteon
    177  a0f2		       20 04 a1 	      jsr	noteon
    178  a0f5		       4c 6d a0 	      jmp	loop
    179  a0f8
    180  a0f8				   docontrolchange
    181  a0f8		       20 c1 a1 	      jsr	controlchange
    182  a0fb		       4c 6d a0 	      jmp	loop
    183  a0fe
    184  a0fe				   doprogramchange
    185  a0fe		       20 5b a2 	      jsr	programchange
    186  a101		       4c 6d a0 	      jmp	loop
    187  a104
    188  a104
    189  a104							;*****************************************************************************
    190  a104							;*************************  MIDI Processing  *********************************
    191  a104							;*****************************************************************************
    192  a104
    193  a104							; ---- Note On ---------------------------------------------------
    194  a104							; 9c nn vv
    195  a104
    196  a104				   noteon
    197  a104							; Special Case: Treat Velocity=0 as Note Off.	Velocity ignored otherwise.
    198  a104		       a5 fd		      lda	mididata1
    199  a106		       d0 03		      bne	noteon_contd
    200  a108		       4c a8 a1 	      jmp	noteoff
    201  a10b
    202  a10b				   noteon_contd
    203  a10b		       a4 49		      ldy	channel	; Y now contains Channel # (0-offset)
    204  a10d		       a6 fc		      ldx	mididata0	; X now contains MIDI Note #
    205  a10f
    206  a10f							; Special Case: Channel 5 used for Poly mode
    207  a10f		       c0 04		      cpy	#$04
    208  a111		       d0 03		      bne	savenote
    209  a113		       20 00 a6 	      jsr	get_poly_voice
    210  a116
    211  a116				   savenote
    212  a116							; Save the note# so that later Note Offs only apply to this note.
    213  a116		       8a		      txa
    214  a117		       99 68 00 	      sta	lastnote,y
    215  a11a
    216  a11a							; Perform a table lookup of MIDI Note# to VIC Register
    217  a11a							; Table to use depends on bank/voice/channel
    218  a11a
    219  a11a							; Check the bank
    220  a11a		       a5 4a		      lda	bank
    221  a11c
    222  a11c		       c9 00		      cmp	#$00
    223  a11e		       f0 0d		      beq	lookups_ntsc
    224  a120
    225  a120		       c9 01		      cmp	#$01
    226  a122		       f0 32		      beq	lookups_pal
    227  a124
    228  a124		       c9 02		      cmp	#$02
    229  a126		       f0 57		      beq	lookups_alt
    230  a128
    231  a128		       c9 03		      cmp	#$03
    232  a12a		       f0 53		      beq	lookups_alt
    233  a12c
    234  a12c							; Ignore all other banks
    235  a12c		       60		      rts
    236  a12d
    237  a12d
    238  a12d							; ------ NTSC -------
    239  a12d
    240  a12d				   lookups_ntsc
    241  a12d		       c0 00		      cpy	#$00
    242  a12f		       f0 0d		      beq	vlook1_ntsc
    243  a131
    244  a131		       c0 01		      cpy	#$01
    245  a133		       f0 0f		      beq	vlook2_ntsc
    246  a135
    247  a135		       c0 02		      cpy	#$02
    248  a137		       f0 11		      beq	vlook3_ntsc
    249  a139
    250  a139		       c0 03		      cpy	#$03
    251  a13b		       f0 13		      beq	vlook4_ntsc
    252  a13d
    253  a13d							; Ignore all other channels
    254  a13d		       60		      rts
    255  a13e
    256  a13e				   vlook1_ntsc
    257  a13e		       bd e2 a6 	      lda	voice1lookup_ntsc,x
    258  a141		       4c e1 a2 	      jmp	setvoice
    259  a144
    260  a144				   vlook2_ntsc
    261  a144		       bd 62 a7 	      lda	voice2lookup_ntsc,x
    262  a147		       4c e1 a2 	      jmp	setvoice
    263  a14a
    264  a14a				   vlook3_ntsc
    265  a14a		       bd e2 a7 	      lda	voice3lookup_ntsc,x
    266  a14d		       4c e1 a2 	      jmp	setvoice
    267  a150
    268  a150				   vlook4_ntsc
    269  a150		       bd 62 a8 	      lda	voice4lookup_ntsc,x
    270  a153		       4c e1 a2 	      jmp	setvoice
    271  a156
    272  a156							; ------ PAL -------
    273  a156
    274  a156				   lookups_pal
    275  a156		       c0 00		      cpy	#$00
    276  a158		       f0 0d		      beq	vlook1_pal
    277  a15a
    278  a15a		       c0 01		      cpy	#$01
    279  a15c		       f0 0f		      beq	vlook2_pal
    280  a15e
    281  a15e		       c0 02		      cpy	#$02
    282  a160		       f0 11		      beq	vlook3_pal
    283  a162
    284  a162		       c0 03		      cpy	#$03
    285  a164		       f0 13		      beq	vlook4_pal
    286  a166
    287  a166							; Ignore all other channels
    288  a166		       60		      rts
    289  a167
    290  a167				   vlook1_pal
    291  a167		       bd e2 a8 	      lda	voice1lookup_pal,x
    292  a16a		       4c e1 a2 	      jmp	setvoice
    293  a16d
    294  a16d				   vlook2_pal
    295  a16d		       bd 62 a9 	      lda	voice2lookup_pal,x
    296  a170		       4c e1 a2 	      jmp	setvoice
    297  a173
    298  a173				   vlook3_pal
    299  a173		       bd e2 a9 	      lda	voice3lookup_pal,x
    300  a176		       4c e1 a2 	      jmp	setvoice
    301  a179
    302  a179				   vlook4_pal
    303  a179		       bd 62 aa 	      lda	voice4lookup_pal,x
    304  a17c		       4c e1 a2 	      jmp	setvoice
    305  a17f
    306  a17f							; ------ Alternate -------
    307  a17f
    308  a17f				   lookups_alt
    309  a17f		       c0 00		      cpy	#$00
    310  a181		       f0 0d		      beq	vlook1_alt
    311  a183
    312  a183		       c0 01		      cpy	#$01
    313  a185		       f0 0f		      beq	vlook2_alt
    314  a187
    315  a187		       c0 02		      cpy	#$02
    316  a189		       f0 11		      beq	vlook3_alt
    317  a18b
    318  a18b		       c0 03		      cpy	#$03
    319  a18d		       f0 13		      beq	vlook4_alt
    320  a18f
    321  a18f							; Ignore all other channels
    322  a18f		       60		      rts
    323  a190
    324  a190				   vlook1_alt
    325  a190		       bd e2 aa 	      lda	voice1lookup_alt,x
    326  a193		       4c e1 a2 	      jmp	setvoice
    327  a196
    328  a196				   vlook2_alt
    329  a196		       bd 62 ab 	      lda	voice2lookup_alt,x
    330  a199		       4c e1 a2 	      jmp	setvoice
    331  a19c
    332  a19c				   vlook3_alt
    333  a19c		       bd e2 ab 	      lda	voice3lookup_alt,x
    334  a19f		       4c e1 a2 	      jmp	setvoice
    335  a1a2
    336  a1a2				   vlook4_alt
    337  a1a2		       bd 62 ac 	      lda	voice4lookup_alt,x
    338  a1a5		       4c e1 a2 	      jmp	setvoice
    339  a1a8
    340  a1a8							; ---- Note Off --------------------------------------------------------------
    341  a1a8							; 8c nn vv
    342  a1a8
    343  a1a8				   noteoff
    344  a1a8		       a4 49		      ldy	channel	; Y now contains channel #
    345  a1aa
    346  a1aa							; Special Case: Channel 5 used for Poly mode
    347  a1aa		       c0 04		      cpy	#$04
    348  a1ac		       d0 06		      bne	noteoff_check
    349  a1ae
    350  a1ae		       20 15 a6 	      jsr	get_poly_voice_off
    351  a1b1		       4c bb a1 	      jmp	noteoff_off
    352  a1b4
    353  a1b4				   noteoff_check
    354  a1b4							;For Channels 1-4
    355  a1b4							;Check if it matches the last.  If not, ignore.
    356  a1b4		       b9 68 00 	      lda	lastnote,y
    357  a1b7		       c5 fc		      cmp	mididata0
    358  a1b9		       d0 05		      bne	noteoff_x
    359  a1bb
    360  a1bb				   noteoff_off
    361  a1bb		       a9 00		      lda	#$00	; Off
    362  a1bd		       4c e1 a2 	      jmp	setvoice
    363  a1c0
    364  a1c0				   noteoff_x
    365  a1c0		       60		      rts
    366  a1c1
    367  a1c1							; ---- Control Change --------------------------------------------------------
    368  a1c1							; Bc CC vv
    369  a1c1
    370  a1c1				   controlchange
    371  a1c1		       a4 49		      ldy	channel	; Y now contains channel #
    372  a1c3
    373  a1c3		       a5 fc		      lda	mididata0	; Controller number
    374  a1c5
    375  a1c5		       c9 00		      cmp	#00	; Bank select - decimal
    376  a1c7		       f0 15		      beq	bankselect
    377  a1c9
    378  a1c9		       c9 01		      cmp	#01	; Modulation Wheel (coarse) - decimal
    379  a1cb		       f0 57		      beq	modwheel
    380  a1cd
    381  a1cd		       c9 07		      cmp	#07	; Volume (coarse) - decimal
    382  a1cf		       f0 5a		      beq	volume
    383  a1d1
    384  a1d1		       c9 4a		      cmp	#74	; Brightness - decimal
    385  a1d3		       f0 6d		      beq	screencolors
    386  a1d5
    387  a1d5		       c9 78		      cmp	#120	; All Sound Off - decimal
    388  a1d7		       f0 7d		      beq	soundoff
    389  a1d9
    390  a1d9		       c9 7b		      cmp	#123	; All Notes Off - decimal
    391  a1db		       f0 79		      beq	soundoff
    392  a1dd
    393  a1dd							; Ignore all the rest
    394  a1dd		       60		      rts
    395  a1de
    396  a1de							; ---- Bank Select -----------------------------------------------------------
    397  a1de							; Bc 00 vv
    398  a1de
    399  a1de				   bankselect
    400  a1de		       a5 fd		      lda	mididata1
    401  a1e0		       29 03		      and	#$03	; A contains bank, 0-3
    402  a1e2		       85 4a		      sta	bank
    403  a1e4
    404  a1e4				   showbank
      0  a1e4					      HEXPOKE	(voice_display+132),bank
      1  a1e4		       a9 fb		      lda	#<(voice_display+132)
      2  a1e6		       85 22		      sta	$22
      3  a1e8		       a9 1e		      lda	#>(voice_display+132)
      4  a1ea		       85 23		      sta	$23
      5  a1ec
      6  a1ec		       a5 4a		      lda	bank
      7  a1ee		       20 9f a5 	      jsr	hexstr
    406  a1f1
      0  a1f1					      PLOT	9,13
      1  a1f1		       a0 09		      ldy	#9
      2  a1f3		       a2 0d		      ldx	#13
      3  a1f5		       18		      clc
      4  a1f6		       20 0a e5 	      jsr	$E50A
    408  a1f9
    409  a1f9		       a5 4a		      lda	bank
    410  a1fb
    411  a1fb		       c9 00		      cmp	#$00
    412  a1fd		       f0 0d		      beq	ntsc
    413  a1ff
    414  a1ff		       c9 01		      cmp	#$01
    415  a201		       f0 11		      beq	pal
    416  a203
    417  a203		       c9 02		      cmp	#$02
    418  a205		       f0 15		      beq	alt
    419  a207
    420  a207		       c9 03		      cmp	#$03
    421  a209		       f0 11		      beq	alt
    422  a20b
    423  a20b							; Ignore the rest
    424  a20b		       60		      rts
    425  a20c
    426  a20c				   ntsc
      0  a20c					      PRINTSTRING	ntscstring
      1  a20c		       a0 a5		      ldy	#>ntscstring
      2  a20e		       a9 10		      lda	#<ntscstring
      3  a210		       20 1e cb 	      jsr	STROUT
    428  a213		       60		      rts
    429  a214
    430  a214				   pal
      0  a214					      PRINTSTRING	palstring
      1  a214		       a0 a5		      ldy	#>palstring
      2  a216		       a9 0b		      lda	#<palstring
      3  a218		       20 1e cb 	      jsr	STROUT
    432  a21b		       60		      rts
    433  a21c
    434  a21c				   alt
      0  a21c					      PRINTSTRING	altstring
      1  a21c		       a0 a5		      ldy	#>altstring
      2  a21e		       a9 15		      lda	#<altstring
      3  a220		       20 1e cb 	      jsr	STROUT
    436  a223		       60		      rts
    437  a224
    438  a224							; ---- MOD Wheel Controller --------------------------------------------------
    439  a224							; Bc 01 vv
    440  a224
    441  a224							; Poke the data directly to the register, after OR'ing with $80
    442  a224				   modwheel
    443  a224		       a5 fd		      lda	mididata1
    444  a226		       09 80		      ora	#$80
    445  a228		       4c e1 a2 	      jmp	setvoice
    446  a22b
    447  a22b							; ---- Volume Controller -----------------------------------------------------
    448  a22b							; Bc 07 vv
    449  a22b
    450  a22b				   volume
    451  a22b		       a5 fd		      lda	mididata1
    452  a22d		       4a		      lsr
    453  a22e		       4a		      lsr
    454  a22f		       4a		      lsr
    455  a230
    456  a230				   setvolume
    457  a230		       8d 0e 90 	      sta	sound_volume
      0  a233					      HEXPOKE	(voice_display+110),sound_volume
      1  a233		       a9 e5		      lda	#<(voice_display+110)
      2  a235		       85 22		      sta	$22
      3  a237		       a9 1e		      lda	#>(voice_display+110)
      4  a239		       85 23		      sta	$23
      5  a23b
      6  a23b		       ad 0e 90 	      lda	sound_volume
      7  a23e		       20 9f a5 	      jsr	hexstr
    459  a241		       60		      rts
    460  a242
    461  a242							; ---- Brightness Controller (used for screen color)--------------------------
    462  a242							; Bc 4a vv
    463  a242
    464  a242				   screencolors
    465  a242		       18		      clc
    466  a243		       a5 fd		      lda	mididata1	; 7-bit
    467  a245
    468  a245		       29 07		      and	#%00000111	; Get border
    469  a247		       85 6c		      sta	temp1
    470  a249
    471  a249		       a5 fd		      lda	mididata1
    472  a24b		       29 78		      and	#%01111000	; Get background
    473  a24d		       0a		      asl		; Shift 1 bit left
    474  a24e
    475  a24e		       05 6c		      ora	temp1	; Put border back in
    476  a250		       09 08		      ora	#%00001000	; No Reverse Mode
    477  a252
    478  a252		       8d 0f 90 	      sta	screen_colors
    479  a255		       60		      rts
    480  a256
    481  a256							; ---- Sound Off / All Notes Off Controller-----------------------------------
    482  a256							; Bc 78 xx
    483  a256							; Bc 7B xx
    484  a256
    485  a256				   soundoff
    486  a256		       a9 00		      lda	#$00	; Off
    487  a258		       4c e1 a2 	      jmp	setvoice
    488  a25b
    489  a25b
    490  a25b							; ---- Program Change --------------------------------------------------------
    491  a25b							; Cc pn  <NOTE 2 bytes!>
    492  a25b
    493  a25b				   programchange
    494  a25b							; Blank the unused MIDI byte
    495  a25b		       a9 2d		      lda	#45	; -
    496  a25d		       8d 53 1e 	      sta	midi_display+6
    497  a260		       8d 54 1e 	      sta	midi_display+7
    498  a263
    499  a263							; Get low nybble and replace, since there are only 16 viznut waveforms
    500  a263		       a5 fc		      lda	mididata0
    501  a265		       29 0f		      and	#$0f
    502  a267		       85 fc		      sta	mididata0	; Note that this is the waveform NUMBER, not the VALUE!
    503  a269
    504  a269		       a4 49		      ldy	channel	; Y now contains channel #
    505  a26b		       99 10 10 	      sta	waveform1,y	; Store waveform used
    506  a26e
    507  a26e		       c0 00		      cpy	#00
    508  a270		       f0 0d		      beq	pc_0
    509  a272
    510  a272		       c0 01		      cpy	#01
    511  a274		       f0 18		      beq	pc_1
    512  a276
    513  a276		       c0 02		      cpy	#02
    514  a278		       f0 23		      beq	pc_2
    515  a27a
    516  a27a		       c0 03		      cpy	#03	; Not sure if viznut's waveforms applies to the noise voice,
    517  a27c		       f0 2e		      beq	pc_3	; but keep it in away.
    518  a27e
    519  a27e							; Ignore all other channels
    520  a27e		       60		      rts
    521  a27f
    522  a27f							; Update the screen with Program# (viznut waveform code)
    523  a27f							; Note that these are not actually used until setvoice is called below [1]
    524  a27f
    525  a27f				   pc_0
      0  a27f					      HEXPOKE	(voice_display+ 5),waveform1
      1  a27f		       a9 7c		      lda	#<(voice_display+ 5)
      2  a281		       85 22		      sta	$22
      3  a283		       a9 1e		      lda	#>(voice_display+ 5)
      4  a285		       85 23		      sta	$23
      5  a287
      6  a287		       ad 10 10 	      lda	waveform1
      7  a28a		       20 9f a5 	      jsr	hexstr
    527  a28d		       60		      rts
    528  a28e
    529  a28e				   pc_1
      0  a28e					      HEXPOKE	(voice_display+27),waveform2
      1  a28e		       a9 92		      lda	#<(voice_display+27)
      2  a290		       85 22		      sta	$22
      3  a292		       a9 1e		      lda	#>(voice_display+27)
      4  a294		       85 23		      sta	$23
      5  a296
      6  a296		       ad 11 10 	      lda	waveform2
      7  a299		       20 9f a5 	      jsr	hexstr
    531  a29c		       60		      rts
    532  a29d
    533  a29d				   pc_2
      0  a29d					      HEXPOKE	(voice_display+49),waveform3
      1  a29d		       a9 a8		      lda	#<(voice_display+49)
      2  a29f		       85 22		      sta	$22
      3  a2a1		       a9 1e		      lda	#>(voice_display+49)
      4  a2a3		       85 23		      sta	$23
      5  a2a5
      6  a2a5		       ad 12 10 	      lda	waveform3
      7  a2a8		       20 9f a5 	      jsr	hexstr
    535  a2ab		       60		      rts
    536  a2ac
    537  a2ac				   pc_3
      0  a2ac					      HEXPOKE	(voice_display+71),waveform4
      1  a2ac		       a9 be		      lda	#<(voice_display+71)
      2  a2ae		       85 22		      sta	$22
      3  a2b0		       a9 1e		      lda	#>(voice_display+71)
      4  a2b2		       85 23		      sta	$23
      5  a2b4
      6  a2b4		       ad 13 10 	      lda	waveform4
      7  a2b7		       20 9f a5 	      jsr	hexstr
    539  a2ba		       60		      rts
    540  a2bb
    541  a2bb
    542  a2bb							;---------------------------------------------------------
    543  a2bb							; Set a voice using viznut's setwave function.
    544  a2bb							; If a sound is already playing, fine.  But if not, need a "short" delay.  TODO ***
    545  a2bb
    546  a2bb				   viznut
    547  a2bb		       a4 49		      ldy	channel	; Channel # (0-3)
    548  a2bd		       b9 1a a5 	      lda	voice_to_register,y
    549  a2c0		       8d 20 10 	      sta	setwavechannel
    550  a2c3
    551  a2c3		       a5 5e		      lda	currentvalue	; X now contains initial frequency of selected channel
    552  a2c5		       8d 21 10 	      sta	setwavefrequency
    553  a2c8
    554  a2c8		       a4 49		      ldy	channel
    555  a2ca		       b9 10 10 	      lda	waveform1,y	; Retrieve the last desired waveform# for this channel
    556  a2cd		       aa		      tax
    557  a2ce		       bd d2 a6 	      lda	viznutwaveforms,x	; Retrieve the desired shift register contents for that waveform#
    558  a2d1		       8d 22 10 	      sta	setwaveshiftreg
    559  a2d4
    560  a2d4							; Set X,Y,A as required and set the waveform.
    561  a2d4		       ac 20 10 	      ldy	setwavechannel
    562  a2d7		       ae 21 10 	      ldx	setwavefrequency
    563  a2da		       ad 22 10 	      lda	setwaveshiftreg
    564  a2dd		       20 00 11 	      jsr	setwave
    565  a2e0
    566  a2e0							; TODO, update the screen
    567  a2e0		       60		      rts
    568  a2e1
    569  a2e1
    570  a2e1							;***************************************************************************
    571  a2e1							;*******************  Set/Display Functions  *******************************
    572  a2e1							;***************************************************************************
    573  a2e1
    574  a2e1							; Dispatcher for setting the appropriate voice and updating the screen
    575  a2e1							; Channel# in Y (Channel 0 = Voice 1, etc)
    576  a2e1							; Value to set it to in A.
    577  a2e1
    578  a2e1				   setvoice
    579  a2e1		       85 5e		      sta	currentvalue
    580  a2e3
    581  a2e3							; Before setting the voice, check if a viznut waveform was selected previously [1]
    582  a2e3							; If so, handle that separately.
    583  a2e3							;lda waveform1,y
    584  a2e3							;bne viznut
    585  a2e3
    586  a2e3							; Nope, carry on.
    587  a2e3		       a5 5e		      lda	currentvalue
    588  a2e5		       a4 49		      ldy	channel	; Y now contains channel #
    589  a2e7
    590  a2e7		       c0 00		      cpy	#$00
    591  a2e9		       f0 0d		      beq	v1
    592  a2eb
    593  a2eb		       c0 01		      cpy	#$01
    594  a2ed		       f0 1b		      beq	v2
    595  a2ef
    596  a2ef		       c0 02		      cpy	#$02
    597  a2f1		       f0 29		      beq	v3
    598  a2f3
    599  a2f3		       c0 03		      cpy	#$03
    600  a2f5		       f0 37		      beq	v4
    601  a2f7
    602  a2f7							; Ignore all other channels
    603  a2f7		       60		      rts
    604  a2f8
    605  a2f8							; ---- Voice 1 -------
    606  a2f8				   v1
    607  a2f8		       8d 0a 90 	      sta	sound_voice1
      0  a2fb					      HEXPOKE	(voice_display+00),sound_voice1
      1  a2fb		       a9 77		      lda	#<(voice_display+00)
      2  a2fd		       85 22		      sta	$22
      3  a2ff		       a9 1e		      lda	#>(voice_display+00)
      4  a301		       85 23		      sta	$23
      5  a303
      6  a303		       ad 0a 90 	      lda	sound_voice1
      7  a306		       20 9f a5 	      jsr	hexstr
    609  a309		       60		      rts
    610  a30a
    611  a30a							; ---- Voice 2 -------
    612  a30a				   v2
    613  a30a		       8d 0b 90 	      sta	sound_voice2
      0  a30d					      HEXPOKE	(voice_display+22),sound_voice2
      1  a30d		       a9 8d		      lda	#<(voice_display+22)
      2  a30f		       85 22		      sta	$22
      3  a311		       a9 1e		      lda	#>(voice_display+22)
      4  a313		       85 23		      sta	$23
      5  a315
      6  a315		       ad 0b 90 	      lda	sound_voice2
      7  a318		       20 9f a5 	      jsr	hexstr
    615  a31b		       60		      rts
    616  a31c
    617  a31c							; ---- Voice 3 -------
    618  a31c				   v3
    619  a31c		       8d 0c 90 	      sta	sound_voice3
      0  a31f					      HEXPOKE	(voice_display+44),sound_voice3
      1  a31f		       a9 a3		      lda	#<(voice_display+44)
      2  a321		       85 22		      sta	$22
      3  a323		       a9 1e		      lda	#>(voice_display+44)
      4  a325		       85 23		      sta	$23
      5  a327
      6  a327		       ad 0c 90 	      lda	sound_voice3
      7  a32a		       20 9f a5 	      jsr	hexstr
    621  a32d		       60		      rts
    622  a32e
    623  a32e							; ---- Voice 4 -------
    624  a32e				   v4
    625  a32e		       8d 0d 90 	      sta	sound_noise
      0  a331					      HEXPOKE	(voice_display+66),sound_noise
      1  a331		       a9 b9		      lda	#<(voice_display+66)
      2  a333		       85 22		      sta	$22
      3  a335		       a9 1e		      lda	#>(voice_display+66)
      4  a337		       85 23		      sta	$23
      5  a339
      6  a339		       ad 0d 90 	      lda	sound_noise
      7  a33c		       20 9f a5 	      jsr	hexstr
    627  a33f		       60		      rts
    628  a340
    629  a340							; ----------------------------------------------------------------------------
    630  a340
    631  a340				   setcolors
    632  a340		       a2 00		      ldx	#$00
    633  a342		       a9 00		      lda	#$00
    634  a344				   setcolorsloop
    635  a344		       9d 00 96 	      sta	$9600,x
    636  a347		       9d 00 97 	      sta	$9700,x
    637  a34a		       e8		      inx
    638  a34b		       e0 00		      cpx	#$00
    639  a34d		       d0 f5		      bne	setcolorsloop
    640  a34f		       60		      rts
    641  a350
    642  a350							; ----------------------------------------------------------------------------
    643  a350							; Draw Main Screen
    644  a350
    645  a350				   mainscreen
    646  a350		       20 5f e5 	      jsr	CLRSCREEN
    647  a353		       a9 1f		      lda	#31	; Decimal, white and yellow
    648  a355		       8d 0f 90 	      sta	screen_colors
    649  a358		       a9 06		      lda	#$06	; Blue
    650  a35a		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a35d					      PRINTSTRING	maintext
      1  a35d		       a0 a3		      ldy	#>maintext
      2  a35f		       a9 ae		      lda	#<maintext
      3  a361		       20 1e cb 	      jsr	STROUT
    652  a364		       a9 7f		      lda	#$7F	; was#$6C
    653  a366		       8d f9 1f 	      sta	spin_display
    654  a369		       60		      rts
    655  a36a
    656  a36a
    657  a36a							; ----------------------------------------------------------------------------
    658  a36a							; Draw Credits Screen
    659  a36a
    660  a36a				   creditscreen
    661  a36a		       20 5f e5 	      jsr	CLRSCREEN
    662  a36d		       a9 1e		      lda	#30	; Decimal, white and blue
    663  a36f		       8d 0f 90 	      sta	screen_colors
    664  a372		       a9 02		      lda	#$02	; Red
    665  a374		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a377					      PRINTSTRING	credits
      1  a377		       a0 a4		      ldy	#>credits
      2  a379		       a9 49		      lda	#<credits
      3  a37b		       20 1e cb 	      jsr	STROUT
    667  a37e		       60		      rts
    668  a37f
    669  a37f
    670  a37f							; ----------------------------------------------------------------------------
    671  a37f							; setwave needs to start on a page and is self-modifying,
    672  a37f							; so it is copied to RAM here
    673  a37f
    674  a37f				   setwavecopy
    675  a37f		       a2 00		      ldx	#$00
    676  a381				   copy1
    677  a381		       bd a5 a6 	      lda	setwaveorg,x
    678  a384		       9d 00 11 	      sta	setwave,x
    679  a387		       e8		      inx
    680  a388		       d0 f7		      bne	copy1
    681  a38a		       60		      rts
    682  a38b
    683  a38b
    684  a38b							; ----------------------------------------------------------------------------
    685  a38b							; Set up the font
    686  a38b							;
    687  a38b
    688  a38b				   setupfont
    689  a38b		       a2 00		      ldx	#$00
    690  a38d				   copy2
    691  a38d		       bd e2 ac 	      lda	fontorg,x
    692  a390		       9d 00 18 	      sta	font,x
    693  a393		       bd e2 ad 	      lda	fontorg+$100,x
    694  a396		       9d 00 19 	      sta	font+$100,x
    695  a399		       bd e2 ae 	      lda	fontorg+$200,x
    696  a39c		       9d 00 1a 	      sta	font+$200,x
    697  a39f		       bd e2 af 	      lda	fontorg+$300,x
    698  a3a2		       9d 00 1b 	      sta	font+$300,x
    699  a3a5		       e8		      inx
    700  a3a6		       d0 e5		      bne	copy2
    701  a3a8
    702  a3a8		       a9 fe		      lda	#254	; Decimal  Points char. to 6144
    703  a3aa		       8d 05 90 	      sta	$9005
    704  a3ad
    705  a3ad		       60		      rts
    706  a3ae
    707  a3ae							; ----------------------------------------------------------------------------
    708  a3ae							; Strings
    709  a3ae
    710  a3ae				   maintext
    711  a3ae		       0e 08		      byte.b	CG_LCS, CG_DCS
    712  a3b0		       2a 76 69 63*	      byte.b	"*vic20 midi iNTERFACE*", CRLF
    713  a3c7		       0d		      byte.b	CRLF
    714  a3c8		       6d 69 64 69*	      byte.b	"midi dATA: --:--:--", CRLF
    715  a3dc		       0d		      byte.b	CRLF
    716  a3dd		       76 4f 49 43*	      byte.b	"vOICE 1: -- / --", CRLF
    717  a3ee		       76 4f 49 43*	      byte.b	"vOICE 2: -- / --", CRLF
    718  a3ff		       76 4f 49 43*	      byte.b	"vOICE 3: -- / --", CRLF
    719  a410		       76 4f 49 43*	      byte.b	"vOICE 4: -- / --", CRLF
    720  a421		       0d		      byte.b	CRLF
    721  a422		       76 4f 4c 55*	      byte.b	"vOLUME : --", CRLF
    722  a42e		       62 41 4e 4b*	      byte.b	"bANK	 : --", CRLF
    723  a43a		       0d		      byte.b	CRLF
    724  a43b		       73 59 53 54*	      byte.b	"sYSTEM : ???", CRLF
    725  a448		       00		      byte.b	0
    726  a449
    727  a449
    728  a449				   credits
    729  a449		       0e 08		      byte.b	CG_LCS, CG_DCS
    730  a44b		       20 2a 76 69*	      byte.b	" *vic20 midi cREDITS*", CRLF
    731  a461		       0d		      byte.b	CRLF
    732  a462		       68 41 52 44*	      byte.b	"hARDWARE:", CRLF
    733  a46c		       0d		      byte.b	CRLF
    734  a46d		       20 20 6a 49*	      byte.b	"  jIM bRAIN", CRLF
    735  a479		       20 20 66 52*	      byte.b	"  fRANCOIS lEVEILLE", CRLF
    736  a48d		       20 20 6c 64*	      byte.b	"  ld bALL", CRLF
    737  a497		       0d		      byte.b	CRLF
    738  a498		       73 4f 46 54*	      byte.b	"sOFTWARE:", CRLF
    739  a4a2		       0d		      byte.b	CRLF
    740  a4a3		       20 6c 45 49*	      byte.b	" lEIF bLOOMQUIST", CRLF
    741  a4b4		       20 64 41 56*	      byte.b	" dAVID vIENS", CRLF
    742  a4c1		       20 6d 49 43*	      byte.b	" mICHAEL kIRCHER", CRLF
    743  a4d2		       20 76 49 5a*	      byte.b	" vIZNUT", CRLF
    744  a4da		       0d		      byte.b	CRLF
    745  a4db		       74 48 41 4e*	      byte.b	"tHANKS TO EVERYONE", CRLF
    746  a4ee		       4f 4e 20 54*	      byte.b	"ON THE vic20 dENIAL", CRLF
    747  a502		       46 4f 52 55*	      byte.b	"FORUMS!", CRLF
    748  a50a		       00		      byte.b	0
    749  a50b
    750  a50b				   palstring
    751  a50b		       70 61 6c 20*	      .byte.b	"pal ",0
    752  a510
    753  a510				   ntscstring
    754  a510		       6e 74 73 63*	      .byte.b	"ntsc",0
    755  a515
    756  a515				   altstring
    757  a515		       61 6c 74 20*	      .byte.b	"alt ",0
    758  a51a
    759  a51a							; ----------------------------------------------------------------------------
    760  a51a							; Lookup table between voice #(0-3) and low byte of register# ($0A-$0D)
    761  a51a
    762  a51a				   voice_to_register
    763  a51a		       0a 0b 0c 0d	      byte.b	$0A,$0B,$0C,$0D
    764  a51e
    765  a51e
    766  a51e							; ----------------------------------------------------------------------------
    767  a51e							; Code includes
    768  a51e
------- FILE hardware.asm LEVEL 2 PASS 2
      0  a51e					      include	"hardware.asm"
      1  a51e							;***************************************************************************
      2  a51e							;*******************	 Hardware Functions   *******************************
      3  a51e							;***************************************************************************
      4  a51e
      5  a51e							; ----------------------------------------------------------------------------
      6  a51e							; Confirm the presence of the ST16C450 UART
      7  a51e				   checkuart
      8  a51e		       a9 55		      lda	#$55
      9  a520		       8d 07 9c 	      sta	UART_SCRATCHPAD
     10  a523
     11  a523		       ad 07 9c 	      lda	UART_SCRATCHPAD
     12  a526		       c9 55		      cmp	#$55
     13  a528		       f0 1c		      beq	checkuart_ok
     14  a52a
     15  a52a							; Not found!
      0  a52a					      PLOT	0,20
      1  a52a		       a0 00		      ldy	#0
      2  a52c		       a2 14		      ldx	#20
      3  a52e		       18		      clc
      4  a52f		       20 0a e5 	      jsr	$E50A
      0  a532					      PRINTSTRING	nouart
      1  a532		       a0 a5		      ldy	#>nouart
      2  a534		       a9 89		      lda	#<nouart
      3  a536		       20 1e cb 	      jsr	STROUT
     18  a539
     19  a539				   uloop
     20  a539		       a9 18		      lda	#24
     21  a53b		       8d 0f 90 	      sta	screen_colors
     22  a53e		       a9 1a		      lda	#26
     23  a540		       8d 0f 90 	      sta	screen_colors
     24  a543		       4c 39 a5 	      jmp	uloop
     25  a546
     26  a546				   checkuart_ok
     27  a546		       60		      rts
     28  a547
     29  a547							; ----------------------------------------------------------------------------
     30  a547							; Set up the UART
     31  a547
     32  a547				   resetuart
     33  a547							; Expose the divisor latch.
     34  a547		       a9 80		      lda	#%10000000
     35  a549		       8d 03 9c 	      sta	UART_LCR
     36  a54c
     37  a54c							; Set the MIDI baud rate.
     38  a54c							; The ST16C450 datasheet says that it divides the input clock rate by
     39  a54c							; 16, so with a 2MHz crystal on board, that gives
     40  a54c							; 2000000 * (1/16) * (1/x) = 31250.  Solving gives x=4 for the low
     41  a54c							; byte of the divisor, and 0 for the high byte.
     42  a54c
     43  a54c		       a2 00		      ldx	#$00
     44  a54e		       a0 08		      ldy	#$08	; For 4MHz crystal
     45  a550		       8e 01 9c 	      stx	UART_DIVISOR_MSB
     46  a553		       8c 00 9c 	      sty	UART_DIVISOR_LSB
     47  a556
     48  a556							; Set to MIDI: Word length 8, Stop bits 1, no parity (also hides divisor latch)
     49  a556		       a9 03		      lda	#%00000011
     50  a558		       8d 03 9c 	      sta	UART_LCR
     51  a55b
     52  a55b							; Enable the interrupt when data is received
     53  a55b		       a9 01		      lda	#%00000001
     54  a55d		       8d 01 9c 	      sta	UART_IER
     55  a560		       60		      rts
     56  a561
     57  a561							; ----------------------------------------------------------------------------
     58  a561							; Set up the IRQ for reading bytes from the UART
     59  a561
     60  a561				   setupirq
     61  a561		       78		      sei
     62  a562
     63  a562							; Point to my interrupt vector
     64  a562		       a9 76		      lda	#<theirq
     65  a564		       8d 14 03 	      sta	$0314
     66  a567		       a9 a5		      lda	#>theirq
     67  a569		       8d 15 03 	      sta	$0315
     68  a56c
     69  a56c							; Disable timer interrupts
     70  a56c
     71  a56c		       a9 60		      lda	#%01100000
     72  a56e		       8d 2e 91 	      sta	$912e	; disable and acknowledge interrupts
     73  a571		       8d 2d 91 	      sta	$912d
     74  a574							;sta $911e	; disable NMIs (Restore key)
     75  a574
     76  a574		       58		      cli
     77  a575		       60		      rts
     78  a576
     79  a576							; ----------------------------------------------------------------------------
     80  a576							; The IRQ.
     81  a576
     82  a576				   theirq
     83  a576							; Fetch the received byte
     84  a576		       ad 00 9c 	      lda	UART_RXTX	;get data
     85  a579		       a4 5c		      ldy	write_pointer
     86  a57b		       99 00 12 	      sta	buffer,y
     87  a57e		       e6 5c		      inc	write_pointer
     88  a580
     89  a580							; Clear the interrupt from the UART by reading the status register
     90  a580		       ad 02 9c 	      lda	UART_ISR
     91  a583
     92  a583		       4c 56 ff 	      jmp	$ff56	; Use this in place of rti because it restores the A,X,Y registers from the stack
     93  a586							;jmp $eabf	; return to normal IRQ	(scans keyboard and stuff)
     94  a586
     95  a586
     96  a586							; ----------------------------------------------------------------------------
     97  a586							; Handle the RESTORE key
     98  a586
     99  a586				   RESTORE
    100  a586		       4c c7 fe 	      jmp	$fec7	; Continue as if no cartridge installed
    101  a589
    102  a589
    103  a589							; ----------------------------------------------------------------------------
    104  a589							; Strings
    105  a589
    106  a589				   nouart
    107  a589		       7f 7f 20 75*	      byte.b	127,127, " uart NOT FOUND! ", 127,127
    108  a59e		       00		      byte.b	0
    109  a59f
    110  a59f							; EOF!
------- FILE vicmidi.asm
------- FILE utils.asm LEVEL 2 PASS 2
      0  a59f					      include	"utils.asm"
      1  a59f							; VIC Version by Schema/AIC (Leif Bloomquist)
      2  a59f							; Original by Six/Style (Oliver VieBrooks)
      3  a59f
      4  a59f							; Fast POKE of hex value to screen
      5  a59f							; also see HEXPOKE macro
      6  a59f							; print hex  char $ of number in a at location referenced by screen_temp
      7  a59f
      8  a59f				   hexstr
      9  a59f		       a0 00		      ldy	#$00
     10  a5a1		       48		      pha
     11  a5a2		       29 f0		      and	#$f0
     12  a5a4		       18		      clc
     13  a5a5		       4a		      lsr
     14  a5a6		       4a		      lsr
     15  a5a7		       4a		      lsr
     16  a5a8		       4a		      lsr
     17  a5a9		       aa		      tax
     18  a5aa		       bd db a5 	      lda	hexstring,x
     19  a5ad		       91 22		      sta	($22),y
     20  a5af
     21  a5af		       c8		      iny
     22  a5b0		       68		      pla
     23  a5b1		       29 0f		      and	#$0f
     24  a5b3		       aa		      tax
     25  a5b4		       bd db a5 	      lda	hexstring,x
     26  a5b7		       91 22		      sta	($22),y
     27  a5b9		       60		      rts
     28  a5ba
     29  a5ba
     30  a5ba							; print hex  char $ of number in a    SLOW!
     31  a5ba		       00	   hexx       dc.b	$00
     32  a5bb
     33  a5bb				   printhexstr
     34  a5bb		       8e ba a5 	      stx	hexx
     35  a5be		       48		      pha
     36  a5bf		       29 f0		      and	#$f0
     37  a5c1		       18		      clc
     38  a5c2		       4a		      lsr
     39  a5c3		       4a		      lsr
     40  a5c4		       4a		      lsr
     41  a5c5		       4a		      lsr
     42  a5c6		       aa		      tax
     43  a5c7		       bd db a5 	      lda	hexstring,x
     44  a5ca		       20 d2 ff 	      jsr	$ffd2
     45  a5cd
     46  a5cd		       68		      pla
     47  a5ce		       29 0f		      and	#$0f
     48  a5d0		       aa		      tax
     49  a5d1		       bd db a5 	      lda	hexstring,x
     50  a5d4		       20 d2 ff 	      jsr	$ffd2
     51  a5d7		       ae ba a5 	      ldx	hexx
     52  a5da		       60		      rts
     53  a5db
     54  a5db				   hexstring
     55  a5db		       30 31 32 33*	      .byte.b	"0123456789ABCDEF"
     56  a5eb
     57  a5eb
     58  a5eb							; ==============================================================
     59  a5eb							; Most defaults are NTSC.  This code overrides for PAL.
     60  a5eb							; ==============================================================
     61  a5eb
     62  a5eb				   setup_pal
     63  a5eb		       ad e4 ed 	      lda	$EDE4
     64  a5ee		       c9 0c		      cmp	#$0C
     65  a5f0		       f0 07		      beq	DOPAL
     66  a5f2
     67  a5f2							; NTSC System detected
     68  a5f2		       a9 00		      lda	#$00
     69  a5f4		       85 4a		      sta	bank
     70  a5f6		       4c e4 a1 	      jmp	showbank	; There's an rts there
     71  a5f9
     72  a5f9							; PAL System detected
     73  a5f9				   DOPAL
     74  a5f9		       a9 01		      lda	#$01
     75  a5fb		       85 4a		      sta	bank
     76  a5fd		       4c e4 a1 	      jmp	showbank	; There's an rts there
     77  a600
     78  a600							; EOF!
------- FILE vicmidi.asm
------- FILE polymode.asm LEVEL 2 PASS 2
      0  a600					      include	"polymode.asm"
      1  a600
      2  a600							;***************************************************************************
      3  a600							;***************  Determine next Channel in Poly Mode (set Y) **************
      4  a600							;***************************************************************************
      5  a600				   get_poly_voice
      6  a600		       a0 00		      ldy	#$00
      7  a602
      8  a602				   get_poly_voice_loop
      9  a602		       b9 61 00 	      lda	poly_flags,y	; 0=not in use, 1=in use
     10  a605		       f0 08		      beq	get_poly_voice_x
     11  a607		       c8		      iny
     12  a608		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     13  a60a		       d0 f6		      bne	get_poly_voice_loop
     14  a60c
     15  a60c							; No free voices, ignore
     16  a60c		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note On code
     17  a60e		       60		      rts
     18  a60f
     19  a60f				   get_poly_voice_x
     20  a60f		       a9 01		      lda	#$01
     21  a611		       99 61 00 	      sta	poly_flags,y
     22  a614		       60		      rts
     23  a615
     24  a615
     25  a615							;***************************************************************************
     26  a615							;********  Determine Channel to turn off in Poly Mode (set Y) **************
     27  a615							;***************************************************************************
     28  a615				   get_poly_voice_off
     29  a615
     30  a615		       a0 00		      ldy	#$00
     31  a617
     32  a617				   get_poly_voice_off_loop
     33  a617		       b9 61 00 	      lda	poly_flags,y	; Is the channel in use?
     34  a61a		       f0 07		      beq	poly_next	; No, so skip it
     35  a61c
     36  a61c		       b9 68 00 	      lda	lastnote,y	; Get last note on this voice
     37  a61f		       c5 fc		      cmp	mididata0	; Compare to note received
     38  a621		       f0 0b		      beq	get_poly_voice_off_x	; Matched!
     39  a623
     40  a623				   poly_next
     41  a623		       c8		      iny		; Next channel
     42  a624		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     43  a626		       d0 ef		      bne	get_poly_voice_off_loop
     44  a628
     45  a628							; No match to the note to turn off, ignore
     46  a628		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note Off code
     47  a62a		       ee 0f 90 	      inc	screen_colors	; DEBUG
     48  a62d		       60		      rts
     49  a62e
     50  a62e				   get_poly_voice_off_x
     51  a62e		       a9 00		      lda	#$00
     52  a630		       99 61 00 	      sta	poly_flags,y
     53  a633		       60		      rts
     54  a634
------- FILE vicmidi.asm
------- FILE keyboard.asm LEVEL 2 PASS 2
      0  a634					      include	"keyboard.asm"
      1  a634							;*******************************************************************************************
      2  a634							;********************************  keyboard stuff  *****************************************
      3  a634							;*******************************************************************************************
      4  a634
      5  a634							; --------------------------------------------------------------------------------------------------
      6  a634							;;;;;;;;;;;;;;; keyboard stuff
      7  a634							;previous keyboard column bits
      8  a634		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
      9  a634		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     10  a634		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     11  a634		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     12  a634
     13  a634		       91 20	   kb_column  =	$9120
     14  a634		       91 21	   kb_row     =	$9121
     15  a634
     16  a634							; 9121   9120: (Write column value to this address)
     17  a634							;
     18  a634							;	  7f	  bf	  df	  ef	  f7	  fb	  fd	  fe
     19  a634							;
     20  a634							;  fe	  2	  q	  CBM	  Space   RunStop Control Lft_arr 1
     21  a634							;  fd	  4	  e	  s	  z	  Shift_L a	  w	  3
     22  a634							;  fb	  6	  t	  f	  c	  x	  d	  r	  5
     23  a634							;  f7	  8	  u	  h	  b	  v	  g	  y	  7
     24  a634							;  ef	  0	  o	  k	  m	  n	  j	  i	  9
     25  a634							;  df	  -	  @	  :	  .	  ,	  l	  p	  +
     26  a634							;  bf	  Home	  Up_arr  =	  Shift_R /	  ;	  *	  GBP
     27  a634							;  7f	  F7	  F5	  F3	  F1	  Down	  Right   Return  Del
     28  a634
     29  a634				   GetKey
     30  a634		       78		      sei
     31  a635							; this should not be done, we want to compare the OLD recorded status with new one
     32  a635							;lda #$0
     33  a635							;sta kb_column
     34  a635							;lda kb_row
     35  a635							;cmp #$FF
     36  a635							;beq NoKey	 ; no key at all pressed
     37  a635
     38  a635				   Check7F
     39  a635							;now check for each column
     40  a635		       a9 7f		      lda	#$7F
     41  a637		       8d 20 91 	      sta	kb_column
     42  a63a		       ad 21 91 	      lda	kb_row
     43  a63d		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     44  a63f		       c5 4e		      cmp	c0
     45  a641		       f0 08		      beq	CheckBF	; these arent the droids you are looking for move along
     46  a643		       85 4e		      sta	c0
     47  a645		       8d 00 1e 	      sta	$1E00
     48  a648		       4c 8a a6 	      jmp	KeyDone
     49  a64b				   CheckBF
     50  a64b							;now check for each column
     51  a64b		       a9 bf		      lda	#$BF
     52  a64d		       8d 20 91 	      sta	kb_column
     53  a650		       ad 21 91 	      lda	kb_row
     54  a653		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     55  a655		       c5 4f		      cmp	c1
     56  a657		       f0 08		      beq	CheckFD	; these arent the droids you are looking for move along
     57  a659		       85 4f		      sta	c1
     58  a65b		       8d 01 1e 	      sta	$1E01
     59  a65e		       4c 8a a6 	      jmp	KeyDone
     60  a661				   CheckFD
     61  a661							;now check for each column
     62  a661		       a9 fd		      lda	#$FD
     63  a663		       8d 20 91 	      sta	kb_column
     64  a666		       ad 21 91 	      lda	kb_row
     65  a669		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     66  a66b		       c5 50		      cmp	c2
     67  a66d		       f0 08		      beq	CheckFE	; these arent the droids you are looking for move along
     68  a66f		       85 50		      sta	c2
     69  a671		       8d 02 1e 	      sta	$1E02
     70  a674		       4c 8a a6 	      jmp	KeyDone
     71  a677				   CheckFE
     72  a677							;now check for each column
     73  a677		       a9 fe		      lda	#$FE
     74  a679		       8d 20 91 	      sta	kb_column
     75  a67c		       ad 21 91 	      lda	kb_row
     76  a67f		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     77  a681		       c5 51		      cmp	c3
     78  a683		       f0 05		      beq	KeyDone	; these arent the droids you are looking for move along
     79  a685		       85 51		      sta	c3
     80  a687		       8d 03 1e 	      sta	$1E03
     81  a68a				   KeyDone
     82  a68a		       58		      cli
     83  a68b		       60		      rts
     84  a68c
     85  a68c							; ---------------------------------------------------------------------------
     86  a68c
     87  a68c				   setchars
     88  a68c		       a2 00		      ldx	#$00
     89  a68e		       a9 51		      lda	#$51
     90  a690				   setcharsloop1
     91  a690		       9d 00 1e 	      sta	$1E00,x
     92  a693		       e8		      inx
     93  a694		       e0 00		      cpx	#$00
     94  a696		       d0 f8		      bne	setcharsloop1
     95  a698		       a2 00		      ldx	#$00
     96  a69a		       a9 66		      lda	#$66
     97  a69c				   setcharsloop2
     98  a69c		       9d 00 1f 	      sta	$1F00,x
     99  a69f		       e8		      inx
    100  a6a0		       e0 00		      cpx	#$00
    101  a6a2		       d0 f8		      bne	setcharsloop2
    102  a6a4		       60		      rts
------- FILE vicmidi.asm
    773  a6a5				   setwaveorg
------- FILE setwave.asm LEVEL 2 PASS 2
      0  a6a5					      include	"setwave.asm"
      1  a6a5							;A short generic routine for setting any shift register value for any pulse
      2  a6a5							;channel in about 150 cpu clocks. Use it freely.
      3  a6a5
      4  a6a5							; USAGE: y = channel ($0a..$0c)
      5  a6a5							;	  x = initial frequency
      6  a6a5							;	  a = shift register contents
      7  a6a5							;
      8  a6a5							; WARNING for purists: self-modifying code, illegal opcodes.
      9  a6a5							;
     10  a6a5							; code align assertion: make sure that the loop is within a page.
     11  a6a5							; oscillator assertion: make sure that the channel has been at $7e
     12  a6a5							; for some time before calling this function.
     13  a6a5							; put TMP and TMP2 in the zero page.
     14  a6a5
     15  a6a5		       8e c7 a6 	      stx	initfreq	; 4
     16  a6a8
     17  a6a8		       8c b6 a6 	      sty	ch0	; 4
     18  a6ab		       8c c1 a6 	      sty	ch1	; 4
     19  a6ae		       be c5 a6 	      ldx	ldfqmasks-$a,y	; 4
     20  a6b1		       85 57		      sta	TMP	; 3
     21  a6b3
     22  a6b3		       09 7f		      ora	#$7f	; 2
     23  a6b5
     24  a6b5		       8f 0c 90 	      .byte.b	$8f,$0C,$90	; axs $900c  ; 4  [$900c] = a AND x	     *ILLEGAL OPCODE*
     25  a6b8
     26  a6b8		       a6 b6	   ch0	      =	*-2
     27  a6b8		       84 58		      sty	TMP2	; 3
     28  a6ba		       a0 07		      ldy	#7	; 2
     29  a6bc
     30  a6bc				   l0
     31  a6bc		       a9 7f		      lda	#$7f	; 2
     32  a6be		       07 57		      .byte.b	$07,TMP	; aso TMP		 ; 5  asl tmp; a = [tmp] OR $7f  *ILLEGAL OPCODE*
     33  a6c0		       8f 0c 90 	      .byte.b	$8F,$0C,$90	; axs $900c	 ; 4  [$900c] = a AND x	  *ILLEGAL OPCODE*
     34  a6c0		       a6 c1	   ch1	      =	*-2
     35  a6c3		       88		      dey		; 2
     36  a6c4		       d0 f6		      bne	l0	; 3
     37  a6c6
     38  a6c6		       a9 80		      lda	#128	; 2
     39  a6c6		       a6 c7	   initfreq   =	*-1
     40  a6c8		       ea		      nop		; 2
     41  a6c9		       a4 58		      ldy	TMP2	; 3
     42  a6cb				   noset
     43  a6cb		       99 00 90 	      sta	$9000,y	; 5
     44  a6ce
     45  a6ce		       60		      rts		; 6	total clocks 11+4+3+2+16*7+16+6 eq 154
     46  a6cf
     47  a6cf				   ldfqmasks
     48  a6cf		       fe		      .byte.b	$fe	; $900a - 1 x 16 clocks/bit
     49  a6d0		       fd		      .byte.b	$fd	; $900b - 2 x	8 clocks/bit
     50  a6d1		       fb		      .byte.b	$fb	; $900c - 4 x	4 clocks/bit
     51  a6d2
     52  a6d2
     53  a6d2				   viznutwaveforms
     54  a6d2		       00		      .byte.b	0	; MIDI Program #1	default  0000000011111111
     55  a6d3		       02		      .byte.b	2	; MIDI Program #2	"10"	 0000001011111101
     56  a6d4		       04		      .byte.b	4	; MIDI Program #3	"100"	 0000010011111011
     57  a6d5		       06		      .byte.b	6	; MIDI Program #4	"110"	 0000011011111001
     58  a6d6		       08		      .byte.b	8	; MIDI Program #5	"1000"	 0000100011110111
     59  a6d7		       0a		      .byte.b	10	; MIDI Program #6	"1010"	 0000101011110101
     60  a6d8		       0b		      .byte.b	11	; MIDI Program #7	"1011"	 0000110011110011
     61  a6d9		       0e		      .byte.b	14	; MIDI Program #8	"1110"	 0000111011110001
     62  a6da		       12		      .byte.b	18	; MIDI Program #9	"10010"  0001001011101101
     63  a6db		       14		      .byte.b	20	; MIDI Program #10	"10100"  0001010011101011
     64  a6dc		       16		      .byte.b	22	; MIDI Program #11	"10110"  0001011011101001
     65  a6dd		       18		      .byte.b	24	; MIDI Program #12	"11000"  0001100011100111
     66  a6de		       1a		      .byte.b	26	; MIDI Program #13	"11010"  0001101011100101
     67  a6df		       24		      .byte.b	36	; MIDI Program #14	"100100" 0010010011011011
     68  a6e0		       2a		      .byte.b	42	; MIDI Program #15	"101010" 0010101011010101
     69  a6e1		       2c		      .byte.b	44	; MIDI Program #16	"101100" 0010110011010011
------- FILE vicmidi.asm
    775  a6e2
------- FILE lookup-ntsc.asm LEVEL 2 PASS 2
      0  a6e2					      include	"lookup-ntsc.asm"
      1  a6e2							; --------------------------------------------------------------------------------------------------
      2  a6e2							; Note Lookups NTSC - 128 bytes each, map MIDI Note# to a VIC register value
      3  a6e2							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a6e2
      5  a6e2				   voice1lookup_ntsc
      6  a6e2		       00		      byte.b	0
      7  a6e3		       00		      byte.b	0
      8  a6e4		       00		      byte.b	0
      9  a6e5		       00		      byte.b	0
     10  a6e6		       00		      byte.b	0
     11  a6e7		       00		      byte.b	0
     12  a6e8		       00		      byte.b	0
     13  a6e9		       00		      byte.b	0
     14  a6ea		       00		      byte.b	0
     15  a6eb		       00		      byte.b	0
     16  a6ec		       00		      byte.b	0
     17  a6ed		       00		      byte.b	0
     18  a6ee		       00		      byte.b	0
     19  a6ef		       00		      byte.b	0
     20  a6f0		       00		      byte.b	0
     21  a6f1		       00		      byte.b	0
     22  a6f2		       00		      byte.b	0
     23  a6f3		       00		      byte.b	0
     24  a6f4		       00		      byte.b	0
     25  a6f5		       00		      byte.b	0
     26  a6f6		       00		      byte.b	0
     27  a6f7		       00		      byte.b	0
     28  a6f8		       00		      byte.b	0
     29  a6f9		       00		      byte.b	0
     30  a6fa		       85		      byte.b	133
     31  a6fb		       8c		      byte.b	140
     32  a6fc		       92		      byte.b	146
     33  a6fd		       98		      byte.b	152
     34  a6fe		       9e		      byte.b	158
     35  a6ff		       a3		      byte.b	163
     36  a700		       a9		      byte.b	169
     37  a701		       ad		      byte.b	173
     38  a702		       b2		      byte.b	178
     39  a703		       b6		      byte.b	182
     40  a704		       ba		      byte.b	186
     41  a705		       be		      byte.b	190
     42  a706		       c2		      byte.b	194
     43  a707		       c5		      byte.b	197
     44  a708		       c9		      byte.b	201
     45  a709		       cc		      byte.b	204
     46  a70a		       cf		      byte.b	207
     47  a70b		       d1		      byte.b	209
     48  a70c		       d4		      byte.b	212
     49  a70d		       d6		      byte.b	214
     50  a70e		       d9		      byte.b	217
     51  a70f		       db		      byte.b	219
     52  a710		       dd		      byte.b	221
     53  a711		       df		      byte.b	223
     54  a712		       e0		      byte.b	224
     55  a713		       e2		      byte.b	226
     56  a714		       e4		      byte.b	228
     57  a715		       e5		      byte.b	229
     58  a716		       e7		      byte.b	231
     59  a717		       e8		      byte.b	232
     60  a718		       e9		      byte.b	233
     61  a719		       eb		      byte.b	235
     62  a71a		       ec		      byte.b	236
     63  a71b		       ed		      byte.b	237
     64  a71c		       ee		      byte.b	238
     65  a71d		       ef		      byte.b	239
     66  a71e		       f0		      byte.b	240
     67  a71f		       00		      byte.b	0
     68  a720		       00		      byte.b	0
     69  a721		       00		      byte.b	0
     70  a722		       00		      byte.b	0
     71  a723		       00		      byte.b	0
     72  a724		       00		      byte.b	0
     73  a725		       00		      byte.b	0
     74  a726		       00		      byte.b	0
     75  a727		       00		      byte.b	0
     76  a728		       00		      byte.b	0
     77  a729		       00		      byte.b	0
     78  a72a		       00		      byte.b	0
     79  a72b		       00		      byte.b	0
     80  a72c		       00		      byte.b	0
     81  a72d		       00		      byte.b	0
     82  a72e		       00		      byte.b	0
     83  a72f		       00		      byte.b	0
     84  a730		       00		      byte.b	0
     85  a731		       00		      byte.b	0
     86  a732		       00		      byte.b	0
     87  a733		       00		      byte.b	0
     88  a734		       00		      byte.b	0
     89  a735		       00		      byte.b	0
     90  a736		       00		      byte.b	0
     91  a737		       00		      byte.b	0
     92  a738		       00		      byte.b	0
     93  a739		       00		      byte.b	0
     94  a73a		       00		      byte.b	0
     95  a73b		       00		      byte.b	0
     96  a73c		       00		      byte.b	0
     97  a73d		       00		      byte.b	0
     98  a73e		       00		      byte.b	0
     99  a73f		       00		      byte.b	0
    100  a740		       00		      byte.b	0
    101  a741		       00		      byte.b	0
    102  a742		       00		      byte.b	0
    103  a743		       00		      byte.b	0
    104  a744		       00		      byte.b	0
    105  a745		       00		      byte.b	0
    106  a746		       00		      byte.b	0
    107  a747		       00		      byte.b	0
    108  a748		       00		      byte.b	0
    109  a749		       00		      byte.b	0
    110  a74a		       00		      byte.b	0
    111  a74b		       00		      byte.b	0
    112  a74c		       00		      byte.b	0
    113  a74d		       00		      byte.b	0
    114  a74e		       00		      byte.b	0
    115  a74f		       00		      byte.b	0
    116  a750		       00		      byte.b	0
    117  a751		       00		      byte.b	0
    118  a752		       00		      byte.b	0
    119  a753		       00		      byte.b	0
    120  a754		       00		      byte.b	0
    121  a755		       00		      byte.b	0
    122  a756		       00		      byte.b	0
    123  a757		       00		      byte.b	0
    124  a758		       00		      byte.b	0
    125  a759		       00		      byte.b	0
    126  a75a		       00		      byte.b	0
    127  a75b		       00		      byte.b	0
    128  a75c		       00		      byte.b	0
    129  a75d		       00		      byte.b	0
    130  a75e		       00		      byte.b	0
    131  a75f		       00		      byte.b	0
    132  a760		       00		      byte.b	0
    133  a761		       00		      byte.b	0
    134  a762
    135  a762				   voice2lookup_ntsc
    136  a762		       00		      byte.b	0
    137  a763		       00		      byte.b	0
    138  a764		       00		      byte.b	0
    139  a765		       00		      byte.b	0
    140  a766		       00		      byte.b	0
    141  a767		       00		      byte.b	0
    142  a768		       00		      byte.b	0
    143  a769		       00		      byte.b	0
    144  a76a		       00		      byte.b	0
    145  a76b		       00		      byte.b	0
    146  a76c		       00		      byte.b	0
    147  a76d		       00		      byte.b	0
    148  a76e		       00		      byte.b	0
    149  a76f		       00		      byte.b	0
    150  a770		       00		      byte.b	0
    151  a771		       00		      byte.b	0
    152  a772		       00		      byte.b	0
    153  a773		       00		      byte.b	0
    154  a774		       00		      byte.b	0
    155  a775		       00		      byte.b	0
    156  a776		       00		      byte.b	0
    157  a777		       00		      byte.b	0
    158  a778		       00		      byte.b	0
    159  a779		       00		      byte.b	0
    160  a77a		       00		      byte.b	0
    161  a77b		       00		      byte.b	0
    162  a77c		       00		      byte.b	0
    163  a77d		       00		      byte.b	0
    164  a77e		       00		      byte.b	0
    165  a77f		       00		      byte.b	0
    166  a780		       00		      byte.b	0
    167  a781		       00		      byte.b	0
    168  a782		       00		      byte.b	0
    169  a783		       00		      byte.b	0
    170  a784		       00		      byte.b	0
    171  a785		       00		      byte.b	0
    172  a786		       85		      byte.b	133
    173  a787		       8c		      byte.b	140
    174  a788		       92		      byte.b	146
    175  a789		       98		      byte.b	152
    176  a78a		       9e		      byte.b	158
    177  a78b		       a3		      byte.b	163
    178  a78c		       a9		      byte.b	169
    179  a78d		       ad		      byte.b	173
    180  a78e		       b2		      byte.b	178
    181  a78f		       b6		      byte.b	182
    182  a790		       ba		      byte.b	186
    183  a791		       be		      byte.b	190
    184  a792		       c2		      byte.b	194
    185  a793		       c5		      byte.b	197
    186  a794		       c9		      byte.b	201
    187  a795		       cc		      byte.b	204
    188  a796		       cf		      byte.b	207
    189  a797		       d1		      byte.b	209
    190  a798		       d4		      byte.b	212
    191  a799		       d6		      byte.b	214
    192  a79a		       d9		      byte.b	217
    193  a79b		       db		      byte.b	219
    194  a79c		       dd		      byte.b	221
    195  a79d		       df		      byte.b	223
    196  a79e		       e0		      byte.b	224
    197  a79f		       e2		      byte.b	226
    198  a7a0		       e4		      byte.b	228
    199  a7a1		       e5		      byte.b	229
    200  a7a2		       e7		      byte.b	231
    201  a7a3		       e8		      byte.b	232
    202  a7a4		       e9		      byte.b	233
    203  a7a5		       eb		      byte.b	235
    204  a7a6		       ec		      byte.b	236
    205  a7a7		       ed		      byte.b	237
    206  a7a8		       ee		      byte.b	238
    207  a7a9		       ef		      byte.b	239
    208  a7aa		       f0		      byte.b	240
    209  a7ab		       00		      byte.b	0
    210  a7ac		       00		      byte.b	0
    211  a7ad		       00		      byte.b	0
    212  a7ae		       00		      byte.b	0
    213  a7af		       00		      byte.b	0
    214  a7b0		       00		      byte.b	0
    215  a7b1		       00		      byte.b	0
    216  a7b2		       00		      byte.b	0
    217  a7b3		       00		      byte.b	0
    218  a7b4		       00		      byte.b	0
    219  a7b5		       00		      byte.b	0
    220  a7b6		       00		      byte.b	0
    221  a7b7		       00		      byte.b	0
    222  a7b8		       00		      byte.b	0
    223  a7b9		       00		      byte.b	0
    224  a7ba		       00		      byte.b	0
    225  a7bb		       00		      byte.b	0
    226  a7bc		       00		      byte.b	0
    227  a7bd		       00		      byte.b	0
    228  a7be		       00		      byte.b	0
    229  a7bf		       00		      byte.b	0
    230  a7c0		       00		      byte.b	0
    231  a7c1		       00		      byte.b	0
    232  a7c2		       00		      byte.b	0
    233  a7c3		       00		      byte.b	0
    234  a7c4		       00		      byte.b	0
    235  a7c5		       00		      byte.b	0
    236  a7c6		       00		      byte.b	0
    237  a7c7		       00		      byte.b	0
    238  a7c8		       00		      byte.b	0
    239  a7c9		       00		      byte.b	0
    240  a7ca		       00		      byte.b	0
    241  a7cb		       00		      byte.b	0
    242  a7cc		       00		      byte.b	0
    243  a7cd		       00		      byte.b	0
    244  a7ce		       00		      byte.b	0
    245  a7cf		       00		      byte.b	0
    246  a7d0		       00		      byte.b	0
    247  a7d1		       00		      byte.b	0
    248  a7d2		       00		      byte.b	0
    249  a7d3		       00		      byte.b	0
    250  a7d4		       00		      byte.b	0
    251  a7d5		       00		      byte.b	0
    252  a7d6		       00		      byte.b	0
    253  a7d7		       00		      byte.b	0
    254  a7d8		       00		      byte.b	0
    255  a7d9		       00		      byte.b	0
    256  a7da		       00		      byte.b	0
    257  a7db		       00		      byte.b	0
    258  a7dc		       00		      byte.b	0
    259  a7dd		       00		      byte.b	0
    260  a7de		       00		      byte.b	0
    261  a7df		       00		      byte.b	0
    262  a7e0		       00		      byte.b	0
    263  a7e1		       00		      byte.b	0
    264  a7e2
    265  a7e2				   voice3lookup_ntsc
    266  a7e2		       00		      byte.b	0
    267  a7e3		       00		      byte.b	0
    268  a7e4		       00		      byte.b	0
    269  a7e5		       00		      byte.b	0
    270  a7e6		       00		      byte.b	0
    271  a7e7		       00		      byte.b	0
    272  a7e8		       00		      byte.b	0
    273  a7e9		       00		      byte.b	0
    274  a7ea		       00		      byte.b	0
    275  a7eb		       00		      byte.b	0
    276  a7ec		       00		      byte.b	0
    277  a7ed		       00		      byte.b	0
    278  a7ee		       00		      byte.b	0
    279  a7ef		       00		      byte.b	0
    280  a7f0		       00		      byte.b	0
    281  a7f1		       00		      byte.b	0
    282  a7f2		       00		      byte.b	0
    283  a7f3		       00		      byte.b	0
    284  a7f4		       00		      byte.b	0
    285  a7f5		       00		      byte.b	0
    286  a7f6		       00		      byte.b	0
    287  a7f7		       00		      byte.b	0
    288  a7f8		       00		      byte.b	0
    289  a7f9		       00		      byte.b	0
    290  a7fa		       00		      byte.b	0
    291  a7fb		       00		      byte.b	0
    292  a7fc		       00		      byte.b	0
    293  a7fd		       00		      byte.b	0
    294  a7fe		       00		      byte.b	0
    295  a7ff		       00		      byte.b	0
    296  a800		       00		      byte.b	0
    297  a801		       00		      byte.b	0
    298  a802		       00		      byte.b	0
    299  a803		       00		      byte.b	0
    300  a804		       00		      byte.b	0
    301  a805		       00		      byte.b	0
    302  a806		       00		      byte.b	0
    303  a807		       00		      byte.b	0
    304  a808		       00		      byte.b	0
    305  a809		       00		      byte.b	0
    306  a80a		       00		      byte.b	0
    307  a80b		       00		      byte.b	0
    308  a80c		       00		      byte.b	0
    309  a80d		       00		      byte.b	0
    310  a80e		       00		      byte.b	0
    311  a80f		       00		      byte.b	0
    312  a810		       00		      byte.b	0
    313  a811		       00		      byte.b	0
    314  a812		       85		      byte.b	133
    315  a813		       8c		      byte.b	140
    316  a814		       92		      byte.b	146
    317  a815		       98		      byte.b	152
    318  a816		       9e		      byte.b	158
    319  a817		       a3		      byte.b	163
    320  a818		       a9		      byte.b	169
    321  a819		       ad		      byte.b	173
    322  a81a		       b2		      byte.b	178
    323  a81b		       b6		      byte.b	182
    324  a81c		       ba		      byte.b	186
    325  a81d		       be		      byte.b	190
    326  a81e		       c2		      byte.b	194
    327  a81f		       c5		      byte.b	197
    328  a820		       c9		      byte.b	201
    329  a821		       cc		      byte.b	204
    330  a822		       cf		      byte.b	207
    331  a823		       d1		      byte.b	209
    332  a824		       d4		      byte.b	212
    333  a825		       d6		      byte.b	214
    334  a826		       d9		      byte.b	217
    335  a827		       db		      byte.b	219
    336  a828		       dd		      byte.b	221
    337  a829		       df		      byte.b	223
    338  a82a		       e0		      byte.b	224
    339  a82b		       e2		      byte.b	226
    340  a82c		       e4		      byte.b	228
    341  a82d		       e5		      byte.b	229
    342  a82e		       e7		      byte.b	231
    343  a82f		       e8		      byte.b	232
    344  a830		       e9		      byte.b	233
    345  a831		       eb		      byte.b	235
    346  a832		       ec		      byte.b	236
    347  a833		       ed		      byte.b	237
    348  a834		       ee		      byte.b	238
    349  a835		       ef		      byte.b	239
    350  a836		       f0		      byte.b	240
    351  a837		       00		      byte.b	0
    352  a838		       00		      byte.b	0
    353  a839		       00		      byte.b	0
    354  a83a		       00		      byte.b	0
    355  a83b		       00		      byte.b	0
    356  a83c		       00		      byte.b	0
    357  a83d		       00		      byte.b	0
    358  a83e		       00		      byte.b	0
    359  a83f		       00		      byte.b	0
    360  a840		       00		      byte.b	0
    361  a841		       00		      byte.b	0
    362  a842		       00		      byte.b	0
    363  a843		       00		      byte.b	0
    364  a844		       00		      byte.b	0
    365  a845		       00		      byte.b	0
    366  a846		       00		      byte.b	0
    367  a847		       00		      byte.b	0
    368  a848		       00		      byte.b	0
    369  a849		       00		      byte.b	0
    370  a84a		       00		      byte.b	0
    371  a84b		       00		      byte.b	0
    372  a84c		       00		      byte.b	0
    373  a84d		       00		      byte.b	0
    374  a84e		       00		      byte.b	0
    375  a84f		       00		      byte.b	0
    376  a850		       00		      byte.b	0
    377  a851		       00		      byte.b	0
    378  a852		       00		      byte.b	0
    379  a853		       00		      byte.b	0
    380  a854		       00		      byte.b	0
    381  a855		       00		      byte.b	0
    382  a856		       00		      byte.b	0
    383  a857		       00		      byte.b	0
    384  a858		       00		      byte.b	0
    385  a859		       00		      byte.b	0
    386  a85a		       00		      byte.b	0
    387  a85b		       00		      byte.b	0
    388  a85c		       00		      byte.b	0
    389  a85d		       00		      byte.b	0
    390  a85e		       00		      byte.b	0
    391  a85f		       00		      byte.b	0
    392  a860		       00		      byte.b	0
    393  a861		       00		      byte.b	0
    394  a862
    395  a862
    396  a862				   voice4lookup_ntsc
    397  a862		       00		      byte.b	0
    398  a863		       00		      byte.b	0
    399  a864		       00		      byte.b	0
    400  a865		       00		      byte.b	0
    401  a866		       00		      byte.b	0
    402  a867		       00		      byte.b	0
    403  a868		       00		      byte.b	0
    404  a869		       00		      byte.b	0
    405  a86a		       00		      byte.b	0
    406  a86b		       00		      byte.b	0
    407  a86c		       00		      byte.b	0
    408  a86d		       00		      byte.b	0
    409  a86e		       00		      byte.b	0
    410  a86f		       00		      byte.b	0
    411  a870		       00		      byte.b	0
    412  a871		       00		      byte.b	0
    413  a872		       00		      byte.b	0
    414  a873		       00		      byte.b	0
    415  a874		       00		      byte.b	0
    416  a875		       00		      byte.b	0
    417  a876		       00		      byte.b	0
    418  a877		       00		      byte.b	0
    419  a878		       00		      byte.b	0
    420  a879		       00		      byte.b	0
    421  a87a		       00		      byte.b	0
    422  a87b		       00		      byte.b	0
    423  a87c		       00		      byte.b	0
    424  a87d		       00		      byte.b	0
    425  a87e		       00		      byte.b	0
    426  a87f		       00		      byte.b	0
    427  a880		       00		      byte.b	0
    428  a881		       00		      byte.b	0
    429  a882		       00		      byte.b	0
    430  a883		       00		      byte.b	0
    431  a884		       00		      byte.b	0
    432  a885		       00		      byte.b	0
    433  a886		       85		      byte.b	133
    434  a887		       8c		      byte.b	140
    435  a888		       92		      byte.b	146
    436  a889		       98		      byte.b	152
    437  a88a		       9e		      byte.b	158
    438  a88b		       a3		      byte.b	163
    439  a88c		       a9		      byte.b	169
    440  a88d		       ad		      byte.b	173
    441  a88e		       b2		      byte.b	178
    442  a88f		       b6		      byte.b	182
    443  a890		       ba		      byte.b	186
    444  a891		       be		      byte.b	190
    445  a892		       c2		      byte.b	194
    446  a893		       c5		      byte.b	197
    447  a894		       c9		      byte.b	201
    448  a895		       cc		      byte.b	204
    449  a896		       cf		      byte.b	207
    450  a897		       d1		      byte.b	209
    451  a898		       d4		      byte.b	212
    452  a899		       d6		      byte.b	214
    453  a89a		       d9		      byte.b	217
    454  a89b		       db		      byte.b	219
    455  a89c		       dd		      byte.b	221
    456  a89d		       df		      byte.b	223
    457  a89e		       e0		      byte.b	224
    458  a89f		       e2		      byte.b	226
    459  a8a0		       e4		      byte.b	228
    460  a8a1		       e5		      byte.b	229
    461  a8a2		       e7		      byte.b	231
    462  a8a3		       e8		      byte.b	232
    463  a8a4		       e9		      byte.b	233
    464  a8a5		       eb		      byte.b	235
    465  a8a6		       ec		      byte.b	236
    466  a8a7		       ed		      byte.b	237
    467  a8a8		       ee		      byte.b	238
    468  a8a9		       ef		      byte.b	239
    469  a8aa		       f0		      byte.b	240
    470  a8ab		       00		      byte.b	0
    471  a8ac		       00		      byte.b	0
    472  a8ad		       00		      byte.b	0
    473  a8ae		       00		      byte.b	0
    474  a8af		       00		      byte.b	0
    475  a8b0		       00		      byte.b	0
    476  a8b1		       00		      byte.b	0
    477  a8b2		       00		      byte.b	0
    478  a8b3		       00		      byte.b	0
    479  a8b4		       00		      byte.b	0
    480  a8b5		       00		      byte.b	0
    481  a8b6		       00		      byte.b	0
    482  a8b7		       00		      byte.b	0
    483  a8b8		       00		      byte.b	0
    484  a8b9		       00		      byte.b	0
    485  a8ba		       00		      byte.b	0
    486  a8bb		       00		      byte.b	0
    487  a8bc		       00		      byte.b	0
    488  a8bd		       00		      byte.b	0
    489  a8be		       00		      byte.b	0
    490  a8bf		       00		      byte.b	0
    491  a8c0		       00		      byte.b	0
    492  a8c1		       00		      byte.b	0
    493  a8c2		       00		      byte.b	0
    494  a8c3		       00		      byte.b	0
    495  a8c4		       00		      byte.b	0
    496  a8c5		       00		      byte.b	0
    497  a8c6		       00		      byte.b	0
    498  a8c7		       00		      byte.b	0
    499  a8c8		       00		      byte.b	0
    500  a8c9		       00		      byte.b	0
    501  a8ca		       00		      byte.b	0
    502  a8cb		       00		      byte.b	0
    503  a8cc		       00		      byte.b	0
    504  a8cd		       00		      byte.b	0
    505  a8ce		       00		      byte.b	0
    506  a8cf		       00		      byte.b	0
    507  a8d0		       00		      byte.b	0
    508  a8d1		       00		      byte.b	0
    509  a8d2		       00		      byte.b	0
    510  a8d3		       00		      byte.b	0
    511  a8d4		       00		      byte.b	0
    512  a8d5		       00		      byte.b	0
    513  a8d6		       00		      byte.b	0
    514  a8d7		       00		      byte.b	0
    515  a8d8		       00		      byte.b	0
    516  a8d9		       00		      byte.b	0
    517  a8da		       00		      byte.b	0
    518  a8db		       00		      byte.b	0
    519  a8dc		       00		      byte.b	0
    520  a8dd		       00		      byte.b	0
    521  a8de		       00		      byte.b	0
    522  a8df		       00		      byte.b	0
    523  a8e0		       00		      byte.b	0
    524  a8e1		       00		      byte.b	0
    525  a8e2
    526  a8e2							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-pal.asm LEVEL 2 PASS 2
      0  a8e2					      include	"lookup-pal.asm"
      1  a8e2							; --------------------------------------------------------------------------------------------------
      2  a8e2							; Note Lookups PAL - 128 bytes each, map MIDI Note# to a VIC register value
      3  a8e2							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a8e2
      5  a8e2				   voice1lookup_pal
      6  a8e2		       00		      byte.b	0
      7  a8e3		       00		      byte.b	0
      8  a8e4		       00		      byte.b	0
      9  a8e5		       00		      byte.b	0
     10  a8e6		       00		      byte.b	0
     11  a8e7		       00		      byte.b	0
     12  a8e8		       00		      byte.b	0
     13  a8e9		       00		      byte.b	0
     14  a8ea		       00		      byte.b	0
     15  a8eb		       00		      byte.b	0
     16  a8ec		       00		      byte.b	0
     17  a8ed		       00		      byte.b	0
     18  a8ee		       00		      byte.b	0
     19  a8ef		       00		      byte.b	0
     20  a8f0		       00		      byte.b	0
     21  a8f1		       00		      byte.b	0
     22  a8f2		       00		      byte.b	0
     23  a8f3		       00		      byte.b	0
     24  a8f4		       00		      byte.b	0
     25  a8f5		       00		      byte.b	0
     26  a8f6		       00		      byte.b	0
     27  a8f7		       00		      byte.b	0
     28  a8f8		       00		      byte.b	0
     29  a8f9		       00		      byte.b	0
     30  a8fa		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
     31  a8fb		       82		      byte.b	130
     32  a8fc		       89		      byte.b	137
     33  a8fd		       90		      byte.b	144
     34  a8fe		       96		      byte.b	150
     35  a8ff		       9c		      byte.b	156
     36  a900		       a1		      byte.b	161
     37  a901		       a7		      byte.b	167
     38  a902		       ac		      byte.b	172
     39  a903		       b0		      byte.b	176
     40  a904		       b5		      byte.b	181
     41  a905		       b9		      byte.b	185
     42  a906		       bd		      byte.b	189
     43  a907		       c1		      byte.b	193
     44  a908		       c4		      byte.b	196
     45  a909		       c7		      byte.b	199
     46  a90a		       ca		      byte.b	202
     47  a90b		       cd		      byte.b	205
     48  a90c		       d0		      byte.b	208
     49  a90d		       d3		      byte.b	211
     50  a90e		       d5		      byte.b	213
     51  a90f		       d8		      byte.b	216
     52  a910		       da		      byte.b	218
     53  a911		       dc		      byte.b	220
     54  a912		       de		      byte.b	222
     55  a913		       e0		      byte.b	224
     56  a914		       e2		      byte.b	226
     57  a915		       e3		      byte.b	227
     58  a916		       e5		      byte.b	229
     59  a917		       e6		      byte.b	230
     60  a918		       e8		      byte.b	232
     61  a919		       e9		      byte.b	233
     62  a91a		       ea		      byte.b	234
     63  a91b		       eb		      byte.b	235
     64  a91c		       ec		      byte.b	236
     65  a91d		       ed		      byte.b	237
     66  a91e		       ee		      byte.b	238
     67  a91f		       00		      byte.b	0
     68  a920		       00		      byte.b	0
     69  a921		       00		      byte.b	0
     70  a922		       00		      byte.b	0
     71  a923		       00		      byte.b	0
     72  a924		       00		      byte.b	0
     73  a925		       00		      byte.b	0
     74  a926		       00		      byte.b	0
     75  a927		       00		      byte.b	0
     76  a928		       00		      byte.b	0
     77  a929		       00		      byte.b	0
     78  a92a		       00		      byte.b	0
     79  a92b		       00		      byte.b	0
     80  a92c		       00		      byte.b	0
     81  a92d		       00		      byte.b	0
     82  a92e		       00		      byte.b	0
     83  a92f		       00		      byte.b	0
     84  a930		       00		      byte.b	0
     85  a931		       00		      byte.b	0
     86  a932		       00		      byte.b	0
     87  a933		       00		      byte.b	0
     88  a934		       00		      byte.b	0
     89  a935		       00		      byte.b	0
     90  a936		       00		      byte.b	0
     91  a937		       00		      byte.b	0
     92  a938		       00		      byte.b	0
     93  a939		       00		      byte.b	0
     94  a93a		       00		      byte.b	0
     95  a93b		       00		      byte.b	0
     96  a93c		       00		      byte.b	0
     97  a93d		       00		      byte.b	0
     98  a93e		       00		      byte.b	0
     99  a93f		       00		      byte.b	0
    100  a940		       00		      byte.b	0
    101  a941		       00		      byte.b	0
    102  a942		       00		      byte.b	0
    103  a943		       00		      byte.b	0
    104  a944		       00		      byte.b	0
    105  a945		       00		      byte.b	0
    106  a946		       00		      byte.b	0
    107  a947		       00		      byte.b	0
    108  a948		       00		      byte.b	0
    109  a949		       00		      byte.b	0
    110  a94a		       00		      byte.b	0
    111  a94b		       00		      byte.b	0
    112  a94c		       00		      byte.b	0
    113  a94d		       00		      byte.b	0
    114  a94e		       00		      byte.b	0
    115  a94f		       00		      byte.b	0
    116  a950		       00		      byte.b	0
    117  a951		       00		      byte.b	0
    118  a952		       00		      byte.b	0
    119  a953		       00		      byte.b	0
    120  a954		       00		      byte.b	0
    121  a955		       00		      byte.b	0
    122  a956		       00		      byte.b	0
    123  a957		       00		      byte.b	0
    124  a958		       00		      byte.b	0
    125  a959		       00		      byte.b	0
    126  a95a		       00		      byte.b	0
    127  a95b		       00		      byte.b	0
    128  a95c		       00		      byte.b	0
    129  a95d		       00		      byte.b	0
    130  a95e		       00		      byte.b	0
    131  a95f		       00		      byte.b	0
    132  a960		       00		      byte.b	0
    133  a961		       00		      byte.b	0
    134  a962
    135  a962				   voice2lookup_pal
    136  a962		       00		      byte.b	0
    137  a963		       00		      byte.b	0
    138  a964		       00		      byte.b	0
    139  a965		       00		      byte.b	0
    140  a966		       00		      byte.b	0
    141  a967		       00		      byte.b	0
    142  a968		       00		      byte.b	0
    143  a969		       00		      byte.b	0
    144  a96a		       00		      byte.b	0
    145  a96b		       00		      byte.b	0
    146  a96c		       00		      byte.b	0
    147  a96d		       00		      byte.b	0
    148  a96e		       00		      byte.b	0
    149  a96f		       00		      byte.b	0
    150  a970		       00		      byte.b	0
    151  a971		       00		      byte.b	0
    152  a972		       00		      byte.b	0
    153  a973		       00		      byte.b	0
    154  a974		       00		      byte.b	0
    155  a975		       00		      byte.b	0
    156  a976		       00		      byte.b	0
    157  a977		       00		      byte.b	0
    158  a978		       00		      byte.b	0
    159  a979		       00		      byte.b	0
    160  a97a		       00		      byte.b	0
    161  a97b		       00		      byte.b	0
    162  a97c		       00		      byte.b	0
    163  a97d		       00		      byte.b	0
    164  a97e		       00		      byte.b	0
    165  a97f		       00		      byte.b	0
    166  a980		       00		      byte.b	0
    167  a981		       00		      byte.b	0
    168  a982		       00		      byte.b	0
    169  a983		       00		      byte.b	0
    170  a984		       00		      byte.b	0
    171  a985		       00		      byte.b	0
    172  a986		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    173  a987		       82		      byte.b	130
    174  a988		       89		      byte.b	137
    175  a989		       90		      byte.b	144
    176  a98a		       96		      byte.b	150
    177  a98b		       9c		      byte.b	156
    178  a98c		       a1		      byte.b	161
    179  a98d		       a7		      byte.b	167
    180  a98e		       ac		      byte.b	172
    181  a98f		       b0		      byte.b	176
    182  a990		       b5		      byte.b	181
    183  a991		       b9		      byte.b	185
    184  a992		       bd		      byte.b	189
    185  a993		       c1		      byte.b	193
    186  a994		       c4		      byte.b	196
    187  a995		       c7		      byte.b	199
    188  a996		       ca		      byte.b	202
    189  a997		       cd		      byte.b	205
    190  a998		       d0		      byte.b	208
    191  a999		       d3		      byte.b	211
    192  a99a		       d5		      byte.b	213
    193  a99b		       d8		      byte.b	216
    194  a99c		       da		      byte.b	218
    195  a99d		       dc		      byte.b	220
    196  a99e		       de		      byte.b	222
    197  a99f		       e0		      byte.b	224
    198  a9a0		       e2		      byte.b	226
    199  a9a1		       e3		      byte.b	227
    200  a9a2		       e5		      byte.b	229
    201  a9a3		       e6		      byte.b	230
    202  a9a4		       e8		      byte.b	232
    203  a9a5		       e9		      byte.b	233
    204  a9a6		       ea		      byte.b	234
    205  a9a7		       eb		      byte.b	235
    206  a9a8		       ec		      byte.b	236
    207  a9a9		       ed		      byte.b	237
    208  a9aa		       ee		      byte.b	238
    209  a9ab		       00		      byte.b	0
    210  a9ac		       00		      byte.b	0
    211  a9ad		       00		      byte.b	0
    212  a9ae		       00		      byte.b	0
    213  a9af		       00		      byte.b	0
    214  a9b0		       00		      byte.b	0
    215  a9b1		       00		      byte.b	0
    216  a9b2		       00		      byte.b	0
    217  a9b3		       00		      byte.b	0
    218  a9b4		       00		      byte.b	0
    219  a9b5		       00		      byte.b	0
    220  a9b6		       00		      byte.b	0
    221  a9b7		       00		      byte.b	0
    222  a9b8		       00		      byte.b	0
    223  a9b9		       00		      byte.b	0
    224  a9ba		       00		      byte.b	0
    225  a9bb		       00		      byte.b	0
    226  a9bc		       00		      byte.b	0
    227  a9bd		       00		      byte.b	0
    228  a9be		       00		      byte.b	0
    229  a9bf		       00		      byte.b	0
    230  a9c0		       00		      byte.b	0
    231  a9c1		       00		      byte.b	0
    232  a9c2		       00		      byte.b	0
    233  a9c3		       00		      byte.b	0
    234  a9c4		       00		      byte.b	0
    235  a9c5		       00		      byte.b	0
    236  a9c6		       00		      byte.b	0
    237  a9c7		       00		      byte.b	0
    238  a9c8		       00		      byte.b	0
    239  a9c9		       00		      byte.b	0
    240  a9ca		       00		      byte.b	0
    241  a9cb		       00		      byte.b	0
    242  a9cc		       00		      byte.b	0
    243  a9cd		       00		      byte.b	0
    244  a9ce		       00		      byte.b	0
    245  a9cf		       00		      byte.b	0
    246  a9d0		       00		      byte.b	0
    247  a9d1		       00		      byte.b	0
    248  a9d2		       00		      byte.b	0
    249  a9d3		       00		      byte.b	0
    250  a9d4		       00		      byte.b	0
    251  a9d5		       00		      byte.b	0
    252  a9d6		       00		      byte.b	0
    253  a9d7		       00		      byte.b	0
    254  a9d8		       00		      byte.b	0
    255  a9d9		       00		      byte.b	0
    256  a9da		       00		      byte.b	0
    257  a9db		       00		      byte.b	0
    258  a9dc		       00		      byte.b	0
    259  a9dd		       00		      byte.b	0
    260  a9de		       00		      byte.b	0
    261  a9df		       00		      byte.b	0
    262  a9e0		       00		      byte.b	0
    263  a9e1		       00		      byte.b	0
    264  a9e2
    265  a9e2				   voice3lookup_pal
    266  a9e2		       00		      byte.b	0
    267  a9e3		       00		      byte.b	0
    268  a9e4		       00		      byte.b	0
    269  a9e5		       00		      byte.b	0
    270  a9e6		       00		      byte.b	0
    271  a9e7		       00		      byte.b	0
    272  a9e8		       00		      byte.b	0
    273  a9e9		       00		      byte.b	0
    274  a9ea		       00		      byte.b	0
    275  a9eb		       00		      byte.b	0
    276  a9ec		       00		      byte.b	0
    277  a9ed		       00		      byte.b	0
    278  a9ee		       00		      byte.b	0
    279  a9ef		       00		      byte.b	0
    280  a9f0		       00		      byte.b	0
    281  a9f1		       00		      byte.b	0
    282  a9f2		       00		      byte.b	0
    283  a9f3		       00		      byte.b	0
    284  a9f4		       00		      byte.b	0
    285  a9f5		       00		      byte.b	0
    286  a9f6		       00		      byte.b	0
    287  a9f7		       00		      byte.b	0
    288  a9f8		       00		      byte.b	0
    289  a9f9		       00		      byte.b	0
    290  a9fa		       00		      byte.b	0
    291  a9fb		       00		      byte.b	0
    292  a9fc		       00		      byte.b	0
    293  a9fd		       00		      byte.b	0
    294  a9fe		       00		      byte.b	0
    295  a9ff		       00		      byte.b	0
    296  aa00		       00		      byte.b	0
    297  aa01		       00		      byte.b	0
    298  aa02		       00		      byte.b	0
    299  aa03		       00		      byte.b	0
    300  aa04		       00		      byte.b	0
    301  aa05		       00		      byte.b	0
    302  aa06		       00		      byte.b	0
    303  aa07		       00		      byte.b	0
    304  aa08		       00		      byte.b	0
    305  aa09		       00		      byte.b	0
    306  aa0a		       00		      byte.b	0
    307  aa0b		       00		      byte.b	0
    308  aa0c		       00		      byte.b	0
    309  aa0d		       00		      byte.b	0
    310  aa0e		       00		      byte.b	0
    311  aa0f		       00		      byte.b	0
    312  aa10		       00		      byte.b	0
    313  aa11		       00		      byte.b	0
    314  aa12		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    315  aa13		       82		      byte.b	130
    316  aa14		       89		      byte.b	137
    317  aa15		       90		      byte.b	144
    318  aa16		       96		      byte.b	150
    319  aa17		       9c		      byte.b	156
    320  aa18		       a1		      byte.b	161
    321  aa19		       a7		      byte.b	167
    322  aa1a		       ac		      byte.b	172
    323  aa1b		       b0		      byte.b	176
    324  aa1c		       b5		      byte.b	181
    325  aa1d		       b9		      byte.b	185
    326  aa1e		       bd		      byte.b	189
    327  aa1f		       c1		      byte.b	193
    328  aa20		       c4		      byte.b	196
    329  aa21		       c7		      byte.b	199
    330  aa22		       ca		      byte.b	202
    331  aa23		       cd		      byte.b	205
    332  aa24		       d0		      byte.b	208
    333  aa25		       d3		      byte.b	211
    334  aa26		       d5		      byte.b	213
    335  aa27		       d8		      byte.b	216
    336  aa28		       da		      byte.b	218
    337  aa29		       dc		      byte.b	220
    338  aa2a		       de		      byte.b	222
    339  aa2b		       e0		      byte.b	224
    340  aa2c		       e2		      byte.b	226
    341  aa2d		       e3		      byte.b	227
    342  aa2e		       e5		      byte.b	229
    343  aa2f		       e6		      byte.b	230
    344  aa30		       e8		      byte.b	232
    345  aa31		       e9		      byte.b	233
    346  aa32		       ea		      byte.b	234
    347  aa33		       eb		      byte.b	235
    348  aa34		       ec		      byte.b	236
    349  aa35		       ed		      byte.b	237
    350  aa36		       ee		      byte.b	238
    351  aa37		       00		      byte.b	0
    352  aa38		       00		      byte.b	0
    353  aa39		       00		      byte.b	0
    354  aa3a		       00		      byte.b	0
    355  aa3b		       00		      byte.b	0
    356  aa3c		       00		      byte.b	0
    357  aa3d		       00		      byte.b	0
    358  aa3e		       00		      byte.b	0
    359  aa3f		       00		      byte.b	0
    360  aa40		       00		      byte.b	0
    361  aa41		       00		      byte.b	0
    362  aa42		       00		      byte.b	0
    363  aa43		       00		      byte.b	0
    364  aa44		       00		      byte.b	0
    365  aa45		       00		      byte.b	0
    366  aa46		       00		      byte.b	0
    367  aa47		       00		      byte.b	0
    368  aa48		       00		      byte.b	0
    369  aa49		       00		      byte.b	0
    370  aa4a		       00		      byte.b	0
    371  aa4b		       00		      byte.b	0
    372  aa4c		       00		      byte.b	0
    373  aa4d		       00		      byte.b	0
    374  aa4e		       00		      byte.b	0
    375  aa4f		       00		      byte.b	0
    376  aa50		       00		      byte.b	0
    377  aa51		       00		      byte.b	0
    378  aa52		       00		      byte.b	0
    379  aa53		       00		      byte.b	0
    380  aa54		       00		      byte.b	0
    381  aa55		       00		      byte.b	0
    382  aa56		       00		      byte.b	0
    383  aa57		       00		      byte.b	0
    384  aa58		       00		      byte.b	0
    385  aa59		       00		      byte.b	0
    386  aa5a		       00		      byte.b	0
    387  aa5b		       00		      byte.b	0
    388  aa5c		       00		      byte.b	0
    389  aa5d		       00		      byte.b	0
    390  aa5e		       00		      byte.b	0
    391  aa5f		       00		      byte.b	0
    392  aa60		       00		      byte.b	0
    393  aa61		       00		      byte.b	0
    394  aa62
    395  aa62
    396  aa62				   voice4lookup_pal
    397  aa62		       00		      byte.b	0
    398  aa63		       00		      byte.b	0
    399  aa64		       00		      byte.b	0
    400  aa65		       00		      byte.b	0
    401  aa66		       00		      byte.b	0
    402  aa67		       00		      byte.b	0
    403  aa68		       00		      byte.b	0
    404  aa69		       00		      byte.b	0
    405  aa6a		       00		      byte.b	0
    406  aa6b		       00		      byte.b	0
    407  aa6c		       00		      byte.b	0
    408  aa6d		       00		      byte.b	0
    409  aa6e		       00		      byte.b	0
    410  aa6f		       00		      byte.b	0
    411  aa70		       00		      byte.b	0
    412  aa71		       00		      byte.b	0
    413  aa72		       00		      byte.b	0
    414  aa73		       00		      byte.b	0
    415  aa74		       00		      byte.b	0
    416  aa75		       00		      byte.b	0
    417  aa76		       00		      byte.b	0
    418  aa77		       00		      byte.b	0
    419  aa78		       00		      byte.b	0
    420  aa79		       00		      byte.b	0
    421  aa7a		       00		      byte.b	0
    422  aa7b		       00		      byte.b	0
    423  aa7c		       00		      byte.b	0
    424  aa7d		       00		      byte.b	0
    425  aa7e		       00		      byte.b	0
    426  aa7f		       00		      byte.b	0
    427  aa80		       00		      byte.b	0
    428  aa81		       00		      byte.b	0
    429  aa82		       00		      byte.b	0
    430  aa83		       00		      byte.b	0
    431  aa84		       00		      byte.b	0
    432  aa85		       00		      byte.b	0
    433  aa86		       85		      byte.b	133	; (122.60)  <- not reachable in PAL
    434  aa87		       8c		      byte.b	140
    435  aa88		       92		      byte.b	146
    436  aa89		       98		      byte.b	152
    437  aa8a		       9e		      byte.b	158
    438  aa8b		       a3		      byte.b	163
    439  aa8c		       a9		      byte.b	169
    440  aa8d		       ad		      byte.b	173
    441  aa8e		       b2		      byte.b	178
    442  aa8f		       b6		      byte.b	182
    443  aa90		       ba		      byte.b	186
    444  aa91		       be		      byte.b	190
    445  aa92		       c2		      byte.b	194
    446  aa93		       c5		      byte.b	197
    447  aa94		       c9		      byte.b	201
    448  aa95		       cc		      byte.b	204
    449  aa96		       cf		      byte.b	207
    450  aa97		       d1		      byte.b	209
    451  aa98		       d4		      byte.b	212
    452  aa99		       d6		      byte.b	214
    453  aa9a		       d9		      byte.b	217
    454  aa9b		       db		      byte.b	219
    455  aa9c		       dd		      byte.b	221
    456  aa9d		       df		      byte.b	223
    457  aa9e		       e0		      byte.b	224
    458  aa9f		       e2		      byte.b	226
    459  aaa0		       e4		      byte.b	228
    460  aaa1		       e5		      byte.b	229
    461  aaa2		       e7		      byte.b	231
    462  aaa3		       e8		      byte.b	232
    463  aaa4		       e9		      byte.b	233
    464  aaa5		       eb		      byte.b	235
    465  aaa6		       ec		      byte.b	236
    466  aaa7		       ed		      byte.b	237
    467  aaa8		       ee		      byte.b	238
    468  aaa9		       ef		      byte.b	239
    469  aaaa		       f0		      byte.b	240
    470  aaab		       00		      byte.b	0
    471  aaac		       00		      byte.b	0
    472  aaad		       00		      byte.b	0
    473  aaae		       00		      byte.b	0
    474  aaaf		       00		      byte.b	0
    475  aab0		       00		      byte.b	0
    476  aab1		       00		      byte.b	0
    477  aab2		       00		      byte.b	0
    478  aab3		       00		      byte.b	0
    479  aab4		       00		      byte.b	0
    480  aab5		       00		      byte.b	0
    481  aab6		       00		      byte.b	0
    482  aab7		       00		      byte.b	0
    483  aab8		       00		      byte.b	0
    484  aab9		       00		      byte.b	0
    485  aaba		       00		      byte.b	0
    486  aabb		       00		      byte.b	0
    487  aabc		       00		      byte.b	0
    488  aabd		       00		      byte.b	0
    489  aabe		       00		      byte.b	0
    490  aabf		       00		      byte.b	0
    491  aac0		       00		      byte.b	0
    492  aac1		       00		      byte.b	0
    493  aac2		       00		      byte.b	0
    494  aac3		       00		      byte.b	0
    495  aac4		       00		      byte.b	0
    496  aac5		       00		      byte.b	0
    497  aac6		       00		      byte.b	0
    498  aac7		       00		      byte.b	0
    499  aac8		       00		      byte.b	0
    500  aac9		       00		      byte.b	0
    501  aaca		       00		      byte.b	0
    502  aacb		       00		      byte.b	0
    503  aacc		       00		      byte.b	0
    504  aacd		       00		      byte.b	0
    505  aace		       00		      byte.b	0
    506  aacf		       00		      byte.b	0
    507  aad0		       00		      byte.b	0
    508  aad1		       00		      byte.b	0
    509  aad2		       00		      byte.b	0
    510  aad3		       00		      byte.b	0
    511  aad4		       00		      byte.b	0
    512  aad5		       00		      byte.b	0
    513  aad6		       00		      byte.b	0
    514  aad7		       00		      byte.b	0
    515  aad8		       00		      byte.b	0
    516  aad9		       00		      byte.b	0
    517  aada		       00		      byte.b	0
    518  aadb		       00		      byte.b	0
    519  aadc		       00		      byte.b	0
    520  aadd		       00		      byte.b	0
    521  aade		       00		      byte.b	0
    522  aadf		       00		      byte.b	0
    523  aae0		       00		      byte.b	0
    524  aae1		       00		      byte.b	0
    525  aae2
    526  aae2							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-alt.asm LEVEL 2 PASS 2
      0  aae2					      include	"lookup-alt.asm"
      1  aae2							; --------------------------------------------------------------------------------------------------
      2  aae2							; Note Lookups Alternate - 128 bytes each, map MIDI Note# to a VIC register value
      3  aae2							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  aae2
      5  aae2				   voice1lookup_alt
      6  aae2		       00		      byte.b	0
      7  aae3		       00		      byte.b	0
      8  aae4		       00		      byte.b	0
      9  aae5		       00		      byte.b	0
     10  aae6		       00		      byte.b	0
     11  aae7		       00		      byte.b	0
     12  aae8		       00		      byte.b	0
     13  aae9		       00		      byte.b	0
     14  aaea		       00		      byte.b	0
     15  aaeb		       00		      byte.b	0
     16  aaec		       00		      byte.b	0
     17  aaed		       00		      byte.b	0
     18  aaee		       00		      byte.b	0
     19  aaef		       00		      byte.b	0
     20  aaf0		       00		      byte.b	0
     21  aaf1		       00		      byte.b	0
     22  aaf2		       00		      byte.b	0
     23  aaf3		       00		      byte.b	0
     24  aaf4		       00		      byte.b	0
     25  aaf5		       00		      byte.b	0
     26  aaf6		       00		      byte.b	0
     27  aaf7		       00		      byte.b	0
     28  aaf8		       00		      byte.b	0
     29  aaf9		       00		      byte.b	0
     30  aafa		       ff		      byte.b	255
     31  aafb		       86		      byte.b	134
     32  aafc		       8d		      byte.b	141
     33  aafd		       93		      byte.b	147
     34  aafe		       99		      byte.b	153
     35  aaff		       9f		      byte.b	159
     36  ab00		       a4		      byte.b	164
     37  ab01		       aa		      byte.b	170
     38  ab02		       ae		      byte.b	174
     39  ab03		       b3		      byte.b	179
     40  ab04		       b7		      byte.b	183
     41  ab05		       bb		      byte.b	187
     42  ab06		       bf		      byte.b	191
     43  ab07		       c3		      byte.b	195
     44  ab08		       c6		      byte.b	198
     45  ab09		       c9		      byte.b	201
     46  ab0a		       cc		      byte.b	204
     47  ab0b		       cf		      byte.b	207
     48  ab0c		       d2		      byte.b	210
     49  ab0d		       d4		      byte.b	212
     50  ab0e		       d7		      byte.b	215
     51  ab0f		       d9		      byte.b	217
     52  ab10		       db		      byte.b	219
     53  ab11		       dd		      byte.b	221
     54  ab12		       df		      byte.b	223
     55  ab13		       e1		      byte.b	225
     56  ab14		       e2		      byte.b	226
     57  ab15		       e4		      byte.b	228
     58  ab16		       e6		      byte.b	230
     59  ab17		       e7		      byte.b	231
     60  ab18		       e8		      byte.b	232
     61  ab19		       ea		      byte.b	234
     62  ab1a		       eb		      byte.b	235
     63  ab1b		       ec		      byte.b	236
     64  ab1c		       ed		      byte.b	237
     65  ab1d		       ee		      byte.b	238
     66  ab1e		       ef		      byte.b	239
     67  ab1f		       00		      byte.b	0
     68  ab20		       00		      byte.b	0
     69  ab21		       00		      byte.b	0
     70  ab22		       00		      byte.b	0
     71  ab23		       00		      byte.b	0
     72  ab24		       00		      byte.b	0
     73  ab25		       00		      byte.b	0
     74  ab26		       00		      byte.b	0
     75  ab27		       00		      byte.b	0
     76  ab28		       00		      byte.b	0
     77  ab29		       00		      byte.b	0
     78  ab2a		       00		      byte.b	0
     79  ab2b		       00		      byte.b	0
     80  ab2c		       00		      byte.b	0
     81  ab2d		       00		      byte.b	0
     82  ab2e		       00		      byte.b	0
     83  ab2f		       00		      byte.b	0
     84  ab30		       00		      byte.b	0
     85  ab31		       00		      byte.b	0
     86  ab32		       00		      byte.b	0
     87  ab33		       00		      byte.b	0
     88  ab34		       00		      byte.b	0
     89  ab35		       00		      byte.b	0
     90  ab36		       00		      byte.b	0
     91  ab37		       00		      byte.b	0
     92  ab38		       00		      byte.b	0
     93  ab39		       00		      byte.b	0
     94  ab3a		       00		      byte.b	0
     95  ab3b		       00		      byte.b	0
     96  ab3c		       00		      byte.b	0
     97  ab3d		       00		      byte.b	0
     98  ab3e		       00		      byte.b	0
     99  ab3f		       00		      byte.b	0
    100  ab40		       00		      byte.b	0
    101  ab41		       00		      byte.b	0
    102  ab42		       00		      byte.b	0
    103  ab43		       00		      byte.b	0
    104  ab44		       00		      byte.b	0
    105  ab45		       00		      byte.b	0
    106  ab46		       00		      byte.b	0
    107  ab47		       00		      byte.b	0
    108  ab48		       00		      byte.b	0
    109  ab49		       00		      byte.b	0
    110  ab4a		       00		      byte.b	0
    111  ab4b		       00		      byte.b	0
    112  ab4c		       00		      byte.b	0
    113  ab4d		       00		      byte.b	0
    114  ab4e		       00		      byte.b	0
    115  ab4f		       00		      byte.b	0
    116  ab50		       00		      byte.b	0
    117  ab51		       00		      byte.b	0
    118  ab52		       00		      byte.b	0
    119  ab53		       00		      byte.b	0
    120  ab54		       00		      byte.b	0
    121  ab55		       00		      byte.b	0
    122  ab56		       00		      byte.b	0
    123  ab57		       00		      byte.b	0
    124  ab58		       00		      byte.b	0
    125  ab59		       00		      byte.b	0
    126  ab5a		       00		      byte.b	0
    127  ab5b		       00		      byte.b	0
    128  ab5c		       00		      byte.b	0
    129  ab5d		       00		      byte.b	0
    130  ab5e		       00		      byte.b	0
    131  ab5f		       00		      byte.b	0
    132  ab60		       00		      byte.b	0
    133  ab61		       00		      byte.b	0
    134  ab62
    135  ab62				   voice2lookup_alt
    136  ab62		       00		      byte.b	0
    137  ab63		       00		      byte.b	0
    138  ab64		       00		      byte.b	0
    139  ab65		       00		      byte.b	0
    140  ab66		       00		      byte.b	0
    141  ab67		       00		      byte.b	0
    142  ab68		       00		      byte.b	0
    143  ab69		       00		      byte.b	0
    144  ab6a		       00		      byte.b	0
    145  ab6b		       00		      byte.b	0
    146  ab6c		       00		      byte.b	0
    147  ab6d		       00		      byte.b	0
    148  ab6e		       00		      byte.b	0
    149  ab6f		       00		      byte.b	0
    150  ab70		       00		      byte.b	0
    151  ab71		       00		      byte.b	0
    152  ab72		       00		      byte.b	0
    153  ab73		       00		      byte.b	0
    154  ab74		       00		      byte.b	0
    155  ab75		       00		      byte.b	0
    156  ab76		       00		      byte.b	0
    157  ab77		       00		      byte.b	0
    158  ab78		       00		      byte.b	0
    159  ab79		       00		      byte.b	0
    160  ab7a		       00		      byte.b	0
    161  ab7b		       00		      byte.b	0
    162  ab7c		       00		      byte.b	0
    163  ab7d		       00		      byte.b	0
    164  ab7e		       00		      byte.b	0
    165  ab7f		       00		      byte.b	0
    166  ab80		       00		      byte.b	0
    167  ab81		       00		      byte.b	0
    168  ab82		       00		      byte.b	0
    169  ab83		       00		      byte.b	0
    170  ab84		       00		      byte.b	0
    171  ab85		       00		      byte.b	0
    172  ab86		       ff		      byte.b	255
    173  ab87		       86		      byte.b	134
    174  ab88		       8d		      byte.b	141
    175  ab89		       93		      byte.b	147
    176  ab8a		       99		      byte.b	153
    177  ab8b		       9f		      byte.b	159
    178  ab8c		       a4		      byte.b	164
    179  ab8d		       aa		      byte.b	170
    180  ab8e		       ae		      byte.b	174
    181  ab8f		       b3		      byte.b	179
    182  ab90		       b7		      byte.b	183
    183  ab91		       bb		      byte.b	187
    184  ab92		       bf		      byte.b	191
    185  ab93		       c3		      byte.b	195
    186  ab94		       c6		      byte.b	198
    187  ab95		       c9		      byte.b	201
    188  ab96		       cc		      byte.b	204
    189  ab97		       cf		      byte.b	207
    190  ab98		       d2		      byte.b	210
    191  ab99		       d4		      byte.b	212
    192  ab9a		       d7		      byte.b	215
    193  ab9b		       d9		      byte.b	217
    194  ab9c		       db		      byte.b	219
    195  ab9d		       dd		      byte.b	221
    196  ab9e		       df		      byte.b	223
    197  ab9f		       e1		      byte.b	225
    198  aba0		       e2		      byte.b	226
    199  aba1		       e4		      byte.b	228
    200  aba2		       e6		      byte.b	230
    201  aba3		       e7		      byte.b	231
    202  aba4		       e8		      byte.b	232
    203  aba5		       ea		      byte.b	234
    204  aba6		       eb		      byte.b	235
    205  aba7		       ec		      byte.b	236
    206  aba8		       ed		      byte.b	237
    207  aba9		       ee		      byte.b	238
    208  abaa		       ef		      byte.b	239
    209  abab		       00		      byte.b	0
    210  abac		       00		      byte.b	0
    211  abad		       00		      byte.b	0
    212  abae		       00		      byte.b	0
    213  abaf		       00		      byte.b	0
    214  abb0		       00		      byte.b	0
    215  abb1		       00		      byte.b	0
    216  abb2		       00		      byte.b	0
    217  abb3		       00		      byte.b	0
    218  abb4		       00		      byte.b	0
    219  abb5		       00		      byte.b	0
    220  abb6		       00		      byte.b	0
    221  abb7		       00		      byte.b	0
    222  abb8		       00		      byte.b	0
    223  abb9		       00		      byte.b	0
    224  abba		       00		      byte.b	0
    225  abbb		       00		      byte.b	0
    226  abbc		       00		      byte.b	0
    227  abbd		       00		      byte.b	0
    228  abbe		       00		      byte.b	0
    229  abbf		       00		      byte.b	0
    230  abc0		       00		      byte.b	0
    231  abc1		       00		      byte.b	0
    232  abc2		       00		      byte.b	0
    233  abc3		       00		      byte.b	0
    234  abc4		       00		      byte.b	0
    235  abc5		       00		      byte.b	0
    236  abc6		       00		      byte.b	0
    237  abc7		       00		      byte.b	0
    238  abc8		       00		      byte.b	0
    239  abc9		       00		      byte.b	0
    240  abca		       00		      byte.b	0
    241  abcb		       00		      byte.b	0
    242  abcc		       00		      byte.b	0
    243  abcd		       00		      byte.b	0
    244  abce		       00		      byte.b	0
    245  abcf		       00		      byte.b	0
    246  abd0		       00		      byte.b	0
    247  abd1		       00		      byte.b	0
    248  abd2		       00		      byte.b	0
    249  abd3		       00		      byte.b	0
    250  abd4		       00		      byte.b	0
    251  abd5		       00		      byte.b	0
    252  abd6		       00		      byte.b	0
    253  abd7		       00		      byte.b	0
    254  abd8		       00		      byte.b	0
    255  abd9		       00		      byte.b	0
    256  abda		       00		      byte.b	0
    257  abdb		       00		      byte.b	0
    258  abdc		       00		      byte.b	0
    259  abdd		       00		      byte.b	0
    260  abde		       00		      byte.b	0
    261  abdf		       00		      byte.b	0
    262  abe0		       00		      byte.b	0
    263  abe1		       00		      byte.b	0
    264  abe2
    265  abe2				   voice3lookup_alt
    266  abe2		       00		      byte.b	0
    267  abe3		       00		      byte.b	0
    268  abe4		       00		      byte.b	0
    269  abe5		       00		      byte.b	0
    270  abe6		       00		      byte.b	0
    271  abe7		       00		      byte.b	0
    272  abe8		       00		      byte.b	0
    273  abe9		       00		      byte.b	0
    274  abea		       00		      byte.b	0
    275  abeb		       00		      byte.b	0
    276  abec		       00		      byte.b	0
    277  abed		       00		      byte.b	0
    278  abee		       00		      byte.b	0
    279  abef		       00		      byte.b	0
    280  abf0		       00		      byte.b	0
    281  abf1		       00		      byte.b	0
    282  abf2		       00		      byte.b	0
    283  abf3		       00		      byte.b	0
    284  abf4		       00		      byte.b	0
    285  abf5		       00		      byte.b	0
    286  abf6		       00		      byte.b	0
    287  abf7		       00		      byte.b	0
    288  abf8		       00		      byte.b	0
    289  abf9		       00		      byte.b	0
    290  abfa		       00		      byte.b	0
    291  abfb		       00		      byte.b	0
    292  abfc		       00		      byte.b	0
    293  abfd		       00		      byte.b	0
    294  abfe		       00		      byte.b	0
    295  abff		       00		      byte.b	0
    296  ac00		       00		      byte.b	0
    297  ac01		       00		      byte.b	0
    298  ac02		       00		      byte.b	0
    299  ac03		       00		      byte.b	0
    300  ac04		       00		      byte.b	0
    301  ac05		       00		      byte.b	0
    302  ac06		       00		      byte.b	0
    303  ac07		       00		      byte.b	0
    304  ac08		       00		      byte.b	0
    305  ac09		       00		      byte.b	0
    306  ac0a		       00		      byte.b	0
    307  ac0b		       00		      byte.b	0
    308  ac0c		       00		      byte.b	0
    309  ac0d		       00		      byte.b	0
    310  ac0e		       00		      byte.b	0
    311  ac0f		       00		      byte.b	0
    312  ac10		       00		      byte.b	0
    313  ac11		       00		      byte.b	0
    314  ac12		       ff		      byte.b	255
    315  ac13		       86		      byte.b	134
    316  ac14		       8d		      byte.b	141
    317  ac15		       93		      byte.b	147
    318  ac16		       99		      byte.b	153
    319  ac17		       9f		      byte.b	159
    320  ac18		       a4		      byte.b	164
    321  ac19		       aa		      byte.b	170
    322  ac1a		       ae		      byte.b	174
    323  ac1b		       b3		      byte.b	179
    324  ac1c		       b7		      byte.b	183
    325  ac1d		       bb		      byte.b	187
    326  ac1e		       bf		      byte.b	191
    327  ac1f		       c3		      byte.b	195
    328  ac20		       c6		      byte.b	198
    329  ac21		       c9		      byte.b	201
    330  ac22		       cc		      byte.b	204
    331  ac23		       cf		      byte.b	207
    332  ac24		       d2		      byte.b	210
    333  ac25		       d4		      byte.b	212
    334  ac26		       d7		      byte.b	215
    335  ac27		       d9		      byte.b	217
    336  ac28		       db		      byte.b	219
    337  ac29		       dd		      byte.b	221
    338  ac2a		       df		      byte.b	223
    339  ac2b		       e1		      byte.b	225
    340  ac2c		       e2		      byte.b	226
    341  ac2d		       e4		      byte.b	228
    342  ac2e		       e6		      byte.b	230
    343  ac2f		       e7		      byte.b	231
    344  ac30		       e8		      byte.b	232
    345  ac31		       ea		      byte.b	234
    346  ac32		       eb		      byte.b	235
    347  ac33		       ec		      byte.b	236
    348  ac34		       ed		      byte.b	237
    349  ac35		       ee		      byte.b	238
    350  ac36		       ef		      byte.b	239
    351  ac37		       00		      byte.b	0
    352  ac38		       00		      byte.b	0
    353  ac39		       00		      byte.b	0
    354  ac3a		       00		      byte.b	0
    355  ac3b		       00		      byte.b	0
    356  ac3c		       00		      byte.b	0
    357  ac3d		       00		      byte.b	0
    358  ac3e		       00		      byte.b	0
    359  ac3f		       00		      byte.b	0
    360  ac40		       00		      byte.b	0
    361  ac41		       00		      byte.b	0
    362  ac42		       00		      byte.b	0
    363  ac43		       00		      byte.b	0
    364  ac44		       00		      byte.b	0
    365  ac45		       00		      byte.b	0
    366  ac46		       00		      byte.b	0
    367  ac47		       00		      byte.b	0
    368  ac48		       00		      byte.b	0
    369  ac49		       00		      byte.b	0
    370  ac4a		       00		      byte.b	0
    371  ac4b		       00		      byte.b	0
    372  ac4c		       00		      byte.b	0
    373  ac4d		       00		      byte.b	0
    374  ac4e		       00		      byte.b	0
    375  ac4f		       00		      byte.b	0
    376  ac50		       00		      byte.b	0
    377  ac51		       00		      byte.b	0
    378  ac52		       00		      byte.b	0
    379  ac53		       00		      byte.b	0
    380  ac54		       00		      byte.b	0
    381  ac55		       00		      byte.b	0
    382  ac56		       00		      byte.b	0
    383  ac57		       00		      byte.b	0
    384  ac58		       00		      byte.b	0
    385  ac59		       00		      byte.b	0
    386  ac5a		       00		      byte.b	0
    387  ac5b		       00		      byte.b	0
    388  ac5c		       00		      byte.b	0
    389  ac5d		       00		      byte.b	0
    390  ac5e		       00		      byte.b	0
    391  ac5f		       00		      byte.b	0
    392  ac60		       00		      byte.b	0
    393  ac61		       00		      byte.b	0
    394  ac62
    395  ac62
    396  ac62				   voice4lookup_alt
    397  ac62		       00		      byte.b	0
    398  ac63		       00		      byte.b	0
    399  ac64		       00		      byte.b	0
    400  ac65		       00		      byte.b	0
    401  ac66		       00		      byte.b	0
    402  ac67		       00		      byte.b	0
    403  ac68		       00		      byte.b	0
    404  ac69		       00		      byte.b	0
    405  ac6a		       00		      byte.b	0
    406  ac6b		       00		      byte.b	0
    407  ac6c		       00		      byte.b	0
    408  ac6d		       00		      byte.b	0
    409  ac6e		       00		      byte.b	0
    410  ac6f		       00		      byte.b	0
    411  ac70		       00		      byte.b	0
    412  ac71		       00		      byte.b	0
    413  ac72		       00		      byte.b	0
    414  ac73		       00		      byte.b	0
    415  ac74		       00		      byte.b	0
    416  ac75		       00		      byte.b	0
    417  ac76		       00		      byte.b	0
    418  ac77		       00		      byte.b	0
    419  ac78		       00		      byte.b	0
    420  ac79		       00		      byte.b	0
    421  ac7a		       00		      byte.b	0
    422  ac7b		       00		      byte.b	0
    423  ac7c		       00		      byte.b	0
    424  ac7d		       00		      byte.b	0
    425  ac7e		       00		      byte.b	0
    426  ac7f		       00		      byte.b	0
    427  ac80		       00		      byte.b	0
    428  ac81		       00		      byte.b	0
    429  ac82		       00		      byte.b	0
    430  ac83		       00		      byte.b	0
    431  ac84		       00		      byte.b	0
    432  ac85		       00		      byte.b	0
    433  ac86		       ff		      byte.b	255
    434  ac87		       86		      byte.b	134
    435  ac88		       8d		      byte.b	141
    436  ac89		       93		      byte.b	147
    437  ac8a		       99		      byte.b	153
    438  ac8b		       9f		      byte.b	159
    439  ac8c		       a4		      byte.b	164
    440  ac8d		       aa		      byte.b	170
    441  ac8e		       ae		      byte.b	174
    442  ac8f		       b3		      byte.b	179
    443  ac90		       b7		      byte.b	183
    444  ac91		       bb		      byte.b	187
    445  ac92		       bf		      byte.b	191
    446  ac93		       c3		      byte.b	195
    447  ac94		       c6		      byte.b	198
    448  ac95		       c9		      byte.b	201
    449  ac96		       cc		      byte.b	204
    450  ac97		       cf		      byte.b	207
    451  ac98		       d2		      byte.b	210
    452  ac99		       d4		      byte.b	212
    453  ac9a		       d7		      byte.b	215
    454  ac9b		       d9		      byte.b	217
    455  ac9c		       db		      byte.b	219
    456  ac9d		       dd		      byte.b	221
    457  ac9e		       df		      byte.b	223
    458  ac9f		       e1		      byte.b	225
    459  aca0		       e2		      byte.b	226
    460  aca1		       e4		      byte.b	228
    461  aca2		       e6		      byte.b	230
    462  aca3		       e7		      byte.b	231
    463  aca4		       e8		      byte.b	232
    464  aca5		       ea		      byte.b	234
    465  aca6		       eb		      byte.b	235
    466  aca7		       ec		      byte.b	236
    467  aca8		       ed		      byte.b	237
    468  aca9		       ee		      byte.b	238
    469  acaa		       ef		      byte.b	239
    470  acab		       00		      byte.b	0
    471  acac		       00		      byte.b	0
    472  acad		       00		      byte.b	0
    473  acae		       00		      byte.b	0
    474  acaf		       00		      byte.b	0
    475  acb0		       00		      byte.b	0
    476  acb1		       00		      byte.b	0
    477  acb2		       00		      byte.b	0
    478  acb3		       00		      byte.b	0
    479  acb4		       00		      byte.b	0
    480  acb5		       00		      byte.b	0
    481  acb6		       00		      byte.b	0
    482  acb7		       00		      byte.b	0
    483  acb8		       00		      byte.b	0
    484  acb9		       00		      byte.b	0
    485  acba		       00		      byte.b	0
    486  acbb		       00		      byte.b	0
    487  acbc		       00		      byte.b	0
    488  acbd		       00		      byte.b	0
    489  acbe		       00		      byte.b	0
    490  acbf		       00		      byte.b	0
    491  acc0		       00		      byte.b	0
    492  acc1		       00		      byte.b	0
    493  acc2		       00		      byte.b	0
    494  acc3		       00		      byte.b	0
    495  acc4		       00		      byte.b	0
    496  acc5		       00		      byte.b	0
    497  acc6		       00		      byte.b	0
    498  acc7		       00		      byte.b	0
    499  acc8		       00		      byte.b	0
    500  acc9		       00		      byte.b	0
    501  acca		       00		      byte.b	0
    502  accb		       00		      byte.b	0
    503  accc		       00		      byte.b	0
    504  accd		       00		      byte.b	0
    505  acce		       00		      byte.b	0
    506  accf		       00		      byte.b	0
    507  acd0		       00		      byte.b	0
    508  acd1		       00		      byte.b	0
    509  acd2		       00		      byte.b	0
    510  acd3		       00		      byte.b	0
    511  acd4		       00		      byte.b	0
    512  acd5		       00		      byte.b	0
    513  acd6		       00		      byte.b	0
    514  acd7		       00		      byte.b	0
    515  acd8		       00		      byte.b	0
    516  acd9		       00		      byte.b	0
    517  acda		       00		      byte.b	0
    518  acdb		       00		      byte.b	0
    519  acdc		       00		      byte.b	0
    520  acdd		       00		      byte.b	0
    521  acde		       00		      byte.b	0
    522  acdf		       00		      byte.b	0
    523  ace0		       00		      byte.b	0
    524  ace1		       00		      byte.b	0
    525  ace2
    526  ace2							; EOF!
------- FILE vicmidi.asm
    779  ace2
    780  ace2							; ----------------------------------------------------------------------------
    781  ace2							; Binary includes
    782  ace2
    783  ace2				   fontorg
    784  ace2					      incbin	"font.bin"
    785  b0e2
    786  b0e2
    787  b0e2							; EOF!
