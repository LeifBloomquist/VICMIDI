------- FILE vicmidi.asm LEVEL 1 PASS 2
      1  aca8 ????						; VIC-20 MIDI Interface
      2  aca8 ????						; By David Viens and Leif Bloomquist, portions by
      3  aca8 ????						; Michael Kircher and Viznut
      4  aca8 ????
      5  aca8 ????						; ----------------------------------------------------------------------------
      6  aca8 ????
      7  aca8 ????				      processor	6502	; VIC-20
      8  aca8 ????
      9  aca8 ????						; Assume no memory expansion.	 Compile as Cartridge ROM in Block 5.
     10  a000					      org	$A000	; Block 5
     11  a000
     12  a000							; Macro and equate includes (must be at start)
------- FILE macros.asm LEVEL 2 PASS 2
      0  a000					      include	"macros.asm"
      1  a000
      2  a000							; ==============================================================
      3  a000							; Macro wrapping the fast hex poke
      4  a000							; ==============================================================
      5  a000
      6  a000					      MAC	hexpoke
      7  a000					      lda	#<{1}	; Low byte
      8  a000					      sta	$22
      9  a000					      lda	#>{1}	; High byte
     10  a000					      sta	$23
     11  a000
     12  a000					      lda	{2}	; Note - address
     13  a000					      jsr	hexstr
     14  a000					      ENDM
     15  a000
     16  a000							; ==============================================================
     17  a000							; Macro to position the cursor
     18  a000							; ==============================================================
     19  a000
     20  a000					      MAC	plot
     21  a000					      ldy	#{1}
     22  a000					      ldx	#{2}
     23  a000					      clc
     24  a000					      jsr	$E50A	; PLOT - same on 64 and VIC
     25  a000					      ENDM
     26  a000
     27  a000							; ==============================================================
     28  a000							; Macro to print a string
     29  a000							; ==============================================================
     30  a000
     31  a000					      MAC	printstring
     32  a000					      ldy	#>{0}
     33  a000					      lda	#<{0}
     34  a000					      jsr	STROUT
     35  a000					      ENDM
     36  a000
     37  a000							; ==============================================================
     38  a000							; Macro to print a byte (Hex)
     39  a000							; ==============================================================
     40  a000
     41  a000					      MAC	printbyte
     42  a000					      ldx	#$00
     43  a000					      ldy	#$0F
     44  a000					      lda	{0}
     45  a000					      jsr	printnum
     46  a000					      ENDM
------- FILE vicmidi.asm
------- FILE equates.asm LEVEL 2 PASS 2
      0  a000					      include	"equates.asm"
      1  a000							; --------------------------------------------------------------------------------------------------
      2  a000							;;free zero page (to use as vars)
      3  a000							;INDEX1: $0022-$0023, First utility pointer		       used by HEXPOKE
      4  a000							;INDEX2: $0024-$0025, Second utility pointer		       bytesexpected, midicounter
      5  a000							;FORNAM: $0049-$004A, Pointer to FOR/NEXT index variable etc  channel
      6  a000							;TEMPF3: $004E-$0052, Temporary FLPT storage		       Used by keyboard routines
      7  a000							;TEMPF1: $0057-$005B, Temporary FLPT storage		       Used by setwave
      8  a000							;TEMPF2: $005C-$0060: Temporary FLPT storage		       FIFO pointers
      9  a000							;FAC:	  $0061-$0066, Floating-point Accumulator (FAC)        Flags for Poly mode
     10  a000							;AFAC:   $0069-$006E, Alternative/Auxilary FAC 	       69=last note
     11  a000
     12  a000							; ---- Zero Page Addresses -------------------------------------------------
     13  a000
     14  a000		       00 24	   midicounter =	$24
     15  a000		       00 25	   bytesexpected =	$25
     16  a000
     17  a000		       00 49	   channel    =	$49
     18  a000		       00 4a	   bank       =	$4A	; 0=NTSC Normal, 1=PAL Normal, 2=NTSC Alt., 3=PAL Alt.
     19  a000
     20  a000							; Previous keyboard column bits.
     21  a000		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
     22  a000		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     23  a000		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     24  a000		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     25  a000
     26  a000							; Used by setwave
     27  a000		       00 57	   TMP	      =	$57
     28  a000		       00 58	   TMP2       =	$58
     29  a000
     30  a000		       00 5c	   write_pointer =	$5C	; FIFO current write pointer - incremented on byte received
     31  a000		       00 5d	   read_pointer =	$5D	; FIFO current read pointer - incremented on byte removed
     32  a000
     33  a000		       00 5e	   currentvalue =	$5E	; Current value for voice settings
     34  a000
     35  a000		       00 61	   poly_flags =	$61	; Flags for polymode
     36  a000							; Also 62,63,64
     37  a000
     38  a000		       00 69	   lastnote   =	$69	; Remembers last note, so Note Off applies to that note only
     39  a000							; Also 69,6A,6B
     40  a000
     41  a000		       00 6c	   temp1      =	$6C	; Used for screen colors
     42  a000		       00 6d	   tempx      =	$6D	; Used by program change
     43  a000
     44  a000							;*00FB-00FE  251-254  Operating system free zero page space
     45  a000		       00 fb	   statusbyte =	$FB
     46  a000		       00 fc	   mididata0  =	$FC
     47  a000		       00 fd	   mididata1  =	$FD
     48  a000		       00 fe	   mididata2  =	$FE	; If needed
     49  a000
     50  a000							; ---- Non Zero Page Addresses -----------------------------------------------
     51  a000
     52  a000							; Setwave Target
     53  a000		       10 00	   setwave    =	$1000	; This is right at the start of BASIC space.  Setwave code has to all be on one page.
     54  a000
     55  a000							; Store viznut waveform being used per voice
     56  a000		       11 00	   waveform1  =	$1100
     57  a000		       11 01	   waveform2  =	$1101
     58  a000		       11 02	   waveform3  =	$1102
     59  a000		       11 03	   waveform4  =	$1103
     60  a000
     61  a000							; Input Buffer
     62  a000		       12 00	   buffer     =	$1200
     63  a000
     64  a000							; ST16C450 Registers
     65  a000		       9c 00	   UART_RXTX  =	$9C00
     66  a000		       9c 01	   UART_IER   =	$9C01
     67  a000		       9c 02	   UART_ISR   =	$9C02
     68  a000		       9c 03	   UART_LCR   =	$9C03
     69  a000		       9c 05	   UART_LSR   =	$9C05
     70  a000		       9c 07	   UART_SCRATCHPAD =	$9C07
     71  a000		       9c 00	   UART_DIVISOR_LSB =	$9C00	; Yes, same as UART_RXTX
     72  a000		       9c 01	   UART_DIVISOR_MSB =	$9C01
     73  a000
     74  a000							;Sound and Video Registers
     75  a000		       90 0a	   sound_voice1 =	$900A	; Frequency for oscillator 1 (low)    (on: 128-255)
     76  a000		       90 0b	   sound_voice2 =	$900B	; Frequency for oscillator 2 (medium) (on: 128-255)
     77  a000		       90 0c	   sound_voice3 =	$900C	; Frequency for oscillator 3 (high)   (on: 128-255)
     78  a000		       90 0d	   sound_noise =	$900D	; Frequency of noise source	       (on: 128-255)
     79  a000		       90 0e	   sound_volume =	$900E	; Bits 0-3 sets volume of all sound.  Bits 4-7 are auxiliary color information (not used)
     80  a000		       90 0f	   screen_colors =	$900F
     81  a000
     82  a000							;Screen locations
     83  a000		       1e 00	   screen_start =	$1E00
     84  a000		       1e 4d	   midi_display =	$1E4D
     85  a000		       1e 77	   voice_display =	$1E77
     86  a000		       1f f9	   spin_display =	$1FF9	; Lower-right corner
     87  a000		       97 f9	   spin_color =	spin_display + $7800
     88  a000
     89  a000
     90  a000							; Kernal/BASIC Routines
     91  a000		       f2 7a	   CHROUT     =	$f27a
     92  a000		       e5 5f	   CLRSCREEN  =	$e55f
     93  a000		       e5 81	   HOME       =	$E581
     94  a000		       cb 1e	   STROUT     =	$CB1E	; Print string pointed to by (A/Y) until zero byte.
     95  a000
     96  a000		       00 08	   CG_DCS     =	8	;disable shift+C=
     97  a000		       00 09	   CG_ECS     =	9	;enable shift+C=
     98  a000
     99  a000		       00 0e	   CG_LCS     =	14	;switch to lowercase
    100  a000		       00 8e	   CG_UCS     =	142	;switch to uppercase
    101  a000
    102  a000							;cursor movement
    103  a000		       00 13	   CS_HOM     =	19
    104  a000		       00 91	   CS_U       =	145
    105  a000		       00 11	   CS_D       =	17
    106  a000		       00 9d	   CS_L       =	157
    107  a000		       00 1d	   CS_R       =	29
    108  a000
    109  a000		       00 0d	   CRLF       =	13
    110  a000
    111  a000							; EOF!
------- FILE vicmidi.asm
     15  a000
     16  a000							; ---- Startup Code ---------------------------------------------------------
     17  a000		       09 a0		      dc.w	START	; Entry point for power up
     18  a002		       4d a5		      dc.w	RESTORE	; Entry point for warm start (RESTORE)
     19  a004
     20  a004		       41 30 c3 c2*	      dc.b	"A0",$C3,$C2,$CD	; 'A0CBM' boot string
     21  a009
     22  a009				   START
     23  a009							;Kernel Init
     24  a009		       20 8d fd 	      jsr	$fd8d	; RAMTAS - Initialise System Constants
     25  a00c		       20 52 fd 	      jsr	$fd52	; Init Vectors
     26  a00f		       20 f9 fd 	      jsr	$fdf9	; Init I/O
     27  a012		       20 18 e5 	      jsr	$e518	; Init I/O
     28  a015
     29  a015							;BASIC Init (Partial)
     30  a015		       20 5b e4 	      jsr	$e45b	; Init Vectors
     31  a018		       20 a4 e3 	      jsr	$e3a4	; BASIC RAM
     32  a01b		       20 04 e4 	      jsr	$e404	; INIT Message (needed (?) so keycheck routines work)
     33  a01e
     34  a01e				   entry
     35  a01e		       20 3f a3 	      jsr	mainscreen
     36  a021		       20 b1 a5 	      jsr	setup_pal
     37  a024		       20 69 a3 	      jsr	setwavecopy
     38  a027		       20 e5 a4 	      jsr	checkuart
     39  a02a		       20 28 a5 	      jsr	setupirq
     40  a02d		       20 0e a5 	      jsr	resetuart
     41  a030
     42  a030							; Default to maximum volume
     43  a030		       a9 0f		      lda	#$0F
     44  a032		       20 2b a2 	      jsr	setvolume
     45  a035
     46  a035							; Initial Values
     47  a035		       a9 00		      lda	#$00
     48  a037		       85 24		      sta	midicounter	; midicounter=0
     49  a039		       85 fb		      sta	statusbyte	; statusbyte=0
     50  a03b		       85 fc		      sta	mididata0	; mididata0=0
     51  a03d		       85 fd		      sta	mididata1	; mididata1=0
     52  a03f		       85 fe		      sta	mididata2	; mididata2=0
     53  a041		       85 4e		      sta	c0	; no keys are pressed in 7F
     54  a043		       85 4f		      sta	c1	; no keys are pressed in BF
     55  a045		       85 50		      sta	c2	; no keys are pressed in FD
     56  a047		       85 51		      sta	c3	; no keys are pressed in FE
     57  a049		       85 69		      sta	lastnote+0	; Clear
     58  a04b		       85 6a		      sta	lastnote+1	;    last
     59  a04d		       85 6b		      sta	lastnote+2	;	note
     60  a04f		       85 61		      sta	poly_flags+0	; Clear
     61  a051		       85 62		      sta	poly_flags+1	;   poly
     62  a053		       85 63		      sta	poly_flags+2	;     flags
     63  a055		       8d f9 97 	      sta	spin_color
     64  a058		       85 5c		      sta	write_pointer
     65  a05a		       85 5d		      sta	read_pointer
     66  a05c		       8d 00 11 	      sta	waveform1
     67  a05f		       8d 01 11 	      sta	waveform2
     68  a062		       8d 02 11 	      sta	waveform3
     69  a065		       8d 03 11 	      sta	waveform4
     70  a068
     71  a068							;;; ==========================================================================
     72  a068							;;; main LOOP!
     73  a068				   loop
     74  a068		       ee f9 97 	      inc	spin_color	; Prove we aren't 'frozen'
     75  a06b							;jsr GetKey	  ; create events from keyboard if needed - TODO
     76  a06b
     77  a06b		       a5 5d		      lda	read_pointer
     78  a06d		       c5 5c		      cmp	write_pointer
     79  a06f		       f0 f7		      beq	loop	; Pointers match, no data
     80  a071							;;; ==========================================================================
     81  a071
     82  a071							; We have data!
     83  a071							; Advance pointer for next read
     84  a071		       e6 5d		      inc	read_pointer
     85  a073
     86  a073							; Read current byte
     87  a073		       aa		      tax		; Since A still contains the unincremented pointer
     88  a074		       bd 00 12 	      lda	buffer,x
     89  a077
     90  a077							; If Bit 7 is set, it means it's a status byte and we need to prepare for a new message
     91  a077		       10 18		      bpl	data	; Not a status byte
     92  a079
     93  a079							; Store the status byte
     94  a079		       85 fb		      sta	statusbyte
     95  a07b
     96  a07b							; Reset the midi counter to 0
     97  a07b		       a2 00		      ldx	#$00
     98  a07d		       86 24		      stx	midicounter
     99  a07f
    100  a07f							; Also, check how many bytes we'll need - Normally 3, but 2 for Program Change
    101  a07f		       29 f0		      and	#$F0	; Get the upper nybble
    102  a081		       c9 c0		      cmp	#$C0	; Program change
    103  a083		       d0 05		      bne	bytes2
    104  a085
    105  a085				   bytes1
    106  a085		       a0 01		      ldy	#$01
    107  a087		       4c 8c a0 	      jmp	setbytes
    108  a08a
    109  a08a				   bytes2
    110  a08a		       a0 02		      ldy	#$02
    111  a08c
    112  a08c				   setbytes
    113  a08c		       84 25		      sty	bytesexpected
    114  a08e		       4c 68 a0 	      jmp	loop	; Wait for next byte
    115  a091
    116  a091							; ----------------------------------------------------------------------------
    117  a091							; Store data byte
    118  a091
    119  a091				   data
    120  a091		       a6 24		      ldx	midicounter	; What byte are we at?
    121  a093		       95 fc		      sta	mididata0,x	; Store received midi data pointed by x
    122  a095
    123  a095		       e8		      inx		; x++
    124  a096		       86 24		      stx	midicounter	; and store x
    125  a098
    126  a098		       e4 25		      cpx	bytesexpected	; Number of data bytes expected in this MIDI message (i.e. 2)
    127  a09a		       f0 03		      beq	messageproc	; Complete MIDI message received.
    128  a09c
    129  a09c							; Not complete, wait for more bytes.
    130  a09c		       4c 68 a0 	      jmp	loop
    131  a09f
    132  a09f							; ----------------------------------------------------------------------------
    133  a09f							; Process a complete MIDI message
    134  a09f
    135  a09f				   messageproc
    136  a09f							; Reset midicounter back to 0 for next message -
    137  a09f							; This might be redundant, see above line 100
    138  a09f		       a9 00		      lda	#$00
    139  a0a1		       85 24		      sta	midicounter
    140  a0a3
    141  a0a3							; Display received message bytes
      0  a0a3					      HEXPOKE	(midi_display+0),statusbyte
      1  a0a3		       a9 4d		      lda	#<(midi_display+0)
      2  a0a5		       85 22		      sta	$22
      3  a0a7		       a9 1e		      lda	#>(midi_display+0)
      4  a0a9		       85 23		      sta	$23
      5  a0ab
      6  a0ab		       a5 fb		      lda	statusbyte
      7  a0ad		       20 65 a5 	      jsr	hexstr
      0  a0b0					      HEXPOKE	(midi_display+3),mididata0
      1  a0b0		       a9 50		      lda	#<(midi_display+3)
      2  a0b2		       85 22		      sta	$22
      3  a0b4		       a9 1e		      lda	#>(midi_display+3)
      4  a0b6		       85 23		      sta	$23
      5  a0b8
      6  a0b8		       a5 fc		      lda	mididata0
      7  a0ba		       20 65 a5 	      jsr	hexstr
      0  a0bd					      HEXPOKE	(midi_display+6),mididata1
      1  a0bd		       a9 53		      lda	#<(midi_display+6)
      2  a0bf		       85 22		      sta	$22
      3  a0c1		       a9 1e		      lda	#>(midi_display+6)
      4  a0c3		       85 23		      sta	$23
      5  a0c5
      6  a0c5		       a5 fd		      lda	mididata1
      7  a0c7		       20 65 a5 	      jsr	hexstr
    145  a0ca
    146  a0ca							; Save channel
    147  a0ca		       a5 fb		      lda	statusbyte
    148  a0cc		       29 0f		      and	#$0F
    149  a0ce		       85 49		      sta	channel
    150  a0d0
    151  a0d0							; Determine Command
    152  a0d0		       a5 fb		      lda	statusbyte	; Status Byte
    153  a0d2		       29 f0		      and	#$F0	; Get the upper nybble
    154  a0d4
    155  a0d4		       c9 80		      cmp	#$80	; Note Off
    156  a0d6		       f0 0f		      beq	donoteoff
    157  a0d8
    158  a0d8		       c9 90		      cmp	#$90	; Note On
    159  a0da		       f0 11		      beq	donoteon
    160  a0dc
    161  a0dc		       c9 b0		      cmp	#$B0	; Control Change
    162  a0de		       f0 13		      beq	docontrolchange
    163  a0e0
    164  a0e0		       c9 c0		      cmp	#$C0	; Program Change
    165  a0e2		       f0 15		      beq	doprogramchange
    166  a0e4
    167  a0e4							; All others (Aftertouch, etc.) ignored.
    168  a0e4		       4c 68 a0 	      jmp	loop
    169  a0e7
    170  a0e7				   donoteoff
    171  a0e7		       20 a3 a1 	      jsr	noteoff
    172  a0ea		       4c 68 a0 	      jmp	loop
    173  a0ed
    174  a0ed				   donoteon
    175  a0ed		       20 ff a0 	      jsr	noteon
    176  a0f0		       4c 68 a0 	      jmp	loop
    177  a0f3
    178  a0f3				   docontrolchange
    179  a0f3		       20 bc a1 	      jsr	controlchange
    180  a0f6		       4c 68 a0 	      jmp	loop
    181  a0f9
    182  a0f9				   doprogramchange
    183  a0f9		       20 56 a2 	      jsr	programchange
    184  a0fc		       4c 68 a0 	      jmp	loop
    185  a0ff
    186  a0ff
    187  a0ff							;*****************************************************************************
    188  a0ff							;*************************  MIDI Processing  *********************************
    189  a0ff							;*****************************************************************************
    190  a0ff
    191  a0ff							; ---- Note On ---------------------------------------------------
    192  a0ff							; 9c nn vv
    193  a0ff
    194  a0ff				   noteon
    195  a0ff							; Special Case: Treat Velocity=0 as Note Off.	Velocity ignored otherwise.
    196  a0ff		       a5 fd		      lda	mididata1
    197  a101		       d0 03		      bne	noteon_contd
    198  a103		       4c a3 a1 	      jmp	noteoff
    199  a106
    200  a106				   noteon_contd
    201  a106		       a4 49		      ldy	channel	; Y now contains Channel # (0-offset)
    202  a108		       a6 fc		      ldx	mididata0	; X now contains MIDI Note #
    203  a10a
    204  a10a							; Special Case: Channel 5 used for Poly mode
    205  a10a		       c0 04		      cpy	#$04
    206  a10c		       d0 03		      bne	savenote
    207  a10e		       20 c6 a5 	      jsr	get_poly_voice
    208  a111
    209  a111				   savenote
    210  a111							; Save the note# so that later Note Offs only apply to this note.
    211  a111		       8a		      txa
    212  a112		       99 69 00 	      sta	lastnote,y
    213  a115
    214  a115							; Perform a table lookup of MIDI Note# to VIC Register
    215  a115							; Table to use depends on bank/voice/channel
    216  a115
    217  a115							; Check the bank
    218  a115		       a5 4a		      lda	bank
    219  a117
    220  a117		       c9 00		      cmp	#$00
    221  a119		       f0 0d		      beq	lookups_ntsc
    222  a11b
    223  a11b		       c9 01		      cmp	#$01
    224  a11d		       f0 32		      beq	lookups_pal
    225  a11f
    226  a11f		       c9 02		      cmp	#$02
    227  a121		       f0 57		      beq	lookups_alt
    228  a123
    229  a123		       c9 03		      cmp	#$03
    230  a125		       f0 53		      beq	lookups_alt
    231  a127
    232  a127							; Ignore all other banks
    233  a127		       60		      rts
    234  a128
    235  a128
    236  a128							; ------ NTSC -------
    237  a128
    238  a128				   lookups_ntsc
    239  a128		       c0 00		      cpy	#$00
    240  a12a		       f0 0d		      beq	vlook1_ntsc
    241  a12c
    242  a12c		       c0 01		      cpy	#$01
    243  a12e		       f0 0f		      beq	vlook2_ntsc
    244  a130
    245  a130		       c0 02		      cpy	#$02
    246  a132		       f0 11		      beq	vlook3_ntsc
    247  a134
    248  a134		       c0 03		      cpy	#$03
    249  a136		       f0 13		      beq	vlook4_ntsc
    250  a138
    251  a138							; Ignore all other channels
    252  a138		       60		      rts
    253  a139
    254  a139				   vlook1_ntsc
    255  a139		       bd a8 a6 	      lda	voice1lookup_ntsc,x
    256  a13c		       4c cd a2 	      jmp	setvoice
    257  a13f
    258  a13f				   vlook2_ntsc
    259  a13f		       bd 28 a7 	      lda	voice2lookup_ntsc,x
    260  a142		       4c cd a2 	      jmp	setvoice
    261  a145
    262  a145				   vlook3_ntsc
    263  a145		       bd a8 a7 	      lda	voice3lookup_ntsc,x
    264  a148		       4c cd a2 	      jmp	setvoice
    265  a14b
    266  a14b				   vlook4_ntsc
    267  a14b		       bd 28 a8 	      lda	voice4lookup_ntsc,x
    268  a14e		       4c cd a2 	      jmp	setvoice
    269  a151
    270  a151							; ------ PAL -------
    271  a151
    272  a151				   lookups_pal
    273  a151		       c0 00		      cpy	#$00
    274  a153		       f0 0d		      beq	vlook1_pal
    275  a155
    276  a155		       c0 01		      cpy	#$01
    277  a157		       f0 0f		      beq	vlook2_pal
    278  a159
    279  a159		       c0 02		      cpy	#$02
    280  a15b		       f0 11		      beq	vlook3_pal
    281  a15d
    282  a15d		       c0 03		      cpy	#$03
    283  a15f		       f0 13		      beq	vlook4_pal
    284  a161
    285  a161							; Ignore all other channels
    286  a161		       60		      rts
    287  a162
    288  a162				   vlook1_pal
    289  a162		       bd a8 a8 	      lda	voice1lookup_pal,x
    290  a165		       4c cd a2 	      jmp	setvoice
    291  a168
    292  a168				   vlook2_pal
    293  a168		       bd 28 a9 	      lda	voice2lookup_pal,x
    294  a16b		       4c cd a2 	      jmp	setvoice
    295  a16e
    296  a16e				   vlook3_pal
    297  a16e		       bd a8 a9 	      lda	voice3lookup_pal,x
    298  a171		       4c cd a2 	      jmp	setvoice
    299  a174
    300  a174				   vlook4_pal
    301  a174		       bd 28 aa 	      lda	voice4lookup_pal,x
    302  a177		       4c cd a2 	      jmp	setvoice
    303  a17a
    304  a17a							; ------ Alternate -------
    305  a17a
    306  a17a				   lookups_alt
    307  a17a		       c0 00		      cpy	#$00
    308  a17c		       f0 0d		      beq	vlook1_alt
    309  a17e
    310  a17e		       c0 01		      cpy	#$01
    311  a180		       f0 0f		      beq	vlook2_alt
    312  a182
    313  a182		       c0 02		      cpy	#$02
    314  a184		       f0 11		      beq	vlook3_alt
    315  a186
    316  a186		       c0 03		      cpy	#$03
    317  a188		       f0 13		      beq	vlook4_alt
    318  a18a
    319  a18a							; Ignore all other channels
    320  a18a		       60		      rts
    321  a18b
    322  a18b				   vlook1_alt
    323  a18b		       bd a8 aa 	      lda	voice1lookup_alt,x
    324  a18e		       4c cd a2 	      jmp	setvoice
    325  a191
    326  a191				   vlook2_alt
    327  a191		       bd 28 ab 	      lda	voice2lookup_alt,x
    328  a194		       4c cd a2 	      jmp	setvoice
    329  a197
    330  a197				   vlook3_alt
    331  a197		       bd a8 ab 	      lda	voice3lookup_alt,x
    332  a19a		       4c cd a2 	      jmp	setvoice
    333  a19d
    334  a19d				   vlook4_alt
    335  a19d		       bd 28 ac 	      lda	voice4lookup_alt,x
    336  a1a0		       4c cd a2 	      jmp	setvoice
    337  a1a3
    338  a1a3							; ---- Note Off --------------------------------------------------------------
    339  a1a3							; 8c nn vv
    340  a1a3
    341  a1a3				   noteoff
    342  a1a3		       a4 49		      ldy	channel	; Y now contains channel #
    343  a1a5
    344  a1a5							; Special Case: Channel 5 used for Poly mode
    345  a1a5		       c0 04		      cpy	#$04
    346  a1a7		       d0 06		      bne	noteoff_check
    347  a1a9
    348  a1a9		       20 db a5 	      jsr	get_poly_voice_off
    349  a1ac		       4c b6 a1 	      jmp	noteoff_off
    350  a1af
    351  a1af				   noteoff_check
    352  a1af							;For Channels 1-4
    353  a1af							;Check if it matches the last.  If not, ignore.
    354  a1af		       b9 69 00 	      lda	lastnote,y
    355  a1b2		       c5 fc		      cmp	mididata0
    356  a1b4		       d0 05		      bne	noteoff_x
    357  a1b6
    358  a1b6				   noteoff_off
    359  a1b6		       a9 00		      lda	#$00	; Off
    360  a1b8		       4c cd a2 	      jmp	setvoice
    361  a1bb
    362  a1bb				   noteoff_x
    363  a1bb		       60		      rts
    364  a1bc
    365  a1bc							; ---- Control Change --------------------------------------------------------
    366  a1bc							; Bc CC vv
    367  a1bc
    368  a1bc				   controlchange
    369  a1bc		       a4 49		      ldy	channel	; Y now contains channel #
    370  a1be
    371  a1be		       a5 fc		      lda	mididata0	; Controller number
    372  a1c0
    373  a1c0		       c9 00		      cmp	#00	; Bank select - decimal
    374  a1c2		       f0 15		      beq	bankselect
    375  a1c4
    376  a1c4		       c9 01		      cmp	#01	; Modulation Wheel (coarse) - decimal
    377  a1c6		       f0 57		      beq	modwheel
    378  a1c8
    379  a1c8		       c9 07		      cmp	#07	; Volume (coarse) - decimal
    380  a1ca		       f0 5a		      beq	volume
    381  a1cc
    382  a1cc		       c9 4a		      cmp	#74	; Brightness - decimal
    383  a1ce		       f0 6d		      beq	screencolors
    384  a1d0
    385  a1d0		       c9 78		      cmp	#120	; All Sound Off - decimal
    386  a1d2		       f0 7d		      beq	soundoff
    387  a1d4
    388  a1d4		       c9 7b		      cmp	#123	; All Notes Off - decimal
    389  a1d6		       f0 79		      beq	soundoff
    390  a1d8
    391  a1d8							; Ignore all the rest
    392  a1d8		       60		      rts
    393  a1d9
    394  a1d9							; ---- Bank Select -----------------------------------------------------------
    395  a1d9							; Bc 00 vv
    396  a1d9
    397  a1d9				   bankselect
    398  a1d9		       a5 fd		      lda	mididata1
    399  a1db		       29 03		      and	#$03	; A contains bank, 0-3
    400  a1dd		       85 4a		      sta	bank
    401  a1df
    402  a1df				   showbank
      0  a1df					      HEXPOKE	(voice_display+132),bank
      1  a1df		       a9 fb		      lda	#<(voice_display+132)
      2  a1e1		       85 22		      sta	$22
      3  a1e3		       a9 1e		      lda	#>(voice_display+132)
      4  a1e5		       85 23		      sta	$23
      5  a1e7
      6  a1e7		       a5 4a		      lda	bank
      7  a1e9		       20 65 a5 	      jsr	hexstr
    404  a1ec
      0  a1ec					      PLOT	9,13
      1  a1ec		       a0 09		      ldy	#9
      2  a1ee		       a2 0d		      ldx	#13
      3  a1f0		       18		      clc
      4  a1f1		       20 0a e5 	      jsr	$E50A
    406  a1f4
    407  a1f4		       a5 4a		      lda	bank
    408  a1f6
    409  a1f6		       c9 00		      cmp	#$00
    410  a1f8		       f0 0d		      beq	ntsc
    411  a1fa
    412  a1fa		       c9 01		      cmp	#$01
    413  a1fc		       f0 11		      beq	pal
    414  a1fe
    415  a1fe		       c9 02		      cmp	#$02
    416  a200		       f0 15		      beq	alt
    417  a202
    418  a202		       c9 03		      cmp	#$03
    419  a204		       f0 11		      beq	alt
    420  a206
    421  a206							; Ignore the rest
    422  a206		       60		      rts
    423  a207
    424  a207				   ntsc
      0  a207					      PRINTSTRING	ntscstring
      1  a207		       a0 a4		      ldy	#>ntscstring
      2  a209		       a9 d7		      lda	#<ntscstring
      3  a20b		       20 1e cb 	      jsr	STROUT
    426  a20e		       60		      rts
    427  a20f
    428  a20f				   pal
      0  a20f					      PRINTSTRING	palstring
      1  a20f		       a0 a4		      ldy	#>palstring
      2  a211		       a9 d2		      lda	#<palstring
      3  a213		       20 1e cb 	      jsr	STROUT
    430  a216		       60		      rts
    431  a217
    432  a217				   alt
      0  a217					      PRINTSTRING	altstring
      1  a217		       a0 a4		      ldy	#>altstring
      2  a219		       a9 dc		      lda	#<altstring
      3  a21b		       20 1e cb 	      jsr	STROUT
    434  a21e		       60		      rts
    435  a21f
    436  a21f							; ---- MOD Wheel Controller --------------------------------------------------
    437  a21f							; Bc 01 vv
    438  a21f
    439  a21f							; Poke the data directly to the register, after OR'ing with $80
    440  a21f				   modwheel
    441  a21f		       a5 fd		      lda	mididata1
    442  a221		       09 80		      ora	#$80
    443  a223		       4c cd a2 	      jmp	setvoice
    444  a226
    445  a226							; ---- Volume Controller -----------------------------------------------------
    446  a226							; Bc 07 vv
    447  a226
    448  a226				   volume
    449  a226		       a5 fd		      lda	mididata1
    450  a228		       4a		      lsr
    451  a229		       4a		      lsr
    452  a22a		       4a		      lsr
    453  a22b
    454  a22b				   setvolume
    455  a22b		       8d 0e 90 	      sta	sound_volume
      0  a22e					      HEXPOKE	(voice_display+110),sound_volume
      1  a22e		       a9 e5		      lda	#<(voice_display+110)
      2  a230		       85 22		      sta	$22
      3  a232		       a9 1e		      lda	#>(voice_display+110)
      4  a234		       85 23		      sta	$23
      5  a236
      6  a236		       ad 0e 90 	      lda	sound_volume
      7  a239		       20 65 a5 	      jsr	hexstr
    457  a23c		       60		      rts
    458  a23d
    459  a23d							; ---- Brightness Controller (used for screen color)--------------------------
    460  a23d							; Bc 4a vv
    461  a23d
    462  a23d				   screencolors
    463  a23d		       18		      clc
    464  a23e		       a5 fd		      lda	mididata1	; 7-bit
    465  a240
    466  a240		       29 07		      and	#%00000111	; Get border
    467  a242		       85 6c		      sta	temp1
    468  a244
    469  a244		       a5 fd		      lda	mididata1
    470  a246		       29 78		      and	#%01111000	; Get background
    471  a248		       0a		      asl		; Shift 1 bit left
    472  a249
    473  a249		       05 6c		      ora	temp1	; Put border back in
    474  a24b		       09 08		      ora	#%00001000	; No Reverse Mode
    475  a24d
    476  a24d		       8d 0f 90 	      sta	screen_colors
    477  a250		       60		      rts
    478  a251
    479  a251							; ---- Sound Off / All Notes Off Controller-----------------------------------
    480  a251							; Bc 78 xx
    481  a251							; Bc 7B xx
    482  a251
    483  a251				   soundoff
    484  a251		       a9 00		      lda	#$00	; Off
    485  a253		       4c cd a2 	      jmp	setvoice
    486  a256
    487  a256
    488  a256							; ---- Program Change --------------------------------------------------------
    489  a256							; Cc pn  <NOTE 2 bytes!>
    490  a256
    491  a256				   programchange
    492  a256							; Blank the unused MIDI byte
    493  a256		       a9 2d		      lda	#45	; -
    494  a258		       8d 53 1e 	      sta	midi_display+6
    495  a25b		       8d 54 1e 	      sta	midi_display+7
    496  a25e
    497  a25e							; Get low nybble and replace, since there are only 16 viznut waveforms
    498  a25e		       a5 fc		      lda	mididata0
    499  a260		       29 0f		      and	#$0f
    500  a262		       85 fc		      sta	mididata0	; Note that this is the waveform NUMBER, not the VALUE!
    501  a264
    502  a264		       a4 49		      ldy	channel	; Y now contains channel #
    503  a266		       99 00 11 	      sta	waveform1,y	; Store waveform used
    504  a269
    505  a269		       c0 00		      cpy	#00
    506  a26b		       f0 0d		      beq	pc_0
    507  a26d
    508  a26d		       c0 01		      cpy	#01
    509  a26f		       f0 18		      beq	pc_1
    510  a271
    511  a271		       c0 02		      cpy	#02
    512  a273		       f0 23		      beq	pc_2
    513  a275
    514  a275		       c0 03		      cpy	#03	; Not sure if viznut's waveforms applies to the noise voice,
    515  a277		       f0 2e		      beq	pc_3	; but keep it in away.
    516  a279
    517  a279							; Ignore all other channels
    518  a279		       60		      rts
    519  a27a
    520  a27a							; Update the screen with Program# (viznut waveform code)
    521  a27a							; Note that these are not actually used until setvoice is called below [1]
    522  a27a
    523  a27a				   pc_0
      0  a27a					      HEXPOKE	(voice_display+ 5),waveform1
      1  a27a		       a9 7c		      lda	#<(voice_display+ 5)
      2  a27c		       85 22		      sta	$22
      3  a27e		       a9 1e		      lda	#>(voice_display+ 5)
      4  a280		       85 23		      sta	$23
      5  a282
      6  a282		       ad 00 11 	      lda	waveform1
      7  a285		       20 65 a5 	      jsr	hexstr
    525  a288		       60		      rts
    526  a289
    527  a289				   pc_1
      0  a289					      HEXPOKE	(voice_display+27),waveform2
      1  a289		       a9 92		      lda	#<(voice_display+27)
      2  a28b		       85 22		      sta	$22
      3  a28d		       a9 1e		      lda	#>(voice_display+27)
      4  a28f		       85 23		      sta	$23
      5  a291
      6  a291		       ad 01 11 	      lda	waveform2
      7  a294		       20 65 a5 	      jsr	hexstr
    529  a297		       60		      rts
    530  a298
    531  a298				   pc_2
      0  a298					      HEXPOKE	(voice_display+49),waveform3
      1  a298		       a9 a8		      lda	#<(voice_display+49)
      2  a29a		       85 22		      sta	$22
      3  a29c		       a9 1e		      lda	#>(voice_display+49)
      4  a29e		       85 23		      sta	$23
      5  a2a0
      6  a2a0		       ad 02 11 	      lda	waveform3
      7  a2a3		       20 65 a5 	      jsr	hexstr
    533  a2a6		       60		      rts
    534  a2a7
    535  a2a7				   pc_3
      0  a2a7					      HEXPOKE	(voice_display+71),waveform4
      1  a2a7		       a9 be		      lda	#<(voice_display+71)
      2  a2a9		       85 22		      sta	$22
      3  a2ab		       a9 1e		      lda	#>(voice_display+71)
      4  a2ad		       85 23		      sta	$23
      5  a2af
      6  a2af		       ad 03 11 	      lda	waveform4
      7  a2b2		       20 65 a5 	      jsr	hexstr
    537  a2b5		       60		      rts
    538  a2b6
    539  a2b6
    540  a2b6							;---------------------------------------------------------
    541  a2b6							; Set a voice using viznut's setwave function.
    542  a2b6							; If a sound is already playing, fine.  But if not, need a "short" delay.  TODO ***
    543  a2b6
    544  a2b6				   viznut
    545  a2b6		       a5 49		      lda	channel	; Channel # (0-3)
    546  a2b8		       29 03		      and	#$03	; Just to be sure
    547  a2ba		       a8		      tay
    548  a2bb		       b9 e1 a4 	      lda	voice_to_register,y
    549  a2be		       a8		      tay		; Y now contains low byte of register 90xx
    550  a2bf		       aa		      tax
    551  a2c0
    552  a2c0		       bd 00 11 	      lda	waveform1,x	; Retrieve the last desired waveform#
    553  a2c3		       aa		      tax
    554  a2c4		       bd 98 a6 	      lda	viznutwaveforms,x	; A now contains the desired shift register contents
    555  a2c7
    556  a2c7		       a6 5e		      ldx	currentvalue	; X now contains initial frequency of selected channel
    557  a2c9
    558  a2c9							; X,Y,A are set - Set the waveform.
    559  a2c9		       20 00 10 	      jsr	setwave
    560  a2cc		       60		      rts
    561  a2cd
    562  a2cd
    563  a2cd							;***************************************************************************
    564  a2cd							;*******************  Set/Display Functions  *******************************
    565  a2cd							;***************************************************************************
    566  a2cd
    567  a2cd							; Dispatcher for setting the appropriate voice and updating the screen
    568  a2cd							; Channel# in Y (Channel 0 = Voice 1, etc)
    569  a2cd							; Value to set it to in A.
    570  a2cd
    571  a2cd				   setvoice
    572  a2cd		       85 5e		      sta	currentvalue
    573  a2cf
    574  a2cf							; Before setting the voice, check if a viznut waveform was selected previously [1]
    575  a2cf							; If so, handle that separately.
    576  a2cf		       b9 00 11 	      lda	waveform1,y
    577  a2d2		       d0 e2		      bne	viznut
    578  a2d4
    579  a2d4							; Nope, carry on.
    580  a2d4		       a5 5e		      lda	currentvalue
    581  a2d6
    582  a2d6		       c0 00		      cpy	#$00
    583  a2d8		       f0 0d		      beq	v1
    584  a2da
    585  a2da		       c0 01		      cpy	#$01
    586  a2dc		       f0 1b		      beq	v2
    587  a2de
    588  a2de		       c0 02		      cpy	#$02
    589  a2e0		       f0 29		      beq	v3
    590  a2e2
    591  a2e2		       c0 03		      cpy	#$03
    592  a2e4		       f0 37		      beq	v4
    593  a2e6
    594  a2e6							; Ignore all other channels
    595  a2e6		       60		      rts
    596  a2e7
    597  a2e7							; ---- Voice 1 -------
    598  a2e7				   v1
    599  a2e7		       8d 0a 90 	      sta	sound_voice1
      0  a2ea					      HEXPOKE	(voice_display+00),sound_voice1
      1  a2ea		       a9 77		      lda	#<(voice_display+00)
      2  a2ec		       85 22		      sta	$22
      3  a2ee		       a9 1e		      lda	#>(voice_display+00)
      4  a2f0		       85 23		      sta	$23
      5  a2f2
      6  a2f2		       ad 0a 90 	      lda	sound_voice1
      7  a2f5		       20 65 a5 	      jsr	hexstr
    601  a2f8		       60		      rts
    602  a2f9
    603  a2f9							; ---- Voice 2 -------
    604  a2f9				   v2
    605  a2f9		       8d 0b 90 	      sta	sound_voice2
      0  a2fc					      HEXPOKE	(voice_display+22),sound_voice2
      1  a2fc		       a9 8d		      lda	#<(voice_display+22)
      2  a2fe		       85 22		      sta	$22
      3  a300		       a9 1e		      lda	#>(voice_display+22)
      4  a302		       85 23		      sta	$23
      5  a304
      6  a304		       ad 0b 90 	      lda	sound_voice2
      7  a307		       20 65 a5 	      jsr	hexstr
    607  a30a		       60		      rts
    608  a30b
    609  a30b							; ---- Voice 3 -------
    610  a30b				   v3
    611  a30b		       8d 0c 90 	      sta	sound_voice3
      0  a30e					      HEXPOKE	(voice_display+44),sound_voice3
      1  a30e		       a9 a3		      lda	#<(voice_display+44)
      2  a310		       85 22		      sta	$22
      3  a312		       a9 1e		      lda	#>(voice_display+44)
      4  a314		       85 23		      sta	$23
      5  a316
      6  a316		       ad 0c 90 	      lda	sound_voice3
      7  a319		       20 65 a5 	      jsr	hexstr
    613  a31c		       60		      rts
    614  a31d
    615  a31d							; ---- Voice 4 -------
    616  a31d				   v4
    617  a31d		       8d 0d 90 	      sta	sound_noise
      0  a320					      HEXPOKE	(voice_display+66),sound_noise
      1  a320		       a9 b9		      lda	#<(voice_display+66)
      2  a322		       85 22		      sta	$22
      3  a324		       a9 1e		      lda	#>(voice_display+66)
      4  a326		       85 23		      sta	$23
      5  a328
      6  a328		       ad 0d 90 	      lda	sound_noise
      7  a32b		       20 65 a5 	      jsr	hexstr
    619  a32e		       60		      rts
    620  a32f
    621  a32f							; ----------------------------------------------------------------------------
    622  a32f
    623  a32f				   setcolors
    624  a32f		       a2 00		      ldx	#$00
    625  a331		       a9 00		      lda	#$00
    626  a333				   setcolorsloop
    627  a333		       9d 00 96 	      sta	$9600,x
    628  a336		       9d 00 97 	      sta	$9700,x
    629  a339		       e8		      inx
    630  a33a		       e0 00		      cpx	#$00
    631  a33c		       d0 f5		      bne	setcolorsloop
    632  a33e		       60		      rts
    633  a33f
    634  a33f							; ----------------------------------------------------------------------------
    635  a33f							; Draw Main Screen
    636  a33f
    637  a33f				   mainscreen
    638  a33f		       20 5f e5 	      jsr	CLRSCREEN
    639  a342		       a9 06		      lda	#$06	; Blue
    640  a344		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a347					      PRINTSTRING	maintext
      1  a347		       a0 a3		      ldy	#>maintext
      2  a349		       a9 75		      lda	#<maintext
      3  a34b		       20 1e cb 	      jsr	STROUT
    642  a34e
    643  a34e		       a9 6c		      lda	#$6C
    644  a350		       8d f9 1f 	      sta	spin_display
    645  a353		       60		      rts
    646  a354
    647  a354
    648  a354							; ----------------------------------------------------------------------------
    649  a354							; Draw Credits Screen
    650  a354
    651  a354				   creditscreen
    652  a354		       20 5f e5 	      jsr	CLRSCREEN
    653  a357		       a9 1f		      lda	#31	; Decimal, white and yellow
    654  a359		       8d 0f 90 	      sta	screen_colors
    655  a35c		       a9 02		      lda	#$02	; Red
    656  a35e		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a361					      PRINTSTRING	credits
      1  a361		       a0 a4		      ldy	#>credits
      2  a363		       a9 10		      lda	#<credits
      3  a365		       20 1e cb 	      jsr	STROUT
    658  a368		       60		      rts
    659  a369
    660  a369
    661  a369							; ----------------------------------------------------------------------------
    662  a369							; setwave needs to start on a page and is self-modifying,
    663  a369							; so it is copied to RAM here
    664  a369
    665  a369				   setwavecopy
    666  a369		       a2 00		      ldx	#$00
    667  a36b				   copyloop
    668  a36b		       bd 6b a6 	      lda	setwaveorg,x
    669  a36e		       9d 00 10 	      sta	setwave,x
    670  a371		       e8		      inx
    671  a372		       d0 f7		      bne	copyloop
    672  a374		       60		      rts
    673  a375
    674  a375
    675  a375							; ----------------------------------------------------------------------------
    676  a375							; Strings
    677  a375
    678  a375				   maintext
    679  a375		       0e 08		      byte.b	CG_LCS, CG_DCS
    680  a377		       2a 76 69 63*	      byte.b	"*vic20 midi iNTERFACE*", CRLF
    681  a38e		       0d		      byte.b	CRLF
    682  a38f		       6d 69 64 69*	      byte.b	"midi dATA: --:--:--", CRLF
    683  a3a3		       0d		      byte.b	CRLF
    684  a3a4		       76 4f 49 43*	      byte.b	"vOICE 1: -- / --", CRLF
    685  a3b5		       76 4f 49 43*	      byte.b	"vOICE 2: -- / --", CRLF
    686  a3c6		       76 4f 49 43*	      byte.b	"vOICE 3: -- / --", CRLF
    687  a3d7		       76 4f 49 43*	      byte.b	"vOICE 4: -- / --", CRLF
    688  a3e8		       0d		      byte.b	CRLF
    689  a3e9		       76 4f 4c 55*	      byte.b	"vOLUME : --", CRLF
    690  a3f5		       62 41 4e 4b*	      byte.b	"bANK	 : --", CRLF
    691  a401		       0d		      byte.b	CRLF
    692  a402		       73 59 53 54*	      byte.b	"sYSTEM : ???", CRLF
    693  a40f		       00		      byte.b	0
    694  a410
    695  a410
    696  a410				   credits
    697  a410		       0e 08		      byte.b	CG_LCS, CG_DCS
    698  a412		       20 2a 76 69*	      byte.b	" *vic20 midi cREDITS*", CRLF
    699  a428		       0d		      byte.b	CRLF
    700  a429		       68 41 52 44*	      byte.b	"hARDWARE:", CRLF
    701  a433		       0d		      byte.b	CRLF
    702  a434		       20 20 6a 49*	      byte.b	"  jIM bRAIN", CRLF
    703  a440		       20 20 66 52*	      byte.b	"  fRANCOIS lEVEILLE", CRLF
    704  a454		       20 20 6c 64*	      byte.b	"  ld bALL", CRLF
    705  a45e		       0d		      byte.b	CRLF
    706  a45f		       73 4f 46 54*	      byte.b	"sOFTWARE:", CRLF
    707  a469		       0d		      byte.b	CRLF
    708  a46a		       20 6c 45 49*	      byte.b	" lEIF bLOOMQUIST", CRLF
    709  a47b		       20 64 41 56*	      byte.b	" dAVID vIENS", CRLF
    710  a488		       20 6d 49 43*	      byte.b	" mICHAEL kIRCHER", CRLF
    711  a499		       20 76 49 5a*	      byte.b	" vIZNUT", CRLF
    712  a4a1		       0d		      byte.b	CRLF
    713  a4a2		       74 48 41 4e*	      byte.b	"tHANKS TO EVERYONE", CRLF
    714  a4b5		       4f 4e 20 54*	      byte.b	"ON THE vic20 dENIAL", CRLF
    715  a4c9		       46 4f 52 55*	      byte.b	"FORUMS!", CRLF
    716  a4d1		       00		      byte.b	0
    717  a4d2
    718  a4d2				   palstring
    719  a4d2		       70 61 6c 20*	      .byte.b	"pal ",0
    720  a4d7
    721  a4d7				   ntscstring
    722  a4d7		       6e 74 73 63*	      .byte.b	"ntsc",0
    723  a4dc
    724  a4dc				   altstring
    725  a4dc		       61 6c 74 20*	      .byte.b	"alt ",0
    726  a4e1
    727  a4e1							; ----------------------------------------------------------------------------
    728  a4e1							; Lookup table between voice #(0-3) and low byte of register# ($0A-$0D)
    729  a4e1
    730  a4e1				   voice_to_register
    731  a4e1		       0a 0b 0c 0d	      byte.b	$0A,$0B,$0C,$0D
    732  a4e5
    733  a4e5
    734  a4e5							; ----------------------------------------------------------------------------
    735  a4e5							; Code includes
    736  a4e5
------- FILE hardware.asm LEVEL 2 PASS 2
      0  a4e5					      include	"hardware.asm"
      1  a4e5							;***************************************************************************
      2  a4e5							;*******************	 Hardware Functions   *******************************
      3  a4e5							;***************************************************************************
      4  a4e5
      5  a4e5							; ----------------------------------------------------------------------------
      6  a4e5							; Confirm the presence of the ST16C450 UART
      7  a4e5				   checkuart
      8  a4e5		       a9 55		      lda	#$55
      9  a4e7		       8d 07 9c 	      sta	UART_SCRATCHPAD
     10  a4ea
     11  a4ea		       ad 07 9c 	      lda	UART_SCRATCHPAD
     12  a4ed		       c9 55		      cmp	#$55
     13  a4ef		       f0 1c		      beq	checkuart_ok
     14  a4f1
     15  a4f1							; Not found!
      0  a4f1					      PLOT	0,20
      1  a4f1		       a0 00		      ldy	#0
      2  a4f3		       a2 14		      ldx	#20
      3  a4f5		       18		      clc
      4  a4f6		       20 0a e5 	      jsr	$E50A
      0  a4f9					      PRINTSTRING	nouart
      1  a4f9		       a0 a5		      ldy	#>nouart
      2  a4fb		       a9 50		      lda	#<nouart
      3  a4fd		       20 1e cb 	      jsr	STROUT
     18  a500
     19  a500				   uloop
     20  a500		       a9 18		      lda	#24
     21  a502		       8d 0f 90 	      sta	screen_colors
     22  a505		       a9 1a		      lda	#26
     23  a507		       8d 0f 90 	      sta	screen_colors
     24  a50a		       4c 00 a5 	      jmp	uloop
     25  a50d
     26  a50d				   checkuart_ok
     27  a50d		       60		      rts
     28  a50e
     29  a50e							; ----------------------------------------------------------------------------
     30  a50e							; Set up the UART
     31  a50e
     32  a50e				   resetuart
     33  a50e							; Expose the divisor latch.
     34  a50e		       a9 80		      lda	#%10000000
     35  a510		       8d 03 9c 	      sta	UART_LCR
     36  a513
     37  a513							; Set the MIDI baud rate.
     38  a513							; The ST16C450 datasheet says that it divides the input clock rate by
     39  a513							; 16, so with a 2Mhz crystal on board, that gives
     40  a513							; 2000000 * (1/16) * (1/x) = 31250.  Solving gives x=4 for the low
     41  a513							; byte of the divisor, and 0 for the high byte.
     42  a513
     43  a513		       a2 00		      ldx	#$00
     44  a515		       a0 04		      ldy	#$04
     45  a517		       8e 01 9c 	      stx	UART_DIVISOR_MSB
     46  a51a		       8c 00 9c 	      sty	UART_DIVISOR_LSB
     47  a51d
     48  a51d							; Set to MIDI: Word length 8, Stop bits 1, no parity (also hides divisor latch)
     49  a51d		       a9 03		      lda	#%00000011
     50  a51f		       8d 03 9c 	      sta	UART_LCR
     51  a522
     52  a522							; Enable the interrupt when data is received
     53  a522		       a9 01		      lda	#%00000001
     54  a524		       8d 01 9c 	      sta	UART_IER
     55  a527		       60		      rts
     56  a528
     57  a528							; ----------------------------------------------------------------------------
     58  a528							; Set up the IRQ for reading bytes from the UART
     59  a528
     60  a528				   setupirq
     61  a528		       78		      sei
     62  a529
     63  a529							; Point to my interrupt vector
     64  a529		       a9 3d		      lda	#<theirq
     65  a52b		       8d 14 03 	      sta	$0314
     66  a52e		       a9 a5		      lda	#>theirq
     67  a530		       8d 15 03 	      sta	$0315
     68  a533
     69  a533							; Disable timer interrupts
     70  a533
     71  a533		       a9 60		      lda	#%01100000
     72  a535		       8d 2e 91 	      sta	$912e	; disable and acknowledge interrupts
     73  a538		       8d 2d 91 	      sta	$912d
     74  a53b							;sta $911e	; disable NMIs (Restore key)
     75  a53b
     76  a53b		       58		      cli
     77  a53c		       60		      rts
     78  a53d
     79  a53d							; ----------------------------------------------------------------------------
     80  a53d							; The IRQ.
     81  a53d
     82  a53d				   theirq
     83  a53d							; Fetch the received byte
     84  a53d		       ad 00 9c 	      lda	UART_RXTX	;get data
     85  a540		       a4 5c		      ldy	write_pointer
     86  a542		       99 00 12 	      sta	buffer,y
     87  a545		       e6 5c		      inc	write_pointer
     88  a547
     89  a547							; Clear the interrupt from the UART by reading the status register
     90  a547		       ad 02 9c 	      lda	UART_ISR
     91  a54a
     92  a54a		       4c 56 ff 	      jmp	$ff56	; Use this in place of rti because it restores the A,X,Y registers from the stack
     93  a54d							;jmp $eabf	; return to normal IRQ	(scans keyboard and stuff)
     94  a54d
     95  a54d
     96  a54d							; ----------------------------------------------------------------------------
     97  a54d							; Handle the RESTORE key
     98  a54d
     99  a54d				   RESTORE
    100  a54d		       4c c7 fe 	      jmp	$fec7	; Continue as if no cartridge installed
    101  a550
    102  a550
    103  a550							; ----------------------------------------------------------------------------
    104  a550							; Strings
    105  a550
    106  a550				   nouart
    107  a550		       2a 2a 20 75*	      .byte.b	"** uart NOT FOUND! **"
    108  a565
    109  a565							; EOF!
------- FILE vicmidi.asm
------- FILE utils.asm LEVEL 2 PASS 2
      0  a565					      include	"utils.asm"
      1  a565							; VIC Version by Schema/AIC (Leif Bloomquist)
      2  a565							; Original by Six/Style (Oliver VieBrooks)
      3  a565
      4  a565							; Fast POKE of hex value to screen
      5  a565							; also see HEXPOKE macro
      6  a565							; print hex  char $ of number in a at location referenced by screen_temp
      7  a565
      8  a565				   hexstr
      9  a565		       a0 00		      ldy	#$00
     10  a567		       48		      pha
     11  a568		       29 f0		      and	#$f0
     12  a56a		       18		      clc
     13  a56b		       4a		      lsr
     14  a56c		       4a		      lsr
     15  a56d		       4a		      lsr
     16  a56e		       4a		      lsr
     17  a56f		       aa		      tax
     18  a570		       bd a1 a5 	      lda	hexstring,x
     19  a573		       91 22		      sta	($22),y
     20  a575
     21  a575		       c8		      iny
     22  a576		       68		      pla
     23  a577		       29 0f		      and	#$0f
     24  a579		       aa		      tax
     25  a57a		       bd a1 a5 	      lda	hexstring,x
     26  a57d		       91 22		      sta	($22),y
     27  a57f		       60		      rts
     28  a580
     29  a580
     30  a580							; print hex  char $ of number in a    SLOW!
     31  a580		       00	   hexx       dc.b	$00
     32  a581
     33  a581				   printhexstr
     34  a581		       8e 80 a5 	      stx	hexx
     35  a584		       48		      pha
     36  a585		       29 f0		      and	#$f0
     37  a587		       18		      clc
     38  a588		       4a		      lsr
     39  a589		       4a		      lsr
     40  a58a		       4a		      lsr
     41  a58b		       4a		      lsr
     42  a58c		       aa		      tax
     43  a58d		       bd a1 a5 	      lda	hexstring,x
     44  a590		       20 d2 ff 	      jsr	$ffd2
     45  a593
     46  a593		       68		      pla
     47  a594		       29 0f		      and	#$0f
     48  a596		       aa		      tax
     49  a597		       bd a1 a5 	      lda	hexstring,x
     50  a59a		       20 d2 ff 	      jsr	$ffd2
     51  a59d		       ae 80 a5 	      ldx	hexx
     52  a5a0		       60		      rts
     53  a5a1
     54  a5a1				   hexstring
     55  a5a1		       30 31 32 33*	      .byte.b	"0123456789ABCDEF"
     56  a5b1
     57  a5b1
     58  a5b1							; ==============================================================
     59  a5b1							; Most defaults are NTSC.  This code overrides for PAL.
     60  a5b1							; ==============================================================
     61  a5b1
     62  a5b1				   setup_pal
     63  a5b1		       ad e4 ed 	      lda	$EDE4
     64  a5b4		       c9 0c		      cmp	#$0C
     65  a5b6		       f0 07		      beq	DOPAL
     66  a5b8
     67  a5b8							; NTSC System detected
     68  a5b8		       a9 00		      lda	#$00
     69  a5ba		       85 4a		      sta	bank
     70  a5bc		       4c df a1 	      jmp	showbank	; There's an rts there
     71  a5bf
     72  a5bf							; PAL System detected
     73  a5bf				   DOPAL
     74  a5bf		       a9 01		      lda	#$01
     75  a5c1		       85 4a		      sta	bank
     76  a5c3		       4c df a1 	      jmp	showbank	; There's an rts there
     77  a5c6
     78  a5c6							; EOF!
------- FILE vicmidi.asm
------- FILE polymode.asm LEVEL 2 PASS 2
      0  a5c6					      include	"polymode.asm"
      1  a5c6
      2  a5c6							;***************************************************************************
      3  a5c6							;***************  Determine next Channel in Poly Mode (set Y) **************
      4  a5c6							;***************************************************************************
      5  a5c6				   get_poly_voice
      6  a5c6		       a0 00		      ldy	#$00
      7  a5c8
      8  a5c8				   get_poly_voice_loop
      9  a5c8		       b9 61 00 	      lda	poly_flags,y	; 0=not in use, 1=in use
     10  a5cb		       f0 08		      beq	get_poly_voice_x
     11  a5cd		       c8		      iny
     12  a5ce		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     13  a5d0		       d0 f6		      bne	get_poly_voice_loop
     14  a5d2
     15  a5d2							; No free voices, ignore
     16  a5d2		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note On code
     17  a5d4		       60		      rts
     18  a5d5
     19  a5d5				   get_poly_voice_x
     20  a5d5		       a9 01		      lda	#$01
     21  a5d7		       99 61 00 	      sta	poly_flags,y
     22  a5da		       60		      rts
     23  a5db
     24  a5db
     25  a5db							;***************************************************************************
     26  a5db							;********  Determine Channel to turn off in Poly Mode (set Y) **************
     27  a5db							;***************************************************************************
     28  a5db				   get_poly_voice_off
     29  a5db
     30  a5db		       a0 00		      ldy	#$00
     31  a5dd
     32  a5dd				   get_poly_voice_off_loop
     33  a5dd		       b9 61 00 	      lda	poly_flags,y	; Is the channel in use?
     34  a5e0		       f0 07		      beq	poly_next	; No, so skip it
     35  a5e2
     36  a5e2		       b9 69 00 	      lda	lastnote,y	; Get last note on this voice
     37  a5e5		       c5 fc		      cmp	mididata0	; Compare to note received
     38  a5e7		       f0 0b		      beq	get_poly_voice_off_x	; Matched!
     39  a5e9
     40  a5e9				   poly_next
     41  a5e9		       c8		      iny		; Next channel
     42  a5ea		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     43  a5ec		       d0 ef		      bne	get_poly_voice_off_loop
     44  a5ee
     45  a5ee							; No match to the note to turn off, ignore
     46  a5ee		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note Off code
     47  a5f0		       ee 0f 90 	      inc	screen_colors	; DEBUG
     48  a5f3		       60		      rts
     49  a5f4
     50  a5f4				   get_poly_voice_off_x
     51  a5f4		       a9 00		      lda	#$00
     52  a5f6		       99 61 00 	      sta	poly_flags,y
     53  a5f9		       60		      rts
     54  a5fa
------- FILE vicmidi.asm
------- FILE keyboard.asm LEVEL 2 PASS 2
      0  a5fa					      include	"keyboard.asm"
      1  a5fa							;*******************************************************************************************
      2  a5fa							;********************************  keyboard stuff  *****************************************
      3  a5fa							;*******************************************************************************************
      4  a5fa
      5  a5fa							; --------------------------------------------------------------------------------------------------
      6  a5fa							;;;;;;;;;;;;;;; keyboard stuff
      7  a5fa							;previous keyboard column bits
      8  a5fa		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
      9  a5fa		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     10  a5fa		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     11  a5fa		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     12  a5fa
     13  a5fa		       91 20	   kb_column  =	$9120
     14  a5fa		       91 21	   kb_row     =	$9121
     15  a5fa
     16  a5fa							; 9121   9120: (Write column value to this address)
     17  a5fa							;
     18  a5fa							;	  7f	  bf	  df	  ef	  f7	  fb	  fd	  fe
     19  a5fa							;
     20  a5fa							;  fe	  2	  q	  CBM	  Space   RunStop Control Lft_arr 1
     21  a5fa							;  fd	  4	  e	  s	  z	  Shift_L a	  w	  3
     22  a5fa							;  fb	  6	  t	  f	  c	  x	  d	  r	  5
     23  a5fa							;  f7	  8	  u	  h	  b	  v	  g	  y	  7
     24  a5fa							;  ef	  0	  o	  k	  m	  n	  j	  i	  9
     25  a5fa							;  df	  -	  @	  :	  .	  ,	  l	  p	  +
     26  a5fa							;  bf	  Home	  Up_arr  =	  Shift_R /	  ;	  *	  GBP
     27  a5fa							;  7f	  F7	  F5	  F3	  F1	  Down	  Right   Return  Del
     28  a5fa
     29  a5fa				   GetKey
     30  a5fa		       78		      sei
     31  a5fb							; this should not be done, we want to compare the OLD recorded status with new one
     32  a5fb							;lda #$0
     33  a5fb							;sta kb_column
     34  a5fb							;lda kb_row
     35  a5fb							;cmp #$FF
     36  a5fb							;beq NoKey	 ; no key at all pressed
     37  a5fb
     38  a5fb				   Check7F
     39  a5fb							;now check for each column
     40  a5fb		       a9 7f		      lda	#$7F
     41  a5fd		       8d 20 91 	      sta	kb_column
     42  a600		       ad 21 91 	      lda	kb_row
     43  a603		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     44  a605		       c5 4e		      cmp	c0
     45  a607		       f0 08		      beq	CheckBF	; these arent the droids you are looking for move along
     46  a609		       85 4e		      sta	c0
     47  a60b		       8d 00 1e 	      sta	$1E00
     48  a60e		       4c 50 a6 	      jmp	KeyDone
     49  a611				   CheckBF
     50  a611							;now check for each column
     51  a611		       a9 bf		      lda	#$BF
     52  a613		       8d 20 91 	      sta	kb_column
     53  a616		       ad 21 91 	      lda	kb_row
     54  a619		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     55  a61b		       c5 4f		      cmp	c1
     56  a61d		       f0 08		      beq	CheckFD	; these arent the droids you are looking for move along
     57  a61f		       85 4f		      sta	c1
     58  a621		       8d 01 1e 	      sta	$1E01
     59  a624		       4c 50 a6 	      jmp	KeyDone
     60  a627				   CheckFD
     61  a627							;now check for each column
     62  a627		       a9 fd		      lda	#$FD
     63  a629		       8d 20 91 	      sta	kb_column
     64  a62c		       ad 21 91 	      lda	kb_row
     65  a62f		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     66  a631		       c5 50		      cmp	c2
     67  a633		       f0 08		      beq	CheckFE	; these arent the droids you are looking for move along
     68  a635		       85 50		      sta	c2
     69  a637		       8d 02 1e 	      sta	$1E02
     70  a63a		       4c 50 a6 	      jmp	KeyDone
     71  a63d				   CheckFE
     72  a63d							;now check for each column
     73  a63d		       a9 fe		      lda	#$FE
     74  a63f		       8d 20 91 	      sta	kb_column
     75  a642		       ad 21 91 	      lda	kb_row
     76  a645		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     77  a647		       c5 51		      cmp	c3
     78  a649		       f0 05		      beq	KeyDone	; these arent the droids you are looking for move along
     79  a64b		       85 51		      sta	c3
     80  a64d		       8d 03 1e 	      sta	$1E03
     81  a650				   KeyDone
     82  a650		       58		      cli
     83  a651		       60		      rts
     84  a652
     85  a652							; ---------------------------------------------------------------------------
     86  a652
     87  a652				   setchars
     88  a652		       a2 00		      ldx	#$00
     89  a654		       a9 51		      lda	#$51
     90  a656				   setcharsloop1
     91  a656		       9d 00 1e 	      sta	$1E00,x
     92  a659		       e8		      inx
     93  a65a		       e0 00		      cpx	#$00
     94  a65c		       d0 f8		      bne	setcharsloop1
     95  a65e		       a2 00		      ldx	#$00
     96  a660		       a9 66		      lda	#$66
     97  a662				   setcharsloop2
     98  a662		       9d 00 1f 	      sta	$1F00,x
     99  a665		       e8		      inx
    100  a666		       e0 00		      cpx	#$00
    101  a668		       d0 f8		      bne	setcharsloop2
    102  a66a		       60		      rts
------- FILE vicmidi.asm
    741  a66b				   setwaveorg
------- FILE setwave.asm LEVEL 2 PASS 2
      0  a66b					      include	"setwave.asm"
      1  a66b							;A short generic routine for setting any shift register value for any pulse
      2  a66b							;channel in about 150 cpu clocks. Use it freely.
      3  a66b
      4  a66b							; USAGE: y = channel ($0a..$0c)
      5  a66b							;	  x = initial frequency
      6  a66b							;	  a = shift register contents
      7  a66b							;
      8  a66b							; WARNING for purists: self-modifying code, illegal opcodes.
      9  a66b							;
     10  a66b							; code align assertion: make sure that the loop is within a page.
     11  a66b							; oscillator assertion: make sure that the channel has been at $7e
     12  a66b							; for some time before calling this function.
     13  a66b							; put TMP and TMP2 in the zero page.
     14  a66b
     15  a66b		       8e 8d a6 	      stx	initfreq	; 4
     16  a66e
     17  a66e		       8c 7c a6 	      sty	ch0	; 4
     18  a671		       8c 87 a6 	      sty	ch1	; 4
     19  a674		       be 8b a6 	      ldx	ldfqmasks-$a,y	; 4
     20  a677		       85 57		      sta	TMP	; 3
     21  a679
     22  a679		       09 7f		      ora	#$7f	; 2
     23  a67b
     24  a67b		       8f 0c 90 	      .byte.b	$8f,$0C,$90	; axs $900c  ; 4  [$900c] = a AND x	     *ILLEGAL OPCODE*
     25  a67e
     26  a67e		       a6 7c	   ch0	      =	*-2
     27  a67e		       84 58		      sty	TMP2	; 3
     28  a680		       a0 07		      ldy	#7	; 2
     29  a682
     30  a682				   l0
     31  a682		       a9 7f		      lda	#$7f	; 2
     32  a684		       07 57		      .byte.b	$07,TMP	; aso TMP		 ; 5  asl tmp; a = [tmp] OR $7f  *ILLEGAL OPCODE*
     33  a686		       8f 0c 90 	      .byte.b	$8F,$0C,$90	; axs $900c	 ; 4  [$900c] = a AND x	  *ILLEGAL OPCODE*
     34  a686		       a6 87	   ch1	      =	*-2
     35  a689		       88		      dey		; 2
     36  a68a		       d0 f6		      bne	l0	; 3
     37  a68c
     38  a68c		       a9 80		      lda	#128	; 2
     39  a68c		       a6 8d	   initfreq   =	*-1
     40  a68e		       ea		      nop		; 2
     41  a68f		       a4 58		      ldy	TMP2	; 3
     42  a691				   noset
     43  a691		       99 00 90 	      sta	$9000,y	; 5
     44  a694
     45  a694		       60		      rts		; 6	total clocks 11+4+3+2+16*7+16+6 eq 154
     46  a695
     47  a695				   ldfqmasks
     48  a695		       fe		      .byte.b	$fe	; $900a - 1 x 16 clocks/bit
     49  a696		       fd		      .byte.b	$fd	; $900b - 2 x	8 clocks/bit
     50  a697		       fb		      .byte.b	$fb	; $900c - 4 x	4 clocks/bit
     51  a698
     52  a698
     53  a698				   viznutwaveforms
     54  a698		       00		      .byte.b	0	; MIDI Program #1	default  0000000011111111
     55  a699		       02		      .byte.b	2	; MIDI Program #2	"10"	 0000001011111101
     56  a69a		       04		      .byte.b	4	; MIDI Program #3	"100"	 0000010011111011
     57  a69b		       06		      .byte.b	6	; MIDI Program #4	"110"	 0000011011111001
     58  a69c		       08		      .byte.b	8	; MIDI Program #5	"1000"	 0000100011110111
     59  a69d		       0a		      .byte.b	10	; MIDI Program #6	"1010"	 0000101011110101
     60  a69e		       0b		      .byte.b	11	; MIDI Program #7	"1011"	 0000110011110011
     61  a69f		       0e		      .byte.b	14	; MIDI Program #8	"1110"	 0000111011110001
     62  a6a0		       12		      .byte.b	18	; MIDI Program #9	"10010"  0001001011101101
     63  a6a1		       14		      .byte.b	20	; MIDI Program #10	"10100"  0001010011101011
     64  a6a2		       16		      .byte.b	22	; MIDI Program #11	"10110"  0001011011101001
     65  a6a3		       18		      .byte.b	24	; MIDI Program #12	"11000"  0001100011100111
     66  a6a4		       1a		      .byte.b	26	; MIDI Program #13	"11010"  0001101011100101
     67  a6a5		       24		      .byte.b	36	; MIDI Program #14	"100100" 0010010011011011
     68  a6a6		       2a		      .byte.b	42	; MIDI Program #15	"101010" 0010101011010101
     69  a6a7		       2c		      .byte.b	44	; MIDI Program #16	"101100" 0010110011010011
------- FILE vicmidi.asm
    743  a6a8
------- FILE lookup-ntsc.asm LEVEL 2 PASS 2
      0  a6a8					      include	"lookup-ntsc.asm"
      1  a6a8							; --------------------------------------------------------------------------------------------------
      2  a6a8							; Note Lookups NTSC - 128 bytes each, map MIDI Note# to a VIC register value
      3  a6a8							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a6a8
      5  a6a8				   voice1lookup_ntsc
      6  a6a8		       00		      byte.b	0
      7  a6a9		       00		      byte.b	0
      8  a6aa		       00		      byte.b	0
      9  a6ab		       00		      byte.b	0
     10  a6ac		       00		      byte.b	0
     11  a6ad		       00		      byte.b	0
     12  a6ae		       00		      byte.b	0
     13  a6af		       00		      byte.b	0
     14  a6b0		       00		      byte.b	0
     15  a6b1		       00		      byte.b	0
     16  a6b2		       00		      byte.b	0
     17  a6b3		       00		      byte.b	0
     18  a6b4		       00		      byte.b	0
     19  a6b5		       00		      byte.b	0
     20  a6b6		       00		      byte.b	0
     21  a6b7		       00		      byte.b	0
     22  a6b8		       00		      byte.b	0
     23  a6b9		       00		      byte.b	0
     24  a6ba		       00		      byte.b	0
     25  a6bb		       00		      byte.b	0
     26  a6bc		       00		      byte.b	0
     27  a6bd		       00		      byte.b	0
     28  a6be		       00		      byte.b	0
     29  a6bf		       00		      byte.b	0
     30  a6c0		       85		      byte.b	133
     31  a6c1		       8c		      byte.b	140
     32  a6c2		       92		      byte.b	146
     33  a6c3		       98		      byte.b	152
     34  a6c4		       9e		      byte.b	158
     35  a6c5		       a3		      byte.b	163
     36  a6c6		       a9		      byte.b	169
     37  a6c7		       ad		      byte.b	173
     38  a6c8		       b2		      byte.b	178
     39  a6c9		       b6		      byte.b	182
     40  a6ca		       ba		      byte.b	186
     41  a6cb		       be		      byte.b	190
     42  a6cc		       c2		      byte.b	194
     43  a6cd		       c5		      byte.b	197
     44  a6ce		       c9		      byte.b	201
     45  a6cf		       cc		      byte.b	204
     46  a6d0		       cf		      byte.b	207
     47  a6d1		       d1		      byte.b	209
     48  a6d2		       d4		      byte.b	212
     49  a6d3		       d6		      byte.b	214
     50  a6d4		       d9		      byte.b	217
     51  a6d5		       db		      byte.b	219
     52  a6d6		       dd		      byte.b	221
     53  a6d7		       df		      byte.b	223
     54  a6d8		       e0		      byte.b	224
     55  a6d9		       e2		      byte.b	226
     56  a6da		       e4		      byte.b	228
     57  a6db		       e5		      byte.b	229
     58  a6dc		       e7		      byte.b	231
     59  a6dd		       e8		      byte.b	232
     60  a6de		       e9		      byte.b	233
     61  a6df		       eb		      byte.b	235
     62  a6e0		       ec		      byte.b	236
     63  a6e1		       ed		      byte.b	237
     64  a6e2		       ee		      byte.b	238
     65  a6e3		       ef		      byte.b	239
     66  a6e4		       f0		      byte.b	240
     67  a6e5		       00		      byte.b	0
     68  a6e6		       00		      byte.b	0
     69  a6e7		       00		      byte.b	0
     70  a6e8		       00		      byte.b	0
     71  a6e9		       00		      byte.b	0
     72  a6ea		       00		      byte.b	0
     73  a6eb		       00		      byte.b	0
     74  a6ec		       00		      byte.b	0
     75  a6ed		       00		      byte.b	0
     76  a6ee		       00		      byte.b	0
     77  a6ef		       00		      byte.b	0
     78  a6f0		       00		      byte.b	0
     79  a6f1		       00		      byte.b	0
     80  a6f2		       00		      byte.b	0
     81  a6f3		       00		      byte.b	0
     82  a6f4		       00		      byte.b	0
     83  a6f5		       00		      byte.b	0
     84  a6f6		       00		      byte.b	0
     85  a6f7		       00		      byte.b	0
     86  a6f8		       00		      byte.b	0
     87  a6f9		       00		      byte.b	0
     88  a6fa		       00		      byte.b	0
     89  a6fb		       00		      byte.b	0
     90  a6fc		       00		      byte.b	0
     91  a6fd		       00		      byte.b	0
     92  a6fe		       00		      byte.b	0
     93  a6ff		       00		      byte.b	0
     94  a700		       00		      byte.b	0
     95  a701		       00		      byte.b	0
     96  a702		       00		      byte.b	0
     97  a703		       00		      byte.b	0
     98  a704		       00		      byte.b	0
     99  a705		       00		      byte.b	0
    100  a706		       00		      byte.b	0
    101  a707		       00		      byte.b	0
    102  a708		       00		      byte.b	0
    103  a709		       00		      byte.b	0
    104  a70a		       00		      byte.b	0
    105  a70b		       00		      byte.b	0
    106  a70c		       00		      byte.b	0
    107  a70d		       00		      byte.b	0
    108  a70e		       00		      byte.b	0
    109  a70f		       00		      byte.b	0
    110  a710		       00		      byte.b	0
    111  a711		       00		      byte.b	0
    112  a712		       00		      byte.b	0
    113  a713		       00		      byte.b	0
    114  a714		       00		      byte.b	0
    115  a715		       00		      byte.b	0
    116  a716		       00		      byte.b	0
    117  a717		       00		      byte.b	0
    118  a718		       00		      byte.b	0
    119  a719		       00		      byte.b	0
    120  a71a		       00		      byte.b	0
    121  a71b		       00		      byte.b	0
    122  a71c		       00		      byte.b	0
    123  a71d		       00		      byte.b	0
    124  a71e		       00		      byte.b	0
    125  a71f		       00		      byte.b	0
    126  a720		       00		      byte.b	0
    127  a721		       00		      byte.b	0
    128  a722		       00		      byte.b	0
    129  a723		       00		      byte.b	0
    130  a724		       00		      byte.b	0
    131  a725		       00		      byte.b	0
    132  a726		       00		      byte.b	0
    133  a727		       00		      byte.b	0
    134  a728
    135  a728				   voice2lookup_ntsc
    136  a728		       00		      byte.b	0
    137  a729		       00		      byte.b	0
    138  a72a		       00		      byte.b	0
    139  a72b		       00		      byte.b	0
    140  a72c		       00		      byte.b	0
    141  a72d		       00		      byte.b	0
    142  a72e		       00		      byte.b	0
    143  a72f		       00		      byte.b	0
    144  a730		       00		      byte.b	0
    145  a731		       00		      byte.b	0
    146  a732		       00		      byte.b	0
    147  a733		       00		      byte.b	0
    148  a734		       00		      byte.b	0
    149  a735		       00		      byte.b	0
    150  a736		       00		      byte.b	0
    151  a737		       00		      byte.b	0
    152  a738		       00		      byte.b	0
    153  a739		       00		      byte.b	0
    154  a73a		       00		      byte.b	0
    155  a73b		       00		      byte.b	0
    156  a73c		       00		      byte.b	0
    157  a73d		       00		      byte.b	0
    158  a73e		       00		      byte.b	0
    159  a73f		       00		      byte.b	0
    160  a740		       00		      byte.b	0
    161  a741		       00		      byte.b	0
    162  a742		       00		      byte.b	0
    163  a743		       00		      byte.b	0
    164  a744		       00		      byte.b	0
    165  a745		       00		      byte.b	0
    166  a746		       00		      byte.b	0
    167  a747		       00		      byte.b	0
    168  a748		       00		      byte.b	0
    169  a749		       00		      byte.b	0
    170  a74a		       00		      byte.b	0
    171  a74b		       00		      byte.b	0
    172  a74c		       85		      byte.b	133
    173  a74d		       8c		      byte.b	140
    174  a74e		       92		      byte.b	146
    175  a74f		       98		      byte.b	152
    176  a750		       9e		      byte.b	158
    177  a751		       a3		      byte.b	163
    178  a752		       a9		      byte.b	169
    179  a753		       ad		      byte.b	173
    180  a754		       b2		      byte.b	178
    181  a755		       b6		      byte.b	182
    182  a756		       ba		      byte.b	186
    183  a757		       be		      byte.b	190
    184  a758		       c2		      byte.b	194
    185  a759		       c5		      byte.b	197
    186  a75a		       c9		      byte.b	201
    187  a75b		       cc		      byte.b	204
    188  a75c		       cf		      byte.b	207
    189  a75d		       d1		      byte.b	209
    190  a75e		       d4		      byte.b	212
    191  a75f		       d6		      byte.b	214
    192  a760		       d9		      byte.b	217
    193  a761		       db		      byte.b	219
    194  a762		       dd		      byte.b	221
    195  a763		       df		      byte.b	223
    196  a764		       e0		      byte.b	224
    197  a765		       e2		      byte.b	226
    198  a766		       e4		      byte.b	228
    199  a767		       e5		      byte.b	229
    200  a768		       e7		      byte.b	231
    201  a769		       e8		      byte.b	232
    202  a76a		       e9		      byte.b	233
    203  a76b		       eb		      byte.b	235
    204  a76c		       ec		      byte.b	236
    205  a76d		       ed		      byte.b	237
    206  a76e		       ee		      byte.b	238
    207  a76f		       ef		      byte.b	239
    208  a770		       f0		      byte.b	240
    209  a771		       00		      byte.b	0
    210  a772		       00		      byte.b	0
    211  a773		       00		      byte.b	0
    212  a774		       00		      byte.b	0
    213  a775		       00		      byte.b	0
    214  a776		       00		      byte.b	0
    215  a777		       00		      byte.b	0
    216  a778		       00		      byte.b	0
    217  a779		       00		      byte.b	0
    218  a77a		       00		      byte.b	0
    219  a77b		       00		      byte.b	0
    220  a77c		       00		      byte.b	0
    221  a77d		       00		      byte.b	0
    222  a77e		       00		      byte.b	0
    223  a77f		       00		      byte.b	0
    224  a780		       00		      byte.b	0
    225  a781		       00		      byte.b	0
    226  a782		       00		      byte.b	0
    227  a783		       00		      byte.b	0
    228  a784		       00		      byte.b	0
    229  a785		       00		      byte.b	0
    230  a786		       00		      byte.b	0
    231  a787		       00		      byte.b	0
    232  a788		       00		      byte.b	0
    233  a789		       00		      byte.b	0
    234  a78a		       00		      byte.b	0
    235  a78b		       00		      byte.b	0
    236  a78c		       00		      byte.b	0
    237  a78d		       00		      byte.b	0
    238  a78e		       00		      byte.b	0
    239  a78f		       00		      byte.b	0
    240  a790		       00		      byte.b	0
    241  a791		       00		      byte.b	0
    242  a792		       00		      byte.b	0
    243  a793		       00		      byte.b	0
    244  a794		       00		      byte.b	0
    245  a795		       00		      byte.b	0
    246  a796		       00		      byte.b	0
    247  a797		       00		      byte.b	0
    248  a798		       00		      byte.b	0
    249  a799		       00		      byte.b	0
    250  a79a		       00		      byte.b	0
    251  a79b		       00		      byte.b	0
    252  a79c		       00		      byte.b	0
    253  a79d		       00		      byte.b	0
    254  a79e		       00		      byte.b	0
    255  a79f		       00		      byte.b	0
    256  a7a0		       00		      byte.b	0
    257  a7a1		       00		      byte.b	0
    258  a7a2		       00		      byte.b	0
    259  a7a3		       00		      byte.b	0
    260  a7a4		       00		      byte.b	0
    261  a7a5		       00		      byte.b	0
    262  a7a6		       00		      byte.b	0
    263  a7a7		       00		      byte.b	0
    264  a7a8
    265  a7a8				   voice3lookup_ntsc
    266  a7a8		       00		      byte.b	0
    267  a7a9		       00		      byte.b	0
    268  a7aa		       00		      byte.b	0
    269  a7ab		       00		      byte.b	0
    270  a7ac		       00		      byte.b	0
    271  a7ad		       00		      byte.b	0
    272  a7ae		       00		      byte.b	0
    273  a7af		       00		      byte.b	0
    274  a7b0		       00		      byte.b	0
    275  a7b1		       00		      byte.b	0
    276  a7b2		       00		      byte.b	0
    277  a7b3		       00		      byte.b	0
    278  a7b4		       00		      byte.b	0
    279  a7b5		       00		      byte.b	0
    280  a7b6		       00		      byte.b	0
    281  a7b7		       00		      byte.b	0
    282  a7b8		       00		      byte.b	0
    283  a7b9		       00		      byte.b	0
    284  a7ba		       00		      byte.b	0
    285  a7bb		       00		      byte.b	0
    286  a7bc		       00		      byte.b	0
    287  a7bd		       00		      byte.b	0
    288  a7be		       00		      byte.b	0
    289  a7bf		       00		      byte.b	0
    290  a7c0		       00		      byte.b	0
    291  a7c1		       00		      byte.b	0
    292  a7c2		       00		      byte.b	0
    293  a7c3		       00		      byte.b	0
    294  a7c4		       00		      byte.b	0
    295  a7c5		       00		      byte.b	0
    296  a7c6		       00		      byte.b	0
    297  a7c7		       00		      byte.b	0
    298  a7c8		       00		      byte.b	0
    299  a7c9		       00		      byte.b	0
    300  a7ca		       00		      byte.b	0
    301  a7cb		       00		      byte.b	0
    302  a7cc		       00		      byte.b	0
    303  a7cd		       00		      byte.b	0
    304  a7ce		       00		      byte.b	0
    305  a7cf		       00		      byte.b	0
    306  a7d0		       00		      byte.b	0
    307  a7d1		       00		      byte.b	0
    308  a7d2		       00		      byte.b	0
    309  a7d3		       00		      byte.b	0
    310  a7d4		       00		      byte.b	0
    311  a7d5		       00		      byte.b	0
    312  a7d6		       00		      byte.b	0
    313  a7d7		       00		      byte.b	0
    314  a7d8		       85		      byte.b	133
    315  a7d9		       8c		      byte.b	140
    316  a7da		       92		      byte.b	146
    317  a7db		       98		      byte.b	152
    318  a7dc		       9e		      byte.b	158
    319  a7dd		       a3		      byte.b	163
    320  a7de		       a9		      byte.b	169
    321  a7df		       ad		      byte.b	173
    322  a7e0		       b2		      byte.b	178
    323  a7e1		       b6		      byte.b	182
    324  a7e2		       ba		      byte.b	186
    325  a7e3		       be		      byte.b	190
    326  a7e4		       c2		      byte.b	194
    327  a7e5		       c5		      byte.b	197
    328  a7e6		       c9		      byte.b	201
    329  a7e7		       cc		      byte.b	204
    330  a7e8		       cf		      byte.b	207
    331  a7e9		       d1		      byte.b	209
    332  a7ea		       d4		      byte.b	212
    333  a7eb		       d6		      byte.b	214
    334  a7ec		       d9		      byte.b	217
    335  a7ed		       db		      byte.b	219
    336  a7ee		       dd		      byte.b	221
    337  a7ef		       df		      byte.b	223
    338  a7f0		       e0		      byte.b	224
    339  a7f1		       e2		      byte.b	226
    340  a7f2		       e4		      byte.b	228
    341  a7f3		       e5		      byte.b	229
    342  a7f4		       e7		      byte.b	231
    343  a7f5		       e8		      byte.b	232
    344  a7f6		       e9		      byte.b	233
    345  a7f7		       eb		      byte.b	235
    346  a7f8		       ec		      byte.b	236
    347  a7f9		       ed		      byte.b	237
    348  a7fa		       ee		      byte.b	238
    349  a7fb		       ef		      byte.b	239
    350  a7fc		       f0		      byte.b	240
    351  a7fd		       00		      byte.b	0
    352  a7fe		       00		      byte.b	0
    353  a7ff		       00		      byte.b	0
    354  a800		       00		      byte.b	0
    355  a801		       00		      byte.b	0
    356  a802		       00		      byte.b	0
    357  a803		       00		      byte.b	0
    358  a804		       00		      byte.b	0
    359  a805		       00		      byte.b	0
    360  a806		       00		      byte.b	0
    361  a807		       00		      byte.b	0
    362  a808		       00		      byte.b	0
    363  a809		       00		      byte.b	0
    364  a80a		       00		      byte.b	0
    365  a80b		       00		      byte.b	0
    366  a80c		       00		      byte.b	0
    367  a80d		       00		      byte.b	0
    368  a80e		       00		      byte.b	0
    369  a80f		       00		      byte.b	0
    370  a810		       00		      byte.b	0
    371  a811		       00		      byte.b	0
    372  a812		       00		      byte.b	0
    373  a813		       00		      byte.b	0
    374  a814		       00		      byte.b	0
    375  a815		       00		      byte.b	0
    376  a816		       00		      byte.b	0
    377  a817		       00		      byte.b	0
    378  a818		       00		      byte.b	0
    379  a819		       00		      byte.b	0
    380  a81a		       00		      byte.b	0
    381  a81b		       00		      byte.b	0
    382  a81c		       00		      byte.b	0
    383  a81d		       00		      byte.b	0
    384  a81e		       00		      byte.b	0
    385  a81f		       00		      byte.b	0
    386  a820		       00		      byte.b	0
    387  a821		       00		      byte.b	0
    388  a822		       00		      byte.b	0
    389  a823		       00		      byte.b	0
    390  a824		       00		      byte.b	0
    391  a825		       00		      byte.b	0
    392  a826		       00		      byte.b	0
    393  a827		       00		      byte.b	0
    394  a828
    395  a828
    396  a828				   voice4lookup_ntsc
    397  a828		       00		      byte.b	0
    398  a829		       00		      byte.b	0
    399  a82a		       00		      byte.b	0
    400  a82b		       00		      byte.b	0
    401  a82c		       00		      byte.b	0
    402  a82d		       00		      byte.b	0
    403  a82e		       00		      byte.b	0
    404  a82f		       00		      byte.b	0
    405  a830		       00		      byte.b	0
    406  a831		       00		      byte.b	0
    407  a832		       00		      byte.b	0
    408  a833		       00		      byte.b	0
    409  a834		       00		      byte.b	0
    410  a835		       00		      byte.b	0
    411  a836		       00		      byte.b	0
    412  a837		       00		      byte.b	0
    413  a838		       00		      byte.b	0
    414  a839		       00		      byte.b	0
    415  a83a		       00		      byte.b	0
    416  a83b		       00		      byte.b	0
    417  a83c		       00		      byte.b	0
    418  a83d		       00		      byte.b	0
    419  a83e		       00		      byte.b	0
    420  a83f		       00		      byte.b	0
    421  a840		       00		      byte.b	0
    422  a841		       00		      byte.b	0
    423  a842		       00		      byte.b	0
    424  a843		       00		      byte.b	0
    425  a844		       00		      byte.b	0
    426  a845		       00		      byte.b	0
    427  a846		       00		      byte.b	0
    428  a847		       00		      byte.b	0
    429  a848		       00		      byte.b	0
    430  a849		       00		      byte.b	0
    431  a84a		       00		      byte.b	0
    432  a84b		       00		      byte.b	0
    433  a84c		       85		      byte.b	133
    434  a84d		       8c		      byte.b	140
    435  a84e		       92		      byte.b	146
    436  a84f		       98		      byte.b	152
    437  a850		       9e		      byte.b	158
    438  a851		       a3		      byte.b	163
    439  a852		       a9		      byte.b	169
    440  a853		       ad		      byte.b	173
    441  a854		       b2		      byte.b	178
    442  a855		       b6		      byte.b	182
    443  a856		       ba		      byte.b	186
    444  a857		       be		      byte.b	190
    445  a858		       c2		      byte.b	194
    446  a859		       c5		      byte.b	197
    447  a85a		       c9		      byte.b	201
    448  a85b		       cc		      byte.b	204
    449  a85c		       cf		      byte.b	207
    450  a85d		       d1		      byte.b	209
    451  a85e		       d4		      byte.b	212
    452  a85f		       d6		      byte.b	214
    453  a860		       d9		      byte.b	217
    454  a861		       db		      byte.b	219
    455  a862		       dd		      byte.b	221
    456  a863		       df		      byte.b	223
    457  a864		       e0		      byte.b	224
    458  a865		       e2		      byte.b	226
    459  a866		       e4		      byte.b	228
    460  a867		       e5		      byte.b	229
    461  a868		       e7		      byte.b	231
    462  a869		       e8		      byte.b	232
    463  a86a		       e9		      byte.b	233
    464  a86b		       eb		      byte.b	235
    465  a86c		       ec		      byte.b	236
    466  a86d		       ed		      byte.b	237
    467  a86e		       ee		      byte.b	238
    468  a86f		       ef		      byte.b	239
    469  a870		       f0		      byte.b	240
    470  a871		       00		      byte.b	0
    471  a872		       00		      byte.b	0
    472  a873		       00		      byte.b	0
    473  a874		       00		      byte.b	0
    474  a875		       00		      byte.b	0
    475  a876		       00		      byte.b	0
    476  a877		       00		      byte.b	0
    477  a878		       00		      byte.b	0
    478  a879		       00		      byte.b	0
    479  a87a		       00		      byte.b	0
    480  a87b		       00		      byte.b	0
    481  a87c		       00		      byte.b	0
    482  a87d		       00		      byte.b	0
    483  a87e		       00		      byte.b	0
    484  a87f		       00		      byte.b	0
    485  a880		       00		      byte.b	0
    486  a881		       00		      byte.b	0
    487  a882		       00		      byte.b	0
    488  a883		       00		      byte.b	0
    489  a884		       00		      byte.b	0
    490  a885		       00		      byte.b	0
    491  a886		       00		      byte.b	0
    492  a887		       00		      byte.b	0
    493  a888		       00		      byte.b	0
    494  a889		       00		      byte.b	0
    495  a88a		       00		      byte.b	0
    496  a88b		       00		      byte.b	0
    497  a88c		       00		      byte.b	0
    498  a88d		       00		      byte.b	0
    499  a88e		       00		      byte.b	0
    500  a88f		       00		      byte.b	0
    501  a890		       00		      byte.b	0
    502  a891		       00		      byte.b	0
    503  a892		       00		      byte.b	0
    504  a893		       00		      byte.b	0
    505  a894		       00		      byte.b	0
    506  a895		       00		      byte.b	0
    507  a896		       00		      byte.b	0
    508  a897		       00		      byte.b	0
    509  a898		       00		      byte.b	0
    510  a899		       00		      byte.b	0
    511  a89a		       00		      byte.b	0
    512  a89b		       00		      byte.b	0
    513  a89c		       00		      byte.b	0
    514  a89d		       00		      byte.b	0
    515  a89e		       00		      byte.b	0
    516  a89f		       00		      byte.b	0
    517  a8a0		       00		      byte.b	0
    518  a8a1		       00		      byte.b	0
    519  a8a2		       00		      byte.b	0
    520  a8a3		       00		      byte.b	0
    521  a8a4		       00		      byte.b	0
    522  a8a5		       00		      byte.b	0
    523  a8a6		       00		      byte.b	0
    524  a8a7		       00		      byte.b	0
    525  a8a8
    526  a8a8							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-pal.asm LEVEL 2 PASS 2
      0  a8a8					      include	"lookup-pal.asm"
      1  a8a8							; --------------------------------------------------------------------------------------------------
      2  a8a8							; Note Lookups PAL - 128 bytes each, map MIDI Note# to a VIC register value
      3  a8a8							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a8a8
      5  a8a8				   voice1lookup_pal
      6  a8a8		       00		      byte.b	0
      7  a8a9		       00		      byte.b	0
      8  a8aa		       00		      byte.b	0
      9  a8ab		       00		      byte.b	0
     10  a8ac		       00		      byte.b	0
     11  a8ad		       00		      byte.b	0
     12  a8ae		       00		      byte.b	0
     13  a8af		       00		      byte.b	0
     14  a8b0		       00		      byte.b	0
     15  a8b1		       00		      byte.b	0
     16  a8b2		       00		      byte.b	0
     17  a8b3		       00		      byte.b	0
     18  a8b4		       00		      byte.b	0
     19  a8b5		       00		      byte.b	0
     20  a8b6		       00		      byte.b	0
     21  a8b7		       00		      byte.b	0
     22  a8b8		       00		      byte.b	0
     23  a8b9		       00		      byte.b	0
     24  a8ba		       00		      byte.b	0
     25  a8bb		       00		      byte.b	0
     26  a8bc		       00		      byte.b	0
     27  a8bd		       00		      byte.b	0
     28  a8be		       00		      byte.b	0
     29  a8bf		       00		      byte.b	0
     30  a8c0		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
     31  a8c1		       82		      byte.b	130
     32  a8c2		       89		      byte.b	137
     33  a8c3		       90		      byte.b	144
     34  a8c4		       96		      byte.b	150
     35  a8c5		       9c		      byte.b	156
     36  a8c6		       a1		      byte.b	161
     37  a8c7		       a7		      byte.b	167
     38  a8c8		       ac		      byte.b	172
     39  a8c9		       b0		      byte.b	176
     40  a8ca		       b5		      byte.b	181
     41  a8cb		       b9		      byte.b	185
     42  a8cc		       bd		      byte.b	189
     43  a8cd		       c1		      byte.b	193
     44  a8ce		       c4		      byte.b	196
     45  a8cf		       c7		      byte.b	199
     46  a8d0		       ca		      byte.b	202
     47  a8d1		       cd		      byte.b	205
     48  a8d2		       d0		      byte.b	208
     49  a8d3		       d3		      byte.b	211
     50  a8d4		       d5		      byte.b	213
     51  a8d5		       d8		      byte.b	216
     52  a8d6		       da		      byte.b	218
     53  a8d7		       dc		      byte.b	220
     54  a8d8		       de		      byte.b	222
     55  a8d9		       e0		      byte.b	224
     56  a8da		       e2		      byte.b	226
     57  a8db		       e3		      byte.b	227
     58  a8dc		       e5		      byte.b	229
     59  a8dd		       e6		      byte.b	230
     60  a8de		       e8		      byte.b	232
     61  a8df		       e9		      byte.b	233
     62  a8e0		       ea		      byte.b	234
     63  a8e1		       eb		      byte.b	235
     64  a8e2		       ec		      byte.b	236
     65  a8e3		       ed		      byte.b	237
     66  a8e4		       ee		      byte.b	238
     67  a8e5		       00		      byte.b	0
     68  a8e6		       00		      byte.b	0
     69  a8e7		       00		      byte.b	0
     70  a8e8		       00		      byte.b	0
     71  a8e9		       00		      byte.b	0
     72  a8ea		       00		      byte.b	0
     73  a8eb		       00		      byte.b	0
     74  a8ec		       00		      byte.b	0
     75  a8ed		       00		      byte.b	0
     76  a8ee		       00		      byte.b	0
     77  a8ef		       00		      byte.b	0
     78  a8f0		       00		      byte.b	0
     79  a8f1		       00		      byte.b	0
     80  a8f2		       00		      byte.b	0
     81  a8f3		       00		      byte.b	0
     82  a8f4		       00		      byte.b	0
     83  a8f5		       00		      byte.b	0
     84  a8f6		       00		      byte.b	0
     85  a8f7		       00		      byte.b	0
     86  a8f8		       00		      byte.b	0
     87  a8f9		       00		      byte.b	0
     88  a8fa		       00		      byte.b	0
     89  a8fb		       00		      byte.b	0
     90  a8fc		       00		      byte.b	0
     91  a8fd		       00		      byte.b	0
     92  a8fe		       00		      byte.b	0
     93  a8ff		       00		      byte.b	0
     94  a900		       00		      byte.b	0
     95  a901		       00		      byte.b	0
     96  a902		       00		      byte.b	0
     97  a903		       00		      byte.b	0
     98  a904		       00		      byte.b	0
     99  a905		       00		      byte.b	0
    100  a906		       00		      byte.b	0
    101  a907		       00		      byte.b	0
    102  a908		       00		      byte.b	0
    103  a909		       00		      byte.b	0
    104  a90a		       00		      byte.b	0
    105  a90b		       00		      byte.b	0
    106  a90c		       00		      byte.b	0
    107  a90d		       00		      byte.b	0
    108  a90e		       00		      byte.b	0
    109  a90f		       00		      byte.b	0
    110  a910		       00		      byte.b	0
    111  a911		       00		      byte.b	0
    112  a912		       00		      byte.b	0
    113  a913		       00		      byte.b	0
    114  a914		       00		      byte.b	0
    115  a915		       00		      byte.b	0
    116  a916		       00		      byte.b	0
    117  a917		       00		      byte.b	0
    118  a918		       00		      byte.b	0
    119  a919		       00		      byte.b	0
    120  a91a		       00		      byte.b	0
    121  a91b		       00		      byte.b	0
    122  a91c		       00		      byte.b	0
    123  a91d		       00		      byte.b	0
    124  a91e		       00		      byte.b	0
    125  a91f		       00		      byte.b	0
    126  a920		       00		      byte.b	0
    127  a921		       00		      byte.b	0
    128  a922		       00		      byte.b	0
    129  a923		       00		      byte.b	0
    130  a924		       00		      byte.b	0
    131  a925		       00		      byte.b	0
    132  a926		       00		      byte.b	0
    133  a927		       00		      byte.b	0
    134  a928
    135  a928				   voice2lookup_pal
    136  a928		       00		      byte.b	0
    137  a929		       00		      byte.b	0
    138  a92a		       00		      byte.b	0
    139  a92b		       00		      byte.b	0
    140  a92c		       00		      byte.b	0
    141  a92d		       00		      byte.b	0
    142  a92e		       00		      byte.b	0
    143  a92f		       00		      byte.b	0
    144  a930		       00		      byte.b	0
    145  a931		       00		      byte.b	0
    146  a932		       00		      byte.b	0
    147  a933		       00		      byte.b	0
    148  a934		       00		      byte.b	0
    149  a935		       00		      byte.b	0
    150  a936		       00		      byte.b	0
    151  a937		       00		      byte.b	0
    152  a938		       00		      byte.b	0
    153  a939		       00		      byte.b	0
    154  a93a		       00		      byte.b	0
    155  a93b		       00		      byte.b	0
    156  a93c		       00		      byte.b	0
    157  a93d		       00		      byte.b	0
    158  a93e		       00		      byte.b	0
    159  a93f		       00		      byte.b	0
    160  a940		       00		      byte.b	0
    161  a941		       00		      byte.b	0
    162  a942		       00		      byte.b	0
    163  a943		       00		      byte.b	0
    164  a944		       00		      byte.b	0
    165  a945		       00		      byte.b	0
    166  a946		       00		      byte.b	0
    167  a947		       00		      byte.b	0
    168  a948		       00		      byte.b	0
    169  a949		       00		      byte.b	0
    170  a94a		       00		      byte.b	0
    171  a94b		       00		      byte.b	0
    172  a94c		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    173  a94d		       82		      byte.b	130
    174  a94e		       89		      byte.b	137
    175  a94f		       90		      byte.b	144
    176  a950		       96		      byte.b	150
    177  a951		       9c		      byte.b	156
    178  a952		       a1		      byte.b	161
    179  a953		       a7		      byte.b	167
    180  a954		       ac		      byte.b	172
    181  a955		       b0		      byte.b	176
    182  a956		       b5		      byte.b	181
    183  a957		       b9		      byte.b	185
    184  a958		       bd		      byte.b	189
    185  a959		       c1		      byte.b	193
    186  a95a		       c4		      byte.b	196
    187  a95b		       c7		      byte.b	199
    188  a95c		       ca		      byte.b	202
    189  a95d		       cd		      byte.b	205
    190  a95e		       d0		      byte.b	208
    191  a95f		       d3		      byte.b	211
    192  a960		       d5		      byte.b	213
    193  a961		       d8		      byte.b	216
    194  a962		       da		      byte.b	218
    195  a963		       dc		      byte.b	220
    196  a964		       de		      byte.b	222
    197  a965		       e0		      byte.b	224
    198  a966		       e2		      byte.b	226
    199  a967		       e3		      byte.b	227
    200  a968		       e5		      byte.b	229
    201  a969		       e6		      byte.b	230
    202  a96a		       e8		      byte.b	232
    203  a96b		       e9		      byte.b	233
    204  a96c		       ea		      byte.b	234
    205  a96d		       eb		      byte.b	235
    206  a96e		       ec		      byte.b	236
    207  a96f		       ed		      byte.b	237
    208  a970		       ee		      byte.b	238
    209  a971		       00		      byte.b	0
    210  a972		       00		      byte.b	0
    211  a973		       00		      byte.b	0
    212  a974		       00		      byte.b	0
    213  a975		       00		      byte.b	0
    214  a976		       00		      byte.b	0
    215  a977		       00		      byte.b	0
    216  a978		       00		      byte.b	0
    217  a979		       00		      byte.b	0
    218  a97a		       00		      byte.b	0
    219  a97b		       00		      byte.b	0
    220  a97c		       00		      byte.b	0
    221  a97d		       00		      byte.b	0
    222  a97e		       00		      byte.b	0
    223  a97f		       00		      byte.b	0
    224  a980		       00		      byte.b	0
    225  a981		       00		      byte.b	0
    226  a982		       00		      byte.b	0
    227  a983		       00		      byte.b	0
    228  a984		       00		      byte.b	0
    229  a985		       00		      byte.b	0
    230  a986		       00		      byte.b	0
    231  a987		       00		      byte.b	0
    232  a988		       00		      byte.b	0
    233  a989		       00		      byte.b	0
    234  a98a		       00		      byte.b	0
    235  a98b		       00		      byte.b	0
    236  a98c		       00		      byte.b	0
    237  a98d		       00		      byte.b	0
    238  a98e		       00		      byte.b	0
    239  a98f		       00		      byte.b	0
    240  a990		       00		      byte.b	0
    241  a991		       00		      byte.b	0
    242  a992		       00		      byte.b	0
    243  a993		       00		      byte.b	0
    244  a994		       00		      byte.b	0
    245  a995		       00		      byte.b	0
    246  a996		       00		      byte.b	0
    247  a997		       00		      byte.b	0
    248  a998		       00		      byte.b	0
    249  a999		       00		      byte.b	0
    250  a99a		       00		      byte.b	0
    251  a99b		       00		      byte.b	0
    252  a99c		       00		      byte.b	0
    253  a99d		       00		      byte.b	0
    254  a99e		       00		      byte.b	0
    255  a99f		       00		      byte.b	0
    256  a9a0		       00		      byte.b	0
    257  a9a1		       00		      byte.b	0
    258  a9a2		       00		      byte.b	0
    259  a9a3		       00		      byte.b	0
    260  a9a4		       00		      byte.b	0
    261  a9a5		       00		      byte.b	0
    262  a9a6		       00		      byte.b	0
    263  a9a7		       00		      byte.b	0
    264  a9a8
    265  a9a8				   voice3lookup_pal
    266  a9a8		       00		      byte.b	0
    267  a9a9		       00		      byte.b	0
    268  a9aa		       00		      byte.b	0
    269  a9ab		       00		      byte.b	0
    270  a9ac		       00		      byte.b	0
    271  a9ad		       00		      byte.b	0
    272  a9ae		       00		      byte.b	0
    273  a9af		       00		      byte.b	0
    274  a9b0		       00		      byte.b	0
    275  a9b1		       00		      byte.b	0
    276  a9b2		       00		      byte.b	0
    277  a9b3		       00		      byte.b	0
    278  a9b4		       00		      byte.b	0
    279  a9b5		       00		      byte.b	0
    280  a9b6		       00		      byte.b	0
    281  a9b7		       00		      byte.b	0
    282  a9b8		       00		      byte.b	0
    283  a9b9		       00		      byte.b	0
    284  a9ba		       00		      byte.b	0
    285  a9bb		       00		      byte.b	0
    286  a9bc		       00		      byte.b	0
    287  a9bd		       00		      byte.b	0
    288  a9be		       00		      byte.b	0
    289  a9bf		       00		      byte.b	0
    290  a9c0		       00		      byte.b	0
    291  a9c1		       00		      byte.b	0
    292  a9c2		       00		      byte.b	0
    293  a9c3		       00		      byte.b	0
    294  a9c4		       00		      byte.b	0
    295  a9c5		       00		      byte.b	0
    296  a9c6		       00		      byte.b	0
    297  a9c7		       00		      byte.b	0
    298  a9c8		       00		      byte.b	0
    299  a9c9		       00		      byte.b	0
    300  a9ca		       00		      byte.b	0
    301  a9cb		       00		      byte.b	0
    302  a9cc		       00		      byte.b	0
    303  a9cd		       00		      byte.b	0
    304  a9ce		       00		      byte.b	0
    305  a9cf		       00		      byte.b	0
    306  a9d0		       00		      byte.b	0
    307  a9d1		       00		      byte.b	0
    308  a9d2		       00		      byte.b	0
    309  a9d3		       00		      byte.b	0
    310  a9d4		       00		      byte.b	0
    311  a9d5		       00		      byte.b	0
    312  a9d6		       00		      byte.b	0
    313  a9d7		       00		      byte.b	0
    314  a9d8		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    315  a9d9		       82		      byte.b	130
    316  a9da		       89		      byte.b	137
    317  a9db		       90		      byte.b	144
    318  a9dc		       96		      byte.b	150
    319  a9dd		       9c		      byte.b	156
    320  a9de		       a1		      byte.b	161
    321  a9df		       a7		      byte.b	167
    322  a9e0		       ac		      byte.b	172
    323  a9e1		       b0		      byte.b	176
    324  a9e2		       b5		      byte.b	181
    325  a9e3		       b9		      byte.b	185
    326  a9e4		       bd		      byte.b	189
    327  a9e5		       c1		      byte.b	193
    328  a9e6		       c4		      byte.b	196
    329  a9e7		       c7		      byte.b	199
    330  a9e8		       ca		      byte.b	202
    331  a9e9		       cd		      byte.b	205
    332  a9ea		       d0		      byte.b	208
    333  a9eb		       d3		      byte.b	211
    334  a9ec		       d5		      byte.b	213
    335  a9ed		       d8		      byte.b	216
    336  a9ee		       da		      byte.b	218
    337  a9ef		       dc		      byte.b	220
    338  a9f0		       de		      byte.b	222
    339  a9f1		       e0		      byte.b	224
    340  a9f2		       e2		      byte.b	226
    341  a9f3		       e3		      byte.b	227
    342  a9f4		       e5		      byte.b	229
    343  a9f5		       e6		      byte.b	230
    344  a9f6		       e8		      byte.b	232
    345  a9f7		       e9		      byte.b	233
    346  a9f8		       ea		      byte.b	234
    347  a9f9		       eb		      byte.b	235
    348  a9fa		       ec		      byte.b	236
    349  a9fb		       ed		      byte.b	237
    350  a9fc		       ee		      byte.b	238
    351  a9fd		       00		      byte.b	0
    352  a9fe		       00		      byte.b	0
    353  a9ff		       00		      byte.b	0
    354  aa00		       00		      byte.b	0
    355  aa01		       00		      byte.b	0
    356  aa02		       00		      byte.b	0
    357  aa03		       00		      byte.b	0
    358  aa04		       00		      byte.b	0
    359  aa05		       00		      byte.b	0
    360  aa06		       00		      byte.b	0
    361  aa07		       00		      byte.b	0
    362  aa08		       00		      byte.b	0
    363  aa09		       00		      byte.b	0
    364  aa0a		       00		      byte.b	0
    365  aa0b		       00		      byte.b	0
    366  aa0c		       00		      byte.b	0
    367  aa0d		       00		      byte.b	0
    368  aa0e		       00		      byte.b	0
    369  aa0f		       00		      byte.b	0
    370  aa10		       00		      byte.b	0
    371  aa11		       00		      byte.b	0
    372  aa12		       00		      byte.b	0
    373  aa13		       00		      byte.b	0
    374  aa14		       00		      byte.b	0
    375  aa15		       00		      byte.b	0
    376  aa16		       00		      byte.b	0
    377  aa17		       00		      byte.b	0
    378  aa18		       00		      byte.b	0
    379  aa19		       00		      byte.b	0
    380  aa1a		       00		      byte.b	0
    381  aa1b		       00		      byte.b	0
    382  aa1c		       00		      byte.b	0
    383  aa1d		       00		      byte.b	0
    384  aa1e		       00		      byte.b	0
    385  aa1f		       00		      byte.b	0
    386  aa20		       00		      byte.b	0
    387  aa21		       00		      byte.b	0
    388  aa22		       00		      byte.b	0
    389  aa23		       00		      byte.b	0
    390  aa24		       00		      byte.b	0
    391  aa25		       00		      byte.b	0
    392  aa26		       00		      byte.b	0
    393  aa27		       00		      byte.b	0
    394  aa28
    395  aa28
    396  aa28				   voice4lookup_pal
    397  aa28		       00		      byte.b	0
    398  aa29		       00		      byte.b	0
    399  aa2a		       00		      byte.b	0
    400  aa2b		       00		      byte.b	0
    401  aa2c		       00		      byte.b	0
    402  aa2d		       00		      byte.b	0
    403  aa2e		       00		      byte.b	0
    404  aa2f		       00		      byte.b	0
    405  aa30		       00		      byte.b	0
    406  aa31		       00		      byte.b	0
    407  aa32		       00		      byte.b	0
    408  aa33		       00		      byte.b	0
    409  aa34		       00		      byte.b	0
    410  aa35		       00		      byte.b	0
    411  aa36		       00		      byte.b	0
    412  aa37		       00		      byte.b	0
    413  aa38		       00		      byte.b	0
    414  aa39		       00		      byte.b	0
    415  aa3a		       00		      byte.b	0
    416  aa3b		       00		      byte.b	0
    417  aa3c		       00		      byte.b	0
    418  aa3d		       00		      byte.b	0
    419  aa3e		       00		      byte.b	0
    420  aa3f		       00		      byte.b	0
    421  aa40		       00		      byte.b	0
    422  aa41		       00		      byte.b	0
    423  aa42		       00		      byte.b	0
    424  aa43		       00		      byte.b	0
    425  aa44		       00		      byte.b	0
    426  aa45		       00		      byte.b	0
    427  aa46		       00		      byte.b	0
    428  aa47		       00		      byte.b	0
    429  aa48		       00		      byte.b	0
    430  aa49		       00		      byte.b	0
    431  aa4a		       00		      byte.b	0
    432  aa4b		       00		      byte.b	0
    433  aa4c		       85		      byte.b	133	; (122.60)  <- not reachable in PAL
    434  aa4d		       8c		      byte.b	140
    435  aa4e		       92		      byte.b	146
    436  aa4f		       98		      byte.b	152
    437  aa50		       9e		      byte.b	158
    438  aa51		       a3		      byte.b	163
    439  aa52		       a9		      byte.b	169
    440  aa53		       ad		      byte.b	173
    441  aa54		       b2		      byte.b	178
    442  aa55		       b6		      byte.b	182
    443  aa56		       ba		      byte.b	186
    444  aa57		       be		      byte.b	190
    445  aa58		       c2		      byte.b	194
    446  aa59		       c5		      byte.b	197
    447  aa5a		       c9		      byte.b	201
    448  aa5b		       cc		      byte.b	204
    449  aa5c		       cf		      byte.b	207
    450  aa5d		       d1		      byte.b	209
    451  aa5e		       d4		      byte.b	212
    452  aa5f		       d6		      byte.b	214
    453  aa60		       d9		      byte.b	217
    454  aa61		       db		      byte.b	219
    455  aa62		       dd		      byte.b	221
    456  aa63		       df		      byte.b	223
    457  aa64		       e0		      byte.b	224
    458  aa65		       e2		      byte.b	226
    459  aa66		       e4		      byte.b	228
    460  aa67		       e5		      byte.b	229
    461  aa68		       e7		      byte.b	231
    462  aa69		       e8		      byte.b	232
    463  aa6a		       e9		      byte.b	233
    464  aa6b		       eb		      byte.b	235
    465  aa6c		       ec		      byte.b	236
    466  aa6d		       ed		      byte.b	237
    467  aa6e		       ee		      byte.b	238
    468  aa6f		       ef		      byte.b	239
    469  aa70		       f0		      byte.b	240
    470  aa71		       00		      byte.b	0
    471  aa72		       00		      byte.b	0
    472  aa73		       00		      byte.b	0
    473  aa74		       00		      byte.b	0
    474  aa75		       00		      byte.b	0
    475  aa76		       00		      byte.b	0
    476  aa77		       00		      byte.b	0
    477  aa78		       00		      byte.b	0
    478  aa79		       00		      byte.b	0
    479  aa7a		       00		      byte.b	0
    480  aa7b		       00		      byte.b	0
    481  aa7c		       00		      byte.b	0
    482  aa7d		       00		      byte.b	0
    483  aa7e		       00		      byte.b	0
    484  aa7f		       00		      byte.b	0
    485  aa80		       00		      byte.b	0
    486  aa81		       00		      byte.b	0
    487  aa82		       00		      byte.b	0
    488  aa83		       00		      byte.b	0
    489  aa84		       00		      byte.b	0
    490  aa85		       00		      byte.b	0
    491  aa86		       00		      byte.b	0
    492  aa87		       00		      byte.b	0
    493  aa88		       00		      byte.b	0
    494  aa89		       00		      byte.b	0
    495  aa8a		       00		      byte.b	0
    496  aa8b		       00		      byte.b	0
    497  aa8c		       00		      byte.b	0
    498  aa8d		       00		      byte.b	0
    499  aa8e		       00		      byte.b	0
    500  aa8f		       00		      byte.b	0
    501  aa90		       00		      byte.b	0
    502  aa91		       00		      byte.b	0
    503  aa92		       00		      byte.b	0
    504  aa93		       00		      byte.b	0
    505  aa94		       00		      byte.b	0
    506  aa95		       00		      byte.b	0
    507  aa96		       00		      byte.b	0
    508  aa97		       00		      byte.b	0
    509  aa98		       00		      byte.b	0
    510  aa99		       00		      byte.b	0
    511  aa9a		       00		      byte.b	0
    512  aa9b		       00		      byte.b	0
    513  aa9c		       00		      byte.b	0
    514  aa9d		       00		      byte.b	0
    515  aa9e		       00		      byte.b	0
    516  aa9f		       00		      byte.b	0
    517  aaa0		       00		      byte.b	0
    518  aaa1		       00		      byte.b	0
    519  aaa2		       00		      byte.b	0
    520  aaa3		       00		      byte.b	0
    521  aaa4		       00		      byte.b	0
    522  aaa5		       00		      byte.b	0
    523  aaa6		       00		      byte.b	0
    524  aaa7		       00		      byte.b	0
    525  aaa8
    526  aaa8							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-alt.asm LEVEL 2 PASS 2
      0  aaa8					      include	"lookup-alt.asm"
      1  aaa8							; --------------------------------------------------------------------------------------------------
      2  aaa8							; Note Lookups Alternate - 128 bytes each, map MIDI Note# to a VIC register value
      3  aaa8							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  aaa8
      5  aaa8				   voice1lookup_alt
      6  aaa8		       00		      byte.b	0
      7  aaa9		       00		      byte.b	0
      8  aaaa		       00		      byte.b	0
      9  aaab		       00		      byte.b	0
     10  aaac		       00		      byte.b	0
     11  aaad		       00		      byte.b	0
     12  aaae		       00		      byte.b	0
     13  aaaf		       00		      byte.b	0
     14  aab0		       00		      byte.b	0
     15  aab1		       00		      byte.b	0
     16  aab2		       00		      byte.b	0
     17  aab3		       00		      byte.b	0
     18  aab4		       00		      byte.b	0
     19  aab5		       00		      byte.b	0
     20  aab6		       00		      byte.b	0
     21  aab7		       00		      byte.b	0
     22  aab8		       00		      byte.b	0
     23  aab9		       00		      byte.b	0
     24  aaba		       00		      byte.b	0
     25  aabb		       00		      byte.b	0
     26  aabc		       00		      byte.b	0
     27  aabd		       00		      byte.b	0
     28  aabe		       00		      byte.b	0
     29  aabf		       00		      byte.b	0
     30  aac0		       ff		      byte.b	255
     31  aac1		       86		      byte.b	134
     32  aac2		       8d		      byte.b	141
     33  aac3		       93		      byte.b	147
     34  aac4		       99		      byte.b	153
     35  aac5		       9f		      byte.b	159
     36  aac6		       a4		      byte.b	164
     37  aac7		       aa		      byte.b	170
     38  aac8		       ae		      byte.b	174
     39  aac9		       b3		      byte.b	179
     40  aaca		       b7		      byte.b	183
     41  aacb		       bb		      byte.b	187
     42  aacc		       bf		      byte.b	191
     43  aacd		       c3		      byte.b	195
     44  aace		       c6		      byte.b	198
     45  aacf		       c9		      byte.b	201
     46  aad0		       cc		      byte.b	204
     47  aad1		       cf		      byte.b	207
     48  aad2		       d2		      byte.b	210
     49  aad3		       d4		      byte.b	212
     50  aad4		       d7		      byte.b	215
     51  aad5		       d9		      byte.b	217
     52  aad6		       db		      byte.b	219
     53  aad7		       dd		      byte.b	221
     54  aad8		       df		      byte.b	223
     55  aad9		       e1		      byte.b	225
     56  aada		       e2		      byte.b	226
     57  aadb		       e4		      byte.b	228
     58  aadc		       e6		      byte.b	230
     59  aadd		       e7		      byte.b	231
     60  aade		       e8		      byte.b	232
     61  aadf		       ea		      byte.b	234
     62  aae0		       eb		      byte.b	235
     63  aae1		       ec		      byte.b	236
     64  aae2		       ed		      byte.b	237
     65  aae3		       ee		      byte.b	238
     66  aae4		       ef		      byte.b	239
     67  aae5		       00		      byte.b	0
     68  aae6		       00		      byte.b	0
     69  aae7		       00		      byte.b	0
     70  aae8		       00		      byte.b	0
     71  aae9		       00		      byte.b	0
     72  aaea		       00		      byte.b	0
     73  aaeb		       00		      byte.b	0
     74  aaec		       00		      byte.b	0
     75  aaed		       00		      byte.b	0
     76  aaee		       00		      byte.b	0
     77  aaef		       00		      byte.b	0
     78  aaf0		       00		      byte.b	0
     79  aaf1		       00		      byte.b	0
     80  aaf2		       00		      byte.b	0
     81  aaf3		       00		      byte.b	0
     82  aaf4		       00		      byte.b	0
     83  aaf5		       00		      byte.b	0
     84  aaf6		       00		      byte.b	0
     85  aaf7		       00		      byte.b	0
     86  aaf8		       00		      byte.b	0
     87  aaf9		       00		      byte.b	0
     88  aafa		       00		      byte.b	0
     89  aafb		       00		      byte.b	0
     90  aafc		       00		      byte.b	0
     91  aafd		       00		      byte.b	0
     92  aafe		       00		      byte.b	0
     93  aaff		       00		      byte.b	0
     94  ab00		       00		      byte.b	0
     95  ab01		       00		      byte.b	0
     96  ab02		       00		      byte.b	0
     97  ab03		       00		      byte.b	0
     98  ab04		       00		      byte.b	0
     99  ab05		       00		      byte.b	0
    100  ab06		       00		      byte.b	0
    101  ab07		       00		      byte.b	0
    102  ab08		       00		      byte.b	0
    103  ab09		       00		      byte.b	0
    104  ab0a		       00		      byte.b	0
    105  ab0b		       00		      byte.b	0
    106  ab0c		       00		      byte.b	0
    107  ab0d		       00		      byte.b	0
    108  ab0e		       00		      byte.b	0
    109  ab0f		       00		      byte.b	0
    110  ab10		       00		      byte.b	0
    111  ab11		       00		      byte.b	0
    112  ab12		       00		      byte.b	0
    113  ab13		       00		      byte.b	0
    114  ab14		       00		      byte.b	0
    115  ab15		       00		      byte.b	0
    116  ab16		       00		      byte.b	0
    117  ab17		       00		      byte.b	0
    118  ab18		       00		      byte.b	0
    119  ab19		       00		      byte.b	0
    120  ab1a		       00		      byte.b	0
    121  ab1b		       00		      byte.b	0
    122  ab1c		       00		      byte.b	0
    123  ab1d		       00		      byte.b	0
    124  ab1e		       00		      byte.b	0
    125  ab1f		       00		      byte.b	0
    126  ab20		       00		      byte.b	0
    127  ab21		       00		      byte.b	0
    128  ab22		       00		      byte.b	0
    129  ab23		       00		      byte.b	0
    130  ab24		       00		      byte.b	0
    131  ab25		       00		      byte.b	0
    132  ab26		       00		      byte.b	0
    133  ab27		       00		      byte.b	0
    134  ab28
    135  ab28				   voice2lookup_alt
    136  ab28		       00		      byte.b	0
    137  ab29		       00		      byte.b	0
    138  ab2a		       00		      byte.b	0
    139  ab2b		       00		      byte.b	0
    140  ab2c		       00		      byte.b	0
    141  ab2d		       00		      byte.b	0
    142  ab2e		       00		      byte.b	0
    143  ab2f		       00		      byte.b	0
    144  ab30		       00		      byte.b	0
    145  ab31		       00		      byte.b	0
    146  ab32		       00		      byte.b	0
    147  ab33		       00		      byte.b	0
    148  ab34		       00		      byte.b	0
    149  ab35		       00		      byte.b	0
    150  ab36		       00		      byte.b	0
    151  ab37		       00		      byte.b	0
    152  ab38		       00		      byte.b	0
    153  ab39		       00		      byte.b	0
    154  ab3a		       00		      byte.b	0
    155  ab3b		       00		      byte.b	0
    156  ab3c		       00		      byte.b	0
    157  ab3d		       00		      byte.b	0
    158  ab3e		       00		      byte.b	0
    159  ab3f		       00		      byte.b	0
    160  ab40		       00		      byte.b	0
    161  ab41		       00		      byte.b	0
    162  ab42		       00		      byte.b	0
    163  ab43		       00		      byte.b	0
    164  ab44		       00		      byte.b	0
    165  ab45		       00		      byte.b	0
    166  ab46		       00		      byte.b	0
    167  ab47		       00		      byte.b	0
    168  ab48		       00		      byte.b	0
    169  ab49		       00		      byte.b	0
    170  ab4a		       00		      byte.b	0
    171  ab4b		       00		      byte.b	0
    172  ab4c		       ff		      byte.b	255
    173  ab4d		       86		      byte.b	134
    174  ab4e		       8d		      byte.b	141
    175  ab4f		       93		      byte.b	147
    176  ab50		       99		      byte.b	153
    177  ab51		       9f		      byte.b	159
    178  ab52		       a4		      byte.b	164
    179  ab53		       aa		      byte.b	170
    180  ab54		       ae		      byte.b	174
    181  ab55		       b3		      byte.b	179
    182  ab56		       b7		      byte.b	183
    183  ab57		       bb		      byte.b	187
    184  ab58		       bf		      byte.b	191
    185  ab59		       c3		      byte.b	195
    186  ab5a		       c6		      byte.b	198
    187  ab5b		       c9		      byte.b	201
    188  ab5c		       cc		      byte.b	204
    189  ab5d		       cf		      byte.b	207
    190  ab5e		       d2		      byte.b	210
    191  ab5f		       d4		      byte.b	212
    192  ab60		       d7		      byte.b	215
    193  ab61		       d9		      byte.b	217
    194  ab62		       db		      byte.b	219
    195  ab63		       dd		      byte.b	221
    196  ab64		       df		      byte.b	223
    197  ab65		       e1		      byte.b	225
    198  ab66		       e2		      byte.b	226
    199  ab67		       e4		      byte.b	228
    200  ab68		       e6		      byte.b	230
    201  ab69		       e7		      byte.b	231
    202  ab6a		       e8		      byte.b	232
    203  ab6b		       ea		      byte.b	234
    204  ab6c		       eb		      byte.b	235
    205  ab6d		       ec		      byte.b	236
    206  ab6e		       ed		      byte.b	237
    207  ab6f		       ee		      byte.b	238
    208  ab70		       ef		      byte.b	239
    209  ab71		       00		      byte.b	0
    210  ab72		       00		      byte.b	0
    211  ab73		       00		      byte.b	0
    212  ab74		       00		      byte.b	0
    213  ab75		       00		      byte.b	0
    214  ab76		       00		      byte.b	0
    215  ab77		       00		      byte.b	0
    216  ab78		       00		      byte.b	0
    217  ab79		       00		      byte.b	0
    218  ab7a		       00		      byte.b	0
    219  ab7b		       00		      byte.b	0
    220  ab7c		       00		      byte.b	0
    221  ab7d		       00		      byte.b	0
    222  ab7e		       00		      byte.b	0
    223  ab7f		       00		      byte.b	0
    224  ab80		       00		      byte.b	0
    225  ab81		       00		      byte.b	0
    226  ab82		       00		      byte.b	0
    227  ab83		       00		      byte.b	0
    228  ab84		       00		      byte.b	0
    229  ab85		       00		      byte.b	0
    230  ab86		       00		      byte.b	0
    231  ab87		       00		      byte.b	0
    232  ab88		       00		      byte.b	0
    233  ab89		       00		      byte.b	0
    234  ab8a		       00		      byte.b	0
    235  ab8b		       00		      byte.b	0
    236  ab8c		       00		      byte.b	0
    237  ab8d		       00		      byte.b	0
    238  ab8e		       00		      byte.b	0
    239  ab8f		       00		      byte.b	0
    240  ab90		       00		      byte.b	0
    241  ab91		       00		      byte.b	0
    242  ab92		       00		      byte.b	0
    243  ab93		       00		      byte.b	0
    244  ab94		       00		      byte.b	0
    245  ab95		       00		      byte.b	0
    246  ab96		       00		      byte.b	0
    247  ab97		       00		      byte.b	0
    248  ab98		       00		      byte.b	0
    249  ab99		       00		      byte.b	0
    250  ab9a		       00		      byte.b	0
    251  ab9b		       00		      byte.b	0
    252  ab9c		       00		      byte.b	0
    253  ab9d		       00		      byte.b	0
    254  ab9e		       00		      byte.b	0
    255  ab9f		       00		      byte.b	0
    256  aba0		       00		      byte.b	0
    257  aba1		       00		      byte.b	0
    258  aba2		       00		      byte.b	0
    259  aba3		       00		      byte.b	0
    260  aba4		       00		      byte.b	0
    261  aba5		       00		      byte.b	0
    262  aba6		       00		      byte.b	0
    263  aba7		       00		      byte.b	0
    264  aba8
    265  aba8				   voice3lookup_alt
    266  aba8		       00		      byte.b	0
    267  aba9		       00		      byte.b	0
    268  abaa		       00		      byte.b	0
    269  abab		       00		      byte.b	0
    270  abac		       00		      byte.b	0
    271  abad		       00		      byte.b	0
    272  abae		       00		      byte.b	0
    273  abaf		       00		      byte.b	0
    274  abb0		       00		      byte.b	0
    275  abb1		       00		      byte.b	0
    276  abb2		       00		      byte.b	0
    277  abb3		       00		      byte.b	0
    278  abb4		       00		      byte.b	0
    279  abb5		       00		      byte.b	0
    280  abb6		       00		      byte.b	0
    281  abb7		       00		      byte.b	0
    282  abb8		       00		      byte.b	0
    283  abb9		       00		      byte.b	0
    284  abba		       00		      byte.b	0
    285  abbb		       00		      byte.b	0
    286  abbc		       00		      byte.b	0
    287  abbd		       00		      byte.b	0
    288  abbe		       00		      byte.b	0
    289  abbf		       00		      byte.b	0
    290  abc0		       00		      byte.b	0
    291  abc1		       00		      byte.b	0
    292  abc2		       00		      byte.b	0
    293  abc3		       00		      byte.b	0
    294  abc4		       00		      byte.b	0
    295  abc5		       00		      byte.b	0
    296  abc6		       00		      byte.b	0
    297  abc7		       00		      byte.b	0
    298  abc8		       00		      byte.b	0
    299  abc9		       00		      byte.b	0
    300  abca		       00		      byte.b	0
    301  abcb		       00		      byte.b	0
    302  abcc		       00		      byte.b	0
    303  abcd		       00		      byte.b	0
    304  abce		       00		      byte.b	0
    305  abcf		       00		      byte.b	0
    306  abd0		       00		      byte.b	0
    307  abd1		       00		      byte.b	0
    308  abd2		       00		      byte.b	0
    309  abd3		       00		      byte.b	0
    310  abd4		       00		      byte.b	0
    311  abd5		       00		      byte.b	0
    312  abd6		       00		      byte.b	0
    313  abd7		       00		      byte.b	0
    314  abd8		       ff		      byte.b	255
    315  abd9		       86		      byte.b	134
    316  abda		       8d		      byte.b	141
    317  abdb		       93		      byte.b	147
    318  abdc		       99		      byte.b	153
    319  abdd		       9f		      byte.b	159
    320  abde		       a4		      byte.b	164
    321  abdf		       aa		      byte.b	170
    322  abe0		       ae		      byte.b	174
    323  abe1		       b3		      byte.b	179
    324  abe2		       b7		      byte.b	183
    325  abe3		       bb		      byte.b	187
    326  abe4		       bf		      byte.b	191
    327  abe5		       c3		      byte.b	195
    328  abe6		       c6		      byte.b	198
    329  abe7		       c9		      byte.b	201
    330  abe8		       cc		      byte.b	204
    331  abe9		       cf		      byte.b	207
    332  abea		       d2		      byte.b	210
    333  abeb		       d4		      byte.b	212
    334  abec		       d7		      byte.b	215
    335  abed		       d9		      byte.b	217
    336  abee		       db		      byte.b	219
    337  abef		       dd		      byte.b	221
    338  abf0		       df		      byte.b	223
    339  abf1		       e1		      byte.b	225
    340  abf2		       e2		      byte.b	226
    341  abf3		       e4		      byte.b	228
    342  abf4		       e6		      byte.b	230
    343  abf5		       e7		      byte.b	231
    344  abf6		       e8		      byte.b	232
    345  abf7		       ea		      byte.b	234
    346  abf8		       eb		      byte.b	235
    347  abf9		       ec		      byte.b	236
    348  abfa		       ed		      byte.b	237
    349  abfb		       ee		      byte.b	238
    350  abfc		       ef		      byte.b	239
    351  abfd		       00		      byte.b	0
    352  abfe		       00		      byte.b	0
    353  abff		       00		      byte.b	0
    354  ac00		       00		      byte.b	0
    355  ac01		       00		      byte.b	0
    356  ac02		       00		      byte.b	0
    357  ac03		       00		      byte.b	0
    358  ac04		       00		      byte.b	0
    359  ac05		       00		      byte.b	0
    360  ac06		       00		      byte.b	0
    361  ac07		       00		      byte.b	0
    362  ac08		       00		      byte.b	0
    363  ac09		       00		      byte.b	0
    364  ac0a		       00		      byte.b	0
    365  ac0b		       00		      byte.b	0
    366  ac0c		       00		      byte.b	0
    367  ac0d		       00		      byte.b	0
    368  ac0e		       00		      byte.b	0
    369  ac0f		       00		      byte.b	0
    370  ac10		       00		      byte.b	0
    371  ac11		       00		      byte.b	0
    372  ac12		       00		      byte.b	0
    373  ac13		       00		      byte.b	0
    374  ac14		       00		      byte.b	0
    375  ac15		       00		      byte.b	0
    376  ac16		       00		      byte.b	0
    377  ac17		       00		      byte.b	0
    378  ac18		       00		      byte.b	0
    379  ac19		       00		      byte.b	0
    380  ac1a		       00		      byte.b	0
    381  ac1b		       00		      byte.b	0
    382  ac1c		       00		      byte.b	0
    383  ac1d		       00		      byte.b	0
    384  ac1e		       00		      byte.b	0
    385  ac1f		       00		      byte.b	0
    386  ac20		       00		      byte.b	0
    387  ac21		       00		      byte.b	0
    388  ac22		       00		      byte.b	0
    389  ac23		       00		      byte.b	0
    390  ac24		       00		      byte.b	0
    391  ac25		       00		      byte.b	0
    392  ac26		       00		      byte.b	0
    393  ac27		       00		      byte.b	0
    394  ac28
    395  ac28
    396  ac28				   voice4lookup_alt
    397  ac28		       00		      byte.b	0
    398  ac29		       00		      byte.b	0
    399  ac2a		       00		      byte.b	0
    400  ac2b		       00		      byte.b	0
    401  ac2c		       00		      byte.b	0
    402  ac2d		       00		      byte.b	0
    403  ac2e		       00		      byte.b	0
    404  ac2f		       00		      byte.b	0
    405  ac30		       00		      byte.b	0
    406  ac31		       00		      byte.b	0
    407  ac32		       00		      byte.b	0
    408  ac33		       00		      byte.b	0
    409  ac34		       00		      byte.b	0
    410  ac35		       00		      byte.b	0
    411  ac36		       00		      byte.b	0
    412  ac37		       00		      byte.b	0
    413  ac38		       00		      byte.b	0
    414  ac39		       00		      byte.b	0
    415  ac3a		       00		      byte.b	0
    416  ac3b		       00		      byte.b	0
    417  ac3c		       00		      byte.b	0
    418  ac3d		       00		      byte.b	0
    419  ac3e		       00		      byte.b	0
    420  ac3f		       00		      byte.b	0
    421  ac40		       00		      byte.b	0
    422  ac41		       00		      byte.b	0
    423  ac42		       00		      byte.b	0
    424  ac43		       00		      byte.b	0
    425  ac44		       00		      byte.b	0
    426  ac45		       00		      byte.b	0
    427  ac46		       00		      byte.b	0
    428  ac47		       00		      byte.b	0
    429  ac48		       00		      byte.b	0
    430  ac49		       00		      byte.b	0
    431  ac4a		       00		      byte.b	0
    432  ac4b		       00		      byte.b	0
    433  ac4c		       ff		      byte.b	255
    434  ac4d		       86		      byte.b	134
    435  ac4e		       8d		      byte.b	141
    436  ac4f		       93		      byte.b	147
    437  ac50		       99		      byte.b	153
    438  ac51		       9f		      byte.b	159
    439  ac52		       a4		      byte.b	164
    440  ac53		       aa		      byte.b	170
    441  ac54		       ae		      byte.b	174
    442  ac55		       b3		      byte.b	179
    443  ac56		       b7		      byte.b	183
    444  ac57		       bb		      byte.b	187
    445  ac58		       bf		      byte.b	191
    446  ac59		       c3		      byte.b	195
    447  ac5a		       c6		      byte.b	198
    448  ac5b		       c9		      byte.b	201
    449  ac5c		       cc		      byte.b	204
    450  ac5d		       cf		      byte.b	207
    451  ac5e		       d2		      byte.b	210
    452  ac5f		       d4		      byte.b	212
    453  ac60		       d7		      byte.b	215
    454  ac61		       d9		      byte.b	217
    455  ac62		       db		      byte.b	219
    456  ac63		       dd		      byte.b	221
    457  ac64		       df		      byte.b	223
    458  ac65		       e1		      byte.b	225
    459  ac66		       e2		      byte.b	226
    460  ac67		       e4		      byte.b	228
    461  ac68		       e6		      byte.b	230
    462  ac69		       e7		      byte.b	231
    463  ac6a		       e8		      byte.b	232
    464  ac6b		       ea		      byte.b	234
    465  ac6c		       eb		      byte.b	235
    466  ac6d		       ec		      byte.b	236
    467  ac6e		       ed		      byte.b	237
    468  ac6f		       ee		      byte.b	238
    469  ac70		       ef		      byte.b	239
    470  ac71		       00		      byte.b	0
    471  ac72		       00		      byte.b	0
    472  ac73		       00		      byte.b	0
    473  ac74		       00		      byte.b	0
    474  ac75		       00		      byte.b	0
    475  ac76		       00		      byte.b	0
    476  ac77		       00		      byte.b	0
    477  ac78		       00		      byte.b	0
    478  ac79		       00		      byte.b	0
    479  ac7a		       00		      byte.b	0
    480  ac7b		       00		      byte.b	0
    481  ac7c		       00		      byte.b	0
    482  ac7d		       00		      byte.b	0
    483  ac7e		       00		      byte.b	0
    484  ac7f		       00		      byte.b	0
    485  ac80		       00		      byte.b	0
    486  ac81		       00		      byte.b	0
    487  ac82		       00		      byte.b	0
    488  ac83		       00		      byte.b	0
    489  ac84		       00		      byte.b	0
    490  ac85		       00		      byte.b	0
    491  ac86		       00		      byte.b	0
    492  ac87		       00		      byte.b	0
    493  ac88		       00		      byte.b	0
    494  ac89		       00		      byte.b	0
    495  ac8a		       00		      byte.b	0
    496  ac8b		       00		      byte.b	0
    497  ac8c		       00		      byte.b	0
    498  ac8d		       00		      byte.b	0
    499  ac8e		       00		      byte.b	0
    500  ac8f		       00		      byte.b	0
    501  ac90		       00		      byte.b	0
    502  ac91		       00		      byte.b	0
    503  ac92		       00		      byte.b	0
    504  ac93		       00		      byte.b	0
    505  ac94		       00		      byte.b	0
    506  ac95		       00		      byte.b	0
    507  ac96		       00		      byte.b	0
    508  ac97		       00		      byte.b	0
    509  ac98		       00		      byte.b	0
    510  ac99		       00		      byte.b	0
    511  ac9a		       00		      byte.b	0
    512  ac9b		       00		      byte.b	0
    513  ac9c		       00		      byte.b	0
    514  ac9d		       00		      byte.b	0
    515  ac9e		       00		      byte.b	0
    516  ac9f		       00		      byte.b	0
    517  aca0		       00		      byte.b	0
    518  aca1		       00		      byte.b	0
    519  aca2		       00		      byte.b	0
    520  aca3		       00		      byte.b	0
    521  aca4		       00		      byte.b	0
    522  aca5		       00		      byte.b	0
    523  aca6		       00		      byte.b	0
    524  aca7		       00		      byte.b	0
    525  aca8
    526  aca8							; EOF!
------- FILE vicmidi.asm
    747  aca8
    748  aca8							; EOF!
