------- FILE vicmidi.asm LEVEL 1 PASS 1
      1  0000 ????						; VIC-20 MIDI Interface
      2  0000 ????						; By David Viens and Leif Bloomquist, portions by
      3  0000 ????						; Michael Kircher and Viznut
      4  0000 ????
      5  0000 ????						; ----------------------------------------------------------------------------
      6  0000 ????
      7  0000 ????				      processor	6502	; VIC-20
      8  0000 ????
      9  0000 ????						; Assume no memory expansion.	 Compile as Cartridge ROM in Block 5.
     10  a000					      org	$A000	; Block 5
     11  a000
     12  a000							; Macro and equate includes (must be at start)
------- FILE macros.asm LEVEL 2 PASS 1
      0  a000					      include	"macros.asm"
      1  a000
      2  a000							; ==============================================================
      3  a000							; Macro wrapping the fast hex poke
      4  a000							; ==============================================================
      5  a000
      6  a000					      MAC	hexpoke
      7  a000					      lda	#<{1}	; Low byte
      8  a000					      sta	$22
      9  a000					      lda	#>{1}	; High byte
     10  a000					      sta	$23
     11  a000
     12  a000					      lda	{2}	; Note - address
     13  a000					      jsr	hexstr
     14  a000					      ENDM
     15  a000
     16  a000							; ==============================================================
     17  a000							; Macro to position the cursor
     18  a000							; ==============================================================
     19  a000
     20  a000					      MAC	plot
     21  a000					      ldy	#{1}
     22  a000					      ldx	#{2}
     23  a000					      clc
     24  a000					      jsr	$E50A	; PLOT - same on 64 and VIC
     25  a000					      ENDM
     26  a000
     27  a000							; ==============================================================
     28  a000							; Macro to print a string
     29  a000							; ==============================================================
     30  a000
     31  a000					      MAC	printstring
     32  a000					      ldy	#>{0}
     33  a000					      lda	#<{0}
     34  a000					      jsr	STROUT
     35  a000					      ENDM
     36  a000
     37  a000							; ==============================================================
     38  a000							; Macro to print a byte (Hex)
     39  a000							; ==============================================================
     40  a000
     41  a000					      MAC	printbyte
     42  a000					      ldx	#$00
     43  a000					      ldy	#$0F
     44  a000					      lda	{0}
     45  a000					      jsr	printnum
     46  a000					      ENDM
------- FILE vicmidi.asm
------- FILE equates.asm LEVEL 2 PASS 1
      0  a000					      include	"equates.asm"
      1  a000							; --------------------------------------------------------------------------------------------------
      2  a000							;;free zero page (to use as vars)
      3  a000							;INDEX1: $0022-$0023, First utility pointer		       used by HEXPOKE
      4  a000							;INDEX2: $0024-$0025, Second utility pointer		       bytesexpected, midicounter
      5  a000							;FORNAM: $0049-$004A, Pointer to FOR/NEXT index variable etc  channel
      6  a000							;TEMPF3: $004E-$0052, Temporary FLPT storage		       Used by keyboard routines
      7  a000							;TEMPF1: $0057-$005B, Temporary FLPT storage		       Used by setwave
      8  a000							;TEMPF2: $005C-$0060: Temporary FLPT storage		       FIFO pointers
      9  a000							;FAC:	  $0061-$0066, Floating-point Accumulator (FAC)        Flags for Poly mode
     10  a000							;AFAC:   $0069-$006E, Alternative/Auxilary FAC 	       69=last note
     11  a000
     12  a000							; ---- Zero Page Addresses -------------------------------------------------
     13  a000
     14  a000		       00 24	   midicounter =	$24
     15  a000		       00 25	   bytesexpected =	$25
     16  a000
     17  a000		       00 49	   channel    =	$49
     18  a000		       00 4a	   bank       =	$4A	; 0=NTSC Normal, 1=PAL Normal, 2=NTSC Alt., 3=PAL Alt.
     19  a000
     20  a000							; Previous keyboard column bits.
     21  a000		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
     22  a000		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     23  a000		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     24  a000		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     25  a000
     26  a000							; Used by setwave
     27  a000		       00 57	   TMP	      =	$57
     28  a000		       00 58	   TMP2       =	$58
     29  a000
     30  a000		       00 5c	   write_pointer =	$5C	; FIFO current write pointer - incremented on byte received
     31  a000		       00 5d	   read_pointer =	$5D	; FIFO current read pointer - incremented on byte removed
     32  a000
     33  a000		       00 5e	   currentvalue =	$5E	; Current value for voice settings
     34  a000
     35  a000		       00 61	   poly_flags =	$61	; Flags for polymode
     36  a000							; Also 62,63,64
     37  a000
     38  a000		       00 69	   lastnote   =	$69	; Remembers last note, so Note Off applies to that note only
     39  a000							; Also 69,6A,6B
     40  a000
     41  a000		       00 6c	   temp1      =	$6C	; Used for screen colors
     42  a000		       00 6d	   tempx      =	$6D	; Used by program change
     43  a000
     44  a000							;*00FB-00FE  251-254  Operating system free zero page space
     45  a000		       00 fb	   statusbyte =	$FB
     46  a000		       00 fc	   mididata0  =	$FC
     47  a000		       00 fd	   mididata1  =	$FD
     48  a000		       00 fe	   mididata2  =	$FE	; If needed
     49  a000
     50  a000							; ---- Non Zero Page Addresses -----------------------------------------------
     51  a000
     52  a000							; Setwave Target
     53  a000		       10 00	   setwave    =	$1000	; This is right at the start of BASIC space.  Setwave code has to all be on one page.
     54  a000
     55  a000							; Store viznut waveform being used per voice
     56  a000		       11 00	   waveform1  =	$1100
     57  a000		       11 01	   waveform2  =	$1101
     58  a000		       11 02	   waveform3  =	$1102
     59  a000		       11 03	   waveform4  =	$1103
     60  a000
     61  a000							; Input Buffer
     62  a000		       12 00	   buffer     =	$1200
     63  a000
     64  a000							; ST16C450 Registers
     65  a000		       9c 00	   UART_RXTX  =	$9C00
     66  a000		       9c 01	   UART_IER   =	$9C01
     67  a000		       9c 02	   UART_ISR   =	$9C02
     68  a000		       9c 03	   UART_LCR   =	$9C03
     69  a000		       9c 05	   UART_LSR   =	$9C05
     70  a000		       9c 07	   UART_SCRATCHPAD =	$9C07
     71  a000		       9c 00	   UART_DIVISOR_LSB =	$9C00	; Yes, same as UART_RXTX
     72  a000		       9c 01	   UART_DIVISOR_MSB =	$9C01
     73  a000
     74  a000							;Sound and Video Registers
     75  a000		       90 0a	   sound_voice1 =	$900A	; Frequency for oscillator 1 (low)    (on: 128-255)
     76  a000		       90 0b	   sound_voice2 =	$900B	; Frequency for oscillator 2 (medium) (on: 128-255)
     77  a000		       90 0c	   sound_voice3 =	$900C	; Frequency for oscillator 3 (high)   (on: 128-255)
     78  a000		       90 0d	   sound_noise =	$900D	; Frequency of noise source	       (on: 128-255)
     79  a000		       90 0e	   sound_volume =	$900E	; Bits 0-3 sets volume of all sound.  Bits 4-7 are auxiliary color information (not used)
     80  a000		       90 0f	   screen_colors =	$900F
     81  a000
     82  a000							;Screen locations
     83  a000		       1e 00	   screen_start =	$1E00
     84  a000		       1e 4d	   midi_display =	$1E4D
     85  a000		       1e 77	   voice_display =	$1E77
     86  a000		       1f f9	   spin_display =	$1FF9	; Lower-right corner
     87  a000		       97 f9	   spin_color =	spin_display + $7800
     88  a000
     89  a000
     90  a000							; Kernal/BASIC Routines
     91  a000		       f2 7a	   CHROUT     =	$f27a
     92  a000		       e5 5f	   CLRSCREEN  =	$e55f
     93  a000		       e5 81	   HOME       =	$E581
     94  a000		       cb 1e	   STROUT     =	$CB1E	; Print string pointed to by (A/Y) until zero byte.
     95  a000
     96  a000		       00 08	   CG_DCS     =	8	;disable shift+C=
     97  a000		       00 09	   CG_ECS     =	9	;enable shift+C=
     98  a000
     99  a000		       00 0e	   CG_LCS     =	14	;switch to lowercase
    100  a000		       00 8e	   CG_UCS     =	142	;switch to uppercase
    101  a000
    102  a000							;cursor movement
    103  a000		       00 13	   CS_HOM     =	19
    104  a000		       00 91	   CS_U       =	145
    105  a000		       00 11	   CS_D       =	17
    106  a000		       00 9d	   CS_L       =	157
    107  a000		       00 1d	   CS_R       =	29
    108  a000
    109  a000		       00 0d	   CRLF       =	13
    110  a000
    111  a000							; EOF!
------- FILE vicmidi.asm
     15  a000
     16  a000							; ---- Startup Code ---------------------------------------------------------
     17  a000		       00 00		      dc.w	START	; Entry point for power up
     18  a002		       00 00		      dc.w	RESTORE	; Entry point for warm start (RESTORE)
     19  a004
     20  a004		       41 30 c3 c2*	      dc.b	"A0",$C3,$C2,$CD	; 'A0CBM' boot string
     21  a009
     22  a009				   START
     23  a009							;Kernel Init
     24  a009		       20 8d fd 	      jsr	$fd8d	; RAMTAS - Initialise System Constants
     25  a00c		       20 52 fd 	      jsr	$fd52	; Init Vectors
     26  a00f		       20 f9 fd 	      jsr	$fdf9	; Init I/O
     27  a012		       20 18 e5 	      jsr	$e518	; Init I/O
     28  a015
     29  a015							;BASIC Init (Partial)
     30  a015		       20 5b e4 	      jsr	$e45b	; Init Vectors
     31  a018		       20 a4 e3 	      jsr	$e3a4	; BASIC RAM
     32  a01b		       20 04 e4 	      jsr	$e404	; INIT Message (needed (?) so keycheck routines work)
     33  a01e
     34  a01e				   entry
     35  a01e		       20 00 00 	      jsr	mainscreen
     36  a021		       20 00 00 	      jsr	setup_pal
     37  a024		       20 00 00 	      jsr	setwavecopy
     38  a027		       20 00 00 	      jsr	checkuart
     39  a02a		       20 00 00 	      jsr	setupirq
     40  a02d		       20 00 00 	      jsr	resetuart
     41  a030
     42  a030							; Default to maximum volume
     43  a030		       a9 0f		      lda	#$0F
     44  a032		       20 00 00 	      jsr	setvolume
     45  a035
     46  a035							; Initial Values
     47  a035		       a9 00		      lda	#$00
     48  a037		       85 24		      sta	midicounter	; midicounter=0
     49  a039		       85 fb		      sta	statusbyte	; statusbyte=0
     50  a03b		       85 fc		      sta	mididata0	; mididata0=0
     51  a03d		       85 fd		      sta	mididata1	; mididata1=0
     52  a03f		       85 fe		      sta	mididata2	; mididata2=0
     53  a041		       85 4e		      sta	c0	; no keys are pressed in 7F
     54  a043		       85 4f		      sta	c1	; no keys are pressed in BF
     55  a045		       85 50		      sta	c2	; no keys are pressed in FD
     56  a047		       85 51		      sta	c3	; no keys are pressed in FE
     57  a049		       85 69		      sta	lastnote+0	; Clear
     58  a04b		       85 6a		      sta	lastnote+1	;    last
     59  a04d		       85 6b		      sta	lastnote+2	;	note
     60  a04f		       85 61		      sta	poly_flags+0	; Clear
     61  a051		       85 62		      sta	poly_flags+1	;   poly
     62  a053		       85 63		      sta	poly_flags+2	;     flags
     63  a055		       8d f9 97 	      sta	spin_color
     64  a058		       85 5c		      sta	write_pointer
     65  a05a		       85 5d		      sta	read_pointer
     66  a05c		       8d 00 11 	      sta	waveform1
     67  a05f		       8d 01 11 	      sta	waveform2
     68  a062		       8d 02 11 	      sta	waveform3
     69  a065		       8d 03 11 	      sta	waveform4
     70  a068
     71  a068							;;; ==========================================================================
     72  a068							;;; main LOOP!
     73  a068				   loop
     74  a068		       ee f9 97 	      inc	spin_color	; Prove we aren't 'frozen'
     75  a06b							;jsr GetKey	  ; create events from keyboard if needed - TODO
     76  a06b
     77  a06b		       a5 5d		      lda	read_pointer
     78  a06d		       c5 5c		      cmp	write_pointer
     79  a06f		       f0 f7		      beq	loop	; Pointers match, no data
     80  a071							;;; ==========================================================================
     81  a071
     82  a071							; We have data!
     83  a071							; Advance pointer for next read
     84  a071		       e6 5d		      inc	read_pointer
     85  a073
     86  a073							; Read current byte
     87  a073		       aa		      tax		; Since A still contains the unincremented pointer
     88  a074		       bd 00 12 	      lda	buffer,x
     89  a077
     90  a077							; If Bit 7 is set, it means it's a status byte and we need to prepare for a new message
     91  a077		       10 00		      bpl	data	; Not a status byte
     92  a079
     93  a079							; Store the status byte
     94  a079		       85 fb		      sta	statusbyte
     95  a07b
     96  a07b							; Reset the midi counter to 0
     97  a07b		       a2 00		      ldx	#$00
     98  a07d		       86 24		      stx	midicounter
     99  a07f
    100  a07f							; Also, check how many bytes we'll need - Normally 3, but 2 for Program Change
    101  a07f		       29 f0		      and	#$F0	; Get the upper nybble
    102  a081		       c9 c0		      cmp	#$C0	; Program change
    103  a083		       d0 c0		      bne	bytes2
    104  a085
    105  a085				   bytes1
    106  a085		       a0 01		      ldy	#$01
    107  a087		       4c 00 00 	      jmp	setbytes
    108  a08a
    109  a08a				   bytes2
    110  a08a		       a0 02		      ldy	#$02
    111  a08c
    112  a08c				   setbytes
    113  a08c		       84 25		      sty	bytesexpected
    114  a08e		       4c 68 a0 	      jmp	loop	; Wait for next byte
    115  a091
    116  a091							; ----------------------------------------------------------------------------
    117  a091							; Store data byte
    118  a091
    119  a091				   data
    120  a091		       a6 24		      ldx	midicounter	; What byte are we at?
    121  a093		       95 fc		      sta	mididata0,x	; Store received midi data pointed by x
    122  a095
    123  a095		       e8		      inx		; x++
    124  a096		       86 24		      stx	midicounter	; and store x
    125  a098
    126  a098		       e4 25		      cpx	bytesexpected	; Number of data bytes expected in this MIDI message (i.e. 2)
    127  a09a		       f0 25		      beq	messageproc	; Complete MIDI message received.
    128  a09c
    129  a09c							; Not complete, wait for more bytes.
    130  a09c		       4c 68 a0 	      jmp	loop
    131  a09f
    132  a09f							; ----------------------------------------------------------------------------
    133  a09f							; Process a complete MIDI message
    134  a09f
    135  a09f				   messageproc
    136  a09f							; Reset midicounter back to 0 for next message -
    137  a09f							; This might be redundant, see above line 100
    138  a09f		       a9 00		      lda	#$00
    139  a0a1		       85 24		      sta	midicounter
    140  a0a3
    141  a0a3							; Display received message bytes
      0  a0a3					      HEXPOKE	(midi_display+0),statusbyte
      1  a0a3		       a9 4d		      lda	#<(midi_display+0)
      2  a0a5		       85 22		      sta	$22
      3  a0a7		       a9 1e		      lda	#>(midi_display+0)
      4  a0a9		       85 23		      sta	$23
      5  a0ab
      6  a0ab		       a5 fb		      lda	statusbyte
      7  a0ad		       20 00 00 	      jsr	hexstr
      0  a0b0					      HEXPOKE	(midi_display+3),mididata0
      1  a0b0		       a9 50		      lda	#<(midi_display+3)
      2  a0b2		       85 22		      sta	$22
      3  a0b4		       a9 1e		      lda	#>(midi_display+3)
      4  a0b6		       85 23		      sta	$23
      5  a0b8
      6  a0b8		       a5 fc		      lda	mididata0
      7  a0ba		       20 00 00 	      jsr	hexstr
      0  a0bd					      HEXPOKE	(midi_display+6),mididata1
      1  a0bd		       a9 53		      lda	#<(midi_display+6)
      2  a0bf		       85 22		      sta	$22
      3  a0c1		       a9 1e		      lda	#>(midi_display+6)
      4  a0c3		       85 23		      sta	$23
      5  a0c5
      6  a0c5		       a5 fd		      lda	mididata1
      7  a0c7		       20 00 00 	      jsr	hexstr
    145  a0ca
    146  a0ca							; Save channel
    147  a0ca		       a5 fb		      lda	statusbyte
    148  a0cc		       29 0f		      and	#$0F
    149  a0ce		       85 49		      sta	channel
    150  a0d0
    151  a0d0							; Determine Command
    152  a0d0		       a5 fb		      lda	statusbyte	; Status Byte
    153  a0d2		       29 f0		      and	#$F0	; Get the upper nybble
    154  a0d4
    155  a0d4		       c9 80		      cmp	#$80	; Note Off
    156  a0d6		       f0 80		      beq	donoteoff
    157  a0d8
    158  a0d8		       c9 90		      cmp	#$90	; Note On
    159  a0da		       f0 90		      beq	donoteon
    160  a0dc
    161  a0dc		       c9 b0		      cmp	#$B0	; Control Change
    162  a0de		       f0 b0		      beq	docontrolchange
    163  a0e0
    164  a0e0		       c9 c0		      cmp	#$C0	; Program Change
    165  a0e2		       f0 c0		      beq	doprogramchange
    166  a0e4
    167  a0e4							; All others (Aftertouch, etc.) ignored.
    168  a0e4		       4c 68 a0 	      jmp	loop
    169  a0e7
    170  a0e7				   donoteoff
    171  a0e7		       20 00 00 	      jsr	noteoff
    172  a0ea		       4c 68 a0 	      jmp	loop
    173  a0ed
    174  a0ed				   donoteon
    175  a0ed		       20 00 00 	      jsr	noteon
    176  a0f0		       4c 68 a0 	      jmp	loop
    177  a0f3
    178  a0f3				   docontrolchange
    179  a0f3		       20 00 00 	      jsr	controlchange
    180  a0f6		       4c 68 a0 	      jmp	loop
    181  a0f9
    182  a0f9				   doprogramchange
    183  a0f9		       20 00 00 	      jsr	programchange
    184  a0fc		       4c 68 a0 	      jmp	loop
    185  a0ff
    186  a0ff
    187  a0ff							;*****************************************************************************
    188  a0ff							;*************************  MIDI Processing  *********************************
    189  a0ff							;*****************************************************************************
    190  a0ff
    191  a0ff							; ---- Note On ---------------------------------------------------
    192  a0ff							; 9c nn vv
    193  a0ff
    194  a0ff				   noteon
    195  a0ff							; Special Case: Treat Velocity=0 as Note Off.	Velocity ignored otherwise.
    196  a0ff		       a5 fd		      lda	mididata1
    197  a101		       f0 fd		      beq	noteoff
    198  a103
    199  a103		       a4 49		      ldy	channel	; Y now contains Channel # (0-offset)
    200  a105		       a6 fc		      ldx	mididata0	; X now contains MIDI Note #
    201  a107
    202  a107							; Special Case: Channel 5 used for Poly mode
    203  a107		       c0 04		      cpy	#$04
    204  a109		       d0 04		      bne	savenote
    205  a10b		       20 00 00 	      jsr	get_poly_voice
    206  a10e
    207  a10e				   savenote
    208  a10e							; Save the note# so that later Note Offs only apply to this note.
    209  a10e		       8a		      txa
    210  a10f		       99 69 00 	      sta	lastnote,y
    211  a112
    212  a112							; Perform a table lookup of MIDI Note# to VIC Register
    213  a112							; Table to use depends on bank/voice/channel
    214  a112
    215  a112							; Check the bank
    216  a112		       a5 4a		      lda	bank
    217  a114
    218  a114		       c9 00		      cmp	#$00
    219  a116		       f0 00		      beq	lookups_ntsc
    220  a118
    221  a118		       c9 01		      cmp	#$01
    222  a11a		       f0 01		      beq	lookups_pal
    223  a11c
    224  a11c		       c9 02		      cmp	#$02
    225  a11e		       f0 02		      beq	lookups_alt
    226  a120
    227  a120							; Ignore all other banks
    228  a120		       60		      rts
    229  a121
    230  a121
    231  a121							; ------ NTSC -------
    232  a121
    233  a121				   lookups_ntsc
    234  a121		       c0 00		      cpy	#$00
    235  a123		       f0 00		      beq	vlook1_ntsc
    236  a125
    237  a125		       c0 01		      cpy	#$01
    238  a127		       f0 01		      beq	vlook2_ntsc
    239  a129
    240  a129		       c0 02		      cpy	#$02
    241  a12b		       f0 02		      beq	vlook3_ntsc
    242  a12d
    243  a12d		       c0 03		      cpy	#$03
    244  a12f		       f0 03		      beq	vlook4_ntsc
    245  a131
    246  a131							; Ignore all other channels
    247  a131		       60		      rts
    248  a132
    249  a132				   vlook1_ntsc
    250  a132		       bd 00 00 	      lda	voice1lookup_ntsc,x
    251  a135		       4c 00 00 	      jmp	setvoice
    252  a138
    253  a138				   vlook2_ntsc
    254  a138		       bd 00 00 	      lda	voice2lookup_ntsc,x
    255  a13b		       4c 00 00 	      jmp	setvoice
    256  a13e
    257  a13e				   vlook3_ntsc
    258  a13e		       bd 00 00 	      lda	voice3lookup_ntsc,x
    259  a141		       4c 00 00 	      jmp	setvoice
    260  a144
    261  a144				   vlook4_ntsc
    262  a144		       bd 00 00 	      lda	voice4lookup_ntsc,x
    263  a147		       4c 00 00 	      jmp	setvoice
    264  a14a
    265  a14a							; ------ PAL -------
    266  a14a
    267  a14a				   lookups_pal
    268  a14a		       c0 00		      cpy	#$00
    269  a14c		       f0 00		      beq	vlook1_pal
    270  a14e
    271  a14e		       c0 01		      cpy	#$01
    272  a150		       f0 01		      beq	vlook2_pal
    273  a152
    274  a152		       c0 02		      cpy	#$02
    275  a154		       f0 02		      beq	vlook3_pal
    276  a156
    277  a156		       c0 03		      cpy	#$03
    278  a158		       f0 03		      beq	vlook4_pal
    279  a15a
    280  a15a							; Ignore all other channels
    281  a15a		       60		      rts
    282  a15b
    283  a15b				   vlook1_pal
    284  a15b		       bd 00 00 	      lda	voice1lookup_pal,x
    285  a15e		       4c 00 00 	      jmp	setvoice
    286  a161
    287  a161				   vlook2_pal
    288  a161		       bd 00 00 	      lda	voice2lookup_pal,x
    289  a164		       4c 00 00 	      jmp	setvoice
    290  a167
    291  a167				   vlook3_pal
    292  a167		       bd 00 00 	      lda	voice3lookup_pal,x
    293  a16a		       4c 00 00 	      jmp	setvoice
    294  a16d
    295  a16d				   vlook4_pal
    296  a16d		       bd 00 00 	      lda	voice4lookup_pal,x
    297  a170		       4c 00 00 	      jmp	setvoice
    298  a173
    299  a173							; ------ Alternate -------
    300  a173
    301  a173				   lookups_alt
    302  a173		       c0 00		      cpy	#$00
    303  a175		       f0 00		      beq	vlook1_alt
    304  a177
    305  a177		       c0 01		      cpy	#$01
    306  a179		       f0 01		      beq	vlook2_alt
    307  a17b
    308  a17b		       c0 02		      cpy	#$02
    309  a17d		       f0 02		      beq	vlook3_alt
    310  a17f
    311  a17f		       c0 03		      cpy	#$03
    312  a181		       f0 03		      beq	vlook4_alt
    313  a183
    314  a183							; Ignore all other channels
    315  a183		       60		      rts
    316  a184
    317  a184				   vlook1_alt
    318  a184		       bd 00 00 	      lda	voice1lookup_alt,x
    319  a187		       4c 00 00 	      jmp	setvoice
    320  a18a
    321  a18a				   vlook2_alt
    322  a18a		       bd 00 00 	      lda	voice2lookup_alt,x
    323  a18d		       4c 00 00 	      jmp	setvoice
    324  a190
    325  a190				   vlook3_alt
    326  a190		       bd 00 00 	      lda	voice3lookup_alt,x
    327  a193		       4c 00 00 	      jmp	setvoice
    328  a196
    329  a196				   vlook4_alt
    330  a196		       bd 00 00 	      lda	voice4lookup_alt,x
    331  a199		       4c 00 00 	      jmp	setvoice
    332  a19c
    333  a19c							; ---- Note Off --------------------------------------------------------------
    334  a19c							; 8c nn vv
    335  a19c
    336  a19c				   noteoff
    337  a19c		       a4 49		      ldy	channel	; Y now contains channel #
    338  a19e
    339  a19e							; Special Case: Channel 5 used for Poly mode
    340  a19e		       c0 04		      cpy	#$04
    341  a1a0		       d0 04		      bne	noteoff_check
    342  a1a2
    343  a1a2		       20 00 00 	      jsr	get_poly_voice_off
    344  a1a5		       4c 00 00 	      jmp	noteoff_off
    345  a1a8
    346  a1a8				   noteoff_check
    347  a1a8							;For Channels 1-4
    348  a1a8							;Check if it matches the last.  If not, ignore.
    349  a1a8		       b9 69 00 	      lda	lastnote,y
    350  a1ab		       c5 fc		      cmp	mididata0
    351  a1ad		       d0 fc		      bne	noteoff_x
    352  a1af
    353  a1af				   noteoff_off
    354  a1af		       a9 00		      lda	#$00	; Off
    355  a1b1		       4c 00 00 	      jmp	setvoice
    356  a1b4
    357  a1b4				   noteoff_x
    358  a1b4		       60		      rts
    359  a1b5
    360  a1b5							; ---- Control Change --------------------------------------------------------
    361  a1b5							; Bc CC vv
    362  a1b5
    363  a1b5				   controlchange
    364  a1b5		       a4 49		      ldy	channel	; Y now contains channel #
    365  a1b7
    366  a1b7		       a5 fc		      lda	mididata0	; Controller number
    367  a1b9
    368  a1b9		       c9 00		      cmp	#00	; Bank select - decimal
    369  a1bb		       f0 00		      beq	bankselect
    370  a1bd
    371  a1bd		       c9 01		      cmp	#01	; Modulation Wheel (coarse) - decimal
    372  a1bf		       f0 01		      beq	modwheel
    373  a1c1
    374  a1c1		       c9 07		      cmp	#07	; Volume (coarse) - decimal
    375  a1c3		       f0 07		      beq	volume
    376  a1c5
    377  a1c5		       c9 4a		      cmp	#74	; Brightness - decimal
    378  a1c7		       f0 4a		      beq	screencolors
    379  a1c9
    380  a1c9		       c9 78		      cmp	#120	; All Sound Off - decimal
    381  a1cb		       f0 78		      beq	soundoff
    382  a1cd
    383  a1cd		       c9 7b		      cmp	#123	; All Notes Off - decimal
    384  a1cf		       f0 7b		      beq	soundoff
    385  a1d1
    386  a1d1							; Ignore all the rest
    387  a1d1		       60		      rts
    388  a1d2
    389  a1d2							; ---- Bank Select -----------------------------------------------------------
    390  a1d2							; Bc 00 vv
    391  a1d2
    392  a1d2				   bankselect
    393  a1d2		       a5 fd		      lda	mididata1
    394  a1d4		       29 03		      and	#$03	; A contains bank, 0-3
    395  a1d6		       85 4a		      sta	bank
    396  a1d8				   showbank
      0  a1d8					      HEXPOKE	(voice_display+132),bank
      1  a1d8		       a9 fb		      lda	#<(voice_display+132)
      2  a1da		       85 22		      sta	$22
      3  a1dc		       a9 1e		      lda	#>(voice_display+132)
      4  a1de		       85 23		      sta	$23
      5  a1e0
      6  a1e0		       a5 4a		      lda	bank
      7  a1e2		       20 00 00 	      jsr	hexstr
    398  a1e5		       60		      rts
    399  a1e6
    400  a1e6							; ---- MOD Wheel Controller --------------------------------------------------
    401  a1e6							; Bc 01 vv
    402  a1e6
    403  a1e6							; Poke the data directly to the register, after OR'ing with $80
    404  a1e6				   modwheel
    405  a1e6		       a5 fd		      lda	mididata1
    406  a1e8		       09 80		      ora	#$80
    407  a1ea		       4c 00 00 	      jmp	setvoice
    408  a1ed
    409  a1ed							; ---- Volume Controller -----------------------------------------------------
    410  a1ed							; Bc 07 vv
    411  a1ed
    412  a1ed				   volume
    413  a1ed		       a5 fd		      lda	mididata1
    414  a1ef		       4a		      lsr
    415  a1f0		       4a		      lsr
    416  a1f1		       4a		      lsr
    417  a1f2
    418  a1f2				   setvolume
    419  a1f2		       8d 0e 90 	      sta	sound_volume
      0  a1f5					      HEXPOKE	(voice_display+110),sound_volume
      1  a1f5		       a9 e5		      lda	#<(voice_display+110)
      2  a1f7		       85 22		      sta	$22
      3  a1f9		       a9 1e		      lda	#>(voice_display+110)
      4  a1fb		       85 23		      sta	$23
      5  a1fd
      6  a1fd		       ad 0e 90 	      lda	sound_volume
      7  a200		       20 00 00 	      jsr	hexstr
    421  a203		       60		      rts
    422  a204
    423  a204							; ---- Brightness Controller (used for screen color)--------------------------
    424  a204							; Bc 4a vv
    425  a204
    426  a204				   screencolors
    427  a204		       18		      clc
    428  a205		       a5 fd		      lda	mididata1	; 7-bit
    429  a207
    430  a207		       29 07		      and	#%00000111	; Get border
    431  a209		       85 6c		      sta	temp1
    432  a20b
    433  a20b		       a5 fd		      lda	mididata1
    434  a20d		       29 78		      and	#%01111000	; Get background
    435  a20f		       0a		      asl		; Shift 1 bit left
    436  a210
    437  a210		       05 6c		      ora	temp1	; Put border back in
    438  a212		       09 08		      ora	#%00001000	; No Reverse Mode
    439  a214
    440  a214		       8d 0f 90 	      sta	screen_colors
    441  a217		       60		      rts
    442  a218
    443  a218							; ---- Sound Off / All Notes Off Controller-----------------------------------
    444  a218							; Bc 78 xx
    445  a218							; Bc 7B xx
    446  a218
    447  a218				   soundoff
    448  a218		       a9 00		      lda	#$00	; Off
    449  a21a		       4c 00 00 	      jmp	setvoice
    450  a21d
    451  a21d
    452  a21d							; ---- Program Change --------------------------------------------------------
    453  a21d							; Cc pn  <NOTE 2 bytes!>
    454  a21d
    455  a21d				   programchange
    456  a21d							; Blank the unused MIDI byte
    457  a21d		       a9 2d		      lda	#45	; -
    458  a21f		       8d 53 1e 	      sta	midi_display+6
    459  a222		       8d 54 1e 	      sta	midi_display+7
    460  a225
    461  a225							; Get low nybble and replace, since there are only 16 viznut waveforms
    462  a225		       a5 fc		      lda	mididata0
    463  a227		       29 0f		      and	#$0f
    464  a229		       85 fc		      sta	mididata0	; Note that this is the waveform NUMBER, not the VALUE!
    465  a22b
    466  a22b		       a4 49		      ldy	channel	; Y now contains channel #
    467  a22d		       99 00 11 	      sta	waveform1,y	; Store waveform used
    468  a230
    469  a230		       c0 00		      cpy	#00
    470  a232		       f0 00		      beq	pc_0
    471  a234
    472  a234		       c0 01		      cpy	#01
    473  a236		       f0 01		      beq	pc_1
    474  a238
    475  a238		       c0 02		      cpy	#02
    476  a23a		       f0 02		      beq	pc_2
    477  a23c
    478  a23c		       c0 03		      cpy	#03	; Not sure if viznut's waveforms applies to the noise voice,
    479  a23e		       f0 03		      beq	pc_3	; but keep it in away.
    480  a240
    481  a240							; Ignore all other channels
    482  a240		       60		      rts
    483  a241
    484  a241							; Update the screen with Program# (viznut waveform code)
    485  a241							; Note that these are not actually used until setvoice is called below [1]
    486  a241
    487  a241				   pc_0
      0  a241					      HEXPOKE	(voice_display+ 5),waveform1
      1  a241		       a9 7c		      lda	#<(voice_display+ 5)
      2  a243		       85 22		      sta	$22
      3  a245		       a9 1e		      lda	#>(voice_display+ 5)
      4  a247		       85 23		      sta	$23
      5  a249
      6  a249		       ad 00 11 	      lda	waveform1
      7  a24c		       20 00 00 	      jsr	hexstr
    489  a24f		       60		      rts
    490  a250
    491  a250				   pc_1
      0  a250					      HEXPOKE	(voice_display+27),waveform2
      1  a250		       a9 92		      lda	#<(voice_display+27)
      2  a252		       85 22		      sta	$22
      3  a254		       a9 1e		      lda	#>(voice_display+27)
      4  a256		       85 23		      sta	$23
      5  a258
      6  a258		       ad 01 11 	      lda	waveform2
      7  a25b		       20 00 00 	      jsr	hexstr
    493  a25e		       60		      rts
    494  a25f
    495  a25f				   pc_2
      0  a25f					      HEXPOKE	(voice_display+49),waveform3
      1  a25f		       a9 a8		      lda	#<(voice_display+49)
      2  a261		       85 22		      sta	$22
      3  a263		       a9 1e		      lda	#>(voice_display+49)
      4  a265		       85 23		      sta	$23
      5  a267
      6  a267		       ad 02 11 	      lda	waveform3
      7  a26a		       20 00 00 	      jsr	hexstr
    497  a26d		       60		      rts
    498  a26e
    499  a26e				   pc_3
      0  a26e					      HEXPOKE	(voice_display+71),waveform4
      1  a26e		       a9 be		      lda	#<(voice_display+71)
      2  a270		       85 22		      sta	$22
      3  a272		       a9 1e		      lda	#>(voice_display+71)
      4  a274		       85 23		      sta	$23
      5  a276
      6  a276		       ad 03 11 	      lda	waveform4
      7  a279		       20 00 00 	      jsr	hexstr
    501  a27c		       60		      rts
    502  a27d
    503  a27d
    504  a27d							;---------------------------------------------------------
    505  a27d							; Set a voice using viznut's setwave function.
    506  a27d							; If a sound is already playing, fine.  But if not, need a "short" delay.  TODO ***
    507  a27d
    508  a27d				   viznut
    509  a27d		       a4 49		      ldy	channel	; Channel # (0-3)
    510  a27f		       b9 00 00 	      lda	voice_to_register,y
    511  a282		       a8		      tay		; Y now contains low byte of register 90xx
    512  a283
    513  a283		       bd 00 11 	      lda	waveform1,x	; Retrieve the last desired waveform#
    514  a286		       aa		      tax
    515  a287		       bd 00 00 	      lda	viznutwaveforms,x	; A now contains the desired shift register contents
    516  a28a
    517  a28a		       a6 5e		      ldx	currentvalue	; X now contains initial frequency of selected channel
    518  a28c
    519  a28c							; X,Y,A are set - Set the waveform.
    520  a28c		       20 00 10 	      jsr	setwave
    521  a28f		       60		      rts
    522  a290
    523  a290
    524  a290							;***************************************************************************
    525  a290							;*******************  Set/Display Functions  *******************************
    526  a290							;***************************************************************************
    527  a290
    528  a290							; Dispatcher for setting the appropriate voice and updating the screen
    529  a290							; Channel# in Y (Channel 0 = Voice 1, etc)
    530  a290							; Value to set it to in A.
    531  a290
    532  a290				   setvoice
    533  a290		       85 5e		      sta	currentvalue
    534  a292
    535  a292							; Before setting the voice, check if a viznut waveform was selected previously [1]
    536  a292							; If so, handle that separately.
    537  a292							;  lda waveform1,y
    538  a292							;  bne viznut
    539  a292
    540  a292							; Nope, carry on.
    541  a292		       a5 5e		      lda	currentvalue
    542  a294
    543  a294		       c0 00		      cpy	#$00
    544  a296		       f0 00		      beq	v1
    545  a298
    546  a298		       c0 01		      cpy	#$01
    547  a29a		       f0 01		      beq	v2
    548  a29c
    549  a29c		       c0 02		      cpy	#$02
    550  a29e		       f0 02		      beq	v3
    551  a2a0
    552  a2a0		       c0 03		      cpy	#$03
    553  a2a2		       f0 03		      beq	v4
    554  a2a4
    555  a2a4							; Ignore all other channels
    556  a2a4		       60		      rts
    557  a2a5
    558  a2a5							; ---- Voice 1 -------
    559  a2a5				   v1
    560  a2a5		       8d 0a 90 	      sta	sound_voice1
      0  a2a8					      HEXPOKE	(voice_display+00),sound_voice1
      1  a2a8		       a9 77		      lda	#<(voice_display+00)
      2  a2aa		       85 22		      sta	$22
      3  a2ac		       a9 1e		      lda	#>(voice_display+00)
      4  a2ae		       85 23		      sta	$23
      5  a2b0
      6  a2b0		       ad 0a 90 	      lda	sound_voice1
      7  a2b3		       20 00 00 	      jsr	hexstr
    562  a2b6		       60		      rts
    563  a2b7
    564  a2b7							; ---- Voice 2 -------
    565  a2b7				   v2
    566  a2b7		       8d 0b 90 	      sta	sound_voice2
      0  a2ba					      HEXPOKE	(voice_display+22),sound_voice2
      1  a2ba		       a9 8d		      lda	#<(voice_display+22)
      2  a2bc		       85 22		      sta	$22
      3  a2be		       a9 1e		      lda	#>(voice_display+22)
      4  a2c0		       85 23		      sta	$23
      5  a2c2
      6  a2c2		       ad 0b 90 	      lda	sound_voice2
      7  a2c5		       20 00 00 	      jsr	hexstr
    568  a2c8		       60		      rts
    569  a2c9
    570  a2c9							; ---- Voice 3 -------
    571  a2c9				   v3
    572  a2c9		       8d 0c 90 	      sta	sound_voice3
      0  a2cc					      HEXPOKE	(voice_display+44),sound_voice3
      1  a2cc		       a9 a3		      lda	#<(voice_display+44)
      2  a2ce		       85 22		      sta	$22
      3  a2d0		       a9 1e		      lda	#>(voice_display+44)
      4  a2d2		       85 23		      sta	$23
      5  a2d4
      6  a2d4		       ad 0c 90 	      lda	sound_voice3
      7  a2d7		       20 00 00 	      jsr	hexstr
    574  a2da		       60		      rts
    575  a2db
    576  a2db							; ---- Voice 4 -------
    577  a2db				   v4
    578  a2db		       8d 0d 90 	      sta	sound_noise
      0  a2de					      HEXPOKE	(voice_display+66),sound_noise
      1  a2de		       a9 b9		      lda	#<(voice_display+66)
      2  a2e0		       85 22		      sta	$22
      3  a2e2		       a9 1e		      lda	#>(voice_display+66)
      4  a2e4		       85 23		      sta	$23
      5  a2e6
      6  a2e6		       ad 0d 90 	      lda	sound_noise
      7  a2e9		       20 00 00 	      jsr	hexstr
    580  a2ec		       60		      rts
    581  a2ed
    582  a2ed							; ----------------------------------------------------------------------------
    583  a2ed
    584  a2ed				   setcolors
    585  a2ed		       a2 00		      ldx	#$00
    586  a2ef		       a9 00		      lda	#$00
    587  a2f1				   setcolorsloop
    588  a2f1		       9d 00 96 	      sta	$9600,x
    589  a2f4		       9d 00 97 	      sta	$9700,x
    590  a2f7		       e8		      inx
    591  a2f8		       e0 00		      cpx	#$00
    592  a2fa		       d0 f5		      bne	setcolorsloop
    593  a2fc		       60		      rts
    594  a2fd
    595  a2fd							; ----------------------------------------------------------------------------
    596  a2fd							; Draw Main Screen
    597  a2fd
    598  a2fd				   mainscreen
    599  a2fd		       20 5f e5 	      jsr	CLRSCREEN
    600  a300		       a9 06		      lda	#$06	; Blue
    601  a302		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a305					      PRINTSTRING	maintext
      1  a305		       a0 00		      ldy	#>maintext
      2  a307		       a9 00		      lda	#<maintext
      3  a309		       20 1e cb 	      jsr	STROUT
    603  a30c
    604  a30c		       a9 6c		      lda	#$6C
    605  a30e		       8d f9 1f 	      sta	spin_display
    606  a311		       60		      rts
    607  a312
    608  a312
    609  a312							; ----------------------------------------------------------------------------
    610  a312							; Draw Credits Screen
    611  a312
vicmidi.asm (612): error: Label mismatch...
 --> mainscreen a2fd                  
    612  a312				   mainscreen
    613  a312		       20 5f e5 	      jsr	CLRSCREEN
    614  a315		       a9 06		      lda	#$06	; Blue
    615  a317		       8d 86 02 	      sta	$0286	; Cursor Color
      0  a31a					      PRINTSTRING	credits
      1  a31a		       a0 00		      ldy	#>credits
      2  a31c		       a9 00		      lda	#<credits
      3  a31e		       20 1e cb 	      jsr	STROUT
    617  a321
    618  a321		       60		      rts
    619  a322
    620  a322
    621  a322							; ----------------------------------------------------------------------------
    622  a322							; setwave needs to start on a page and is self-modifying,
    623  a322							; so it is copied to RAM here
    624  a322
    625  a322				   setwavecopy
    626  a322		       a2 00		      ldx	#$00
    627  a324				   copyloop
    628  a324		       bd 00 00 	      lda	setwaveorg,x
    629  a327		       9d 00 10 	      sta	setwave,x
    630  a32a		       e8		      inx
    631  a32b		       d0 f7		      bne	copyloop
    632  a32d		       60		      rts
    633  a32e
    634  a32e
    635  a32e							; ----------------------------------------------------------------------------
    636  a32e							; Strings
    637  a32e
    638  a32e				   maintext
    639  a32e		       0e 08		      byte.b	CG_LCS, CG_DCS
    640  a330		       2a 76 69 63*	      byte.b	"*vic20 midi iNTERFACE*", CRLF
    641  a347		       0d		      byte.b	CRLF
    642  a348		       6d 69 64 69*	      byte.b	"midi dATA: --:--:--", CRLF
    643  a35c		       0d		      byte.b	CRLF
    644  a35d		       76 4f 49 43*	      byte.b	"vOICE 1: -- / --", CRLF
    645  a36e		       76 4f 49 43*	      byte.b	"vOICE 2: -- / --", CRLF
    646  a37f		       76 4f 49 43*	      byte.b	"vOICE 3: -- / --", CRLF
    647  a390		       76 4f 49 43*	      byte.b	"vOICE 4: -- / --", CRLF
    648  a3a1		       0d		      byte.b	CRLF
    649  a3a2		       76 4f 4c 55*	      byte.b	"vOLUME : --", CRLF
    650  a3ae		       62 41 4e 4b*	      byte.b	"bANK	 : --", CRLF
    651  a3ba		       0d		      byte.b	CRLF
    652  a3bb		       73 59 53 54*	      byte.b	"sYSTEM : ???", CRLF
    653  a3c8		       00		      byte.b	0
    654  a3c9
    655  a3c9
    656  a3c9				   credits
    657  a3c9		       0e 08		      byte.b	CG_LCS, CG_DCS
    658  a3cb		       20 2a 76 69*	      byte.b	" *vic20 midi cREDITS*", CRLF
    659  a3e1		       0d		      byte.b	CRLF
    660  a3e2		       68 41 52 44*	      byte.b	"hARDWARE:", CRLF
    661  a3ec		       20 20 6a 49*	      byte.b	"  jIM bRAIN", CRLF
    662  a3f8		       20 20 66 52*	      byte.b	"  fRANCOIS lEVEILLE", CRLF
    663  a40c		       20 20 6c 64*	      byte.b	"  ld bALL", CRLF
    664  a416		       0d		      byte.b	CRLF
    665  a417		       73 4f 46 54*	      byte.b	"sOFTWARE:", CRLF
    666  a421		       20 6c 45 49*	      byte.b	" lEIF bLOOMQUIST", CRLF
    667  a432		       20 64 41 56*	      byte.b	" dAVID vIENS", CRLF
    668  a43f		       20 6d 49 43*	      byte.b	" mICHAEL kIRCHER", CRLF
    669  a450		       20 76 49 5a*	      byte.b	" vIZNUT", CRLF
    670  a458		       0d		      byte.b	CRLF
    671  a459		       74 48 41 4e*	      byte.b	"tHANKS TO EVERYONE", CRLF
    672  a46c		       4f 4e 20 54*	      byte.b	"ON THE vic20 dENIAL", CRLF
    673  a480		       46 4f 52 55*	      byte.b	"FORUMS!", CRLF
    674  a488		       00		      byte.b	0
    675  a489
    676  a489							; ----------------------------------------------------------------------------
    677  a489							; Lookup table between voice #(0-3) and low byte of register# ($0A-$0D)
    678  a489
    679  a489				   voice_to_register
    680  a489		       0a 0b 0c 0d	      byte.b	$0A,$0B,$0C,$0D
    681  a48d
    682  a48d
    683  a48d							; ----------------------------------------------------------------------------
    684  a48d							; Code includes
    685  a48d
------- FILE hardware.asm LEVEL 2 PASS 1
      0  a48d					      include	"hardware.asm"
      1  a48d							;***************************************************************************
      2  a48d							;*******************	 Hardware Functions   *******************************
      3  a48d							;***************************************************************************
      4  a48d
      5  a48d							; ----------------------------------------------------------------------------
      6  a48d							; Confirm the presence of the ST16C450 UART
      7  a48d				   checkuart
      8  a48d		       a9 55		      lda	#$55
      9  a48f		       8d 07 9c 	      sta	UART_SCRATCHPAD
     10  a492
     11  a492		       ad 07 9c 	      lda	UART_SCRATCHPAD
     12  a495		       c9 55		      cmp	#$55
     13  a497		       f0 55		      beq	checkuart_ok
     14  a499
     15  a499							; Not found!
      0  a499					      PLOT	0,20
      1  a499		       a0 00		      ldy	#0
      2  a49b		       a2 14		      ldx	#20
      3  a49d		       18		      clc
      4  a49e		       20 0a e5 	      jsr	$E50A
      0  a4a1					      PRINTSTRING	nouart
      1  a4a1		       a0 00		      ldy	#>nouart
      2  a4a3		       a9 00		      lda	#<nouart
      3  a4a5		       20 1e cb 	      jsr	STROUT
     18  a4a8
     19  a4a8				   uloop
     20  a4a8		       ee 0f 90 	      inc	screen_colors
     21  a4ab		       4c a8 a4 	      jmp	uloop
     22  a4ae
     23  a4ae				   checkuart_ok
     24  a4ae		       60		      rts
     25  a4af
     26  a4af							; ----------------------------------------------------------------------------
     27  a4af							; Set up the UART
     28  a4af
     29  a4af				   resetuart
     30  a4af							; Expose the divisor latch.
     31  a4af		       a9 80		      lda	#%10000000
     32  a4b1		       8d 03 9c 	      sta	UART_LCR
     33  a4b4
     34  a4b4							; Set the MIDI baud rate.
     35  a4b4							; The ST16C450 datasheet says that it divides the input clock rate by
     36  a4b4							; 16, so with a 2Mhz crystal on board, that gives
     37  a4b4							; 2000000 * (1/16) * (1/x) = 31250.  Solving gives x=4 for the low
     38  a4b4							; byte of the divisor, and 0 for the high byte.
     39  a4b4
     40  a4b4		       a2 00		      ldx	#$00
     41  a4b6		       a0 04		      ldy	#$04
     42  a4b8		       8e 01 9c 	      stx	UART_DIVISOR_MSB
     43  a4bb		       8c 00 9c 	      sty	UART_DIVISOR_LSB
     44  a4be
     45  a4be							; Set to MIDI: Word length 8, Stop bits 1, no parity (also hides divisor latch)
     46  a4be		       a9 03		      lda	#%00000011
     47  a4c0		       8d 03 9c 	      sta	UART_LCR
     48  a4c3
     49  a4c3							; Enable the interrupt when data is received
     50  a4c3		       a9 01		      lda	#%00000001
     51  a4c5		       8d 01 9c 	      sta	UART_IER
     52  a4c8		       60		      rts
     53  a4c9
     54  a4c9							; ----------------------------------------------------------------------------
     55  a4c9							; Set up the IRQ for reading bytes from the UART
     56  a4c9
     57  a4c9				   setupirq
     58  a4c9		       78		      sei
     59  a4ca
     60  a4ca							; Point to my interrupt vector
     61  a4ca		       a9 00		      lda	#<theirq
     62  a4cc		       8d 14 03 	      sta	$0314
     63  a4cf		       a9 00		      lda	#>theirq
     64  a4d1		       8d 15 03 	      sta	$0315
     65  a4d4
     66  a4d4							; Disable timer interrupts
     67  a4d4
     68  a4d4		       a9 60		      lda	#%01100000
     69  a4d6		       8d 2e 91 	      sta	$912e	; disable and acknowledge interrupts
     70  a4d9		       8d 2d 91 	      sta	$912d
     71  a4dc							;sta $911e	; disable NMIs (Restore key)
     72  a4dc
     73  a4dc		       58		      cli
     74  a4dd		       60		      rts
     75  a4de
     76  a4de							; ----------------------------------------------------------------------------
     77  a4de							; The IRQ.
     78  a4de
     79  a4de				   theirq
     80  a4de							; Fetch the received byte
     81  a4de		       ad 00 9c 	      lda	UART_RXTX	;get data
     82  a4e1		       a4 5c		      ldy	write_pointer
     83  a4e3		       99 00 12 	      sta	buffer,y
     84  a4e6		       e6 5c		      inc	write_pointer
     85  a4e8
     86  a4e8							; Clear the interrupt from the UART by reading the status register
     87  a4e8		       ad 02 9c 	      lda	UART_ISR
     88  a4eb
     89  a4eb		       4c 56 ff 	      jmp	$ff56	; Use this in place of rti because it restores the A,X,Y registers from the stack
     90  a4ee							;jmp $eabf	; return to normal IRQ	(scans keyboard and stuff)
     91  a4ee
     92  a4ee
     93  a4ee							; ----------------------------------------------------------------------------
     94  a4ee							; Handle the RESTORE key
     95  a4ee
     96  a4ee				   RESTORE
     97  a4ee		       4c c7 fe 	      jmp	$fec7	; Continue as if no cartridge installed
     98  a4f1
     99  a4f1
    100  a4f1							; ----------------------------------------------------------------------------
    101  a4f1							; Strings
    102  a4f1
    103  a4f1				   nouart
    104  a4f1		       2a 2a 75 61*	      .byte.b	"**uart NOT FOUND! ***"
    105  a506
    106  a506							; EOF!
------- FILE vicmidi.asm
------- FILE utils.asm LEVEL 2 PASS 1
      0  a506					      include	"utils.asm"
      1  a506							; VIC Version by Schema/AIC (Leif Bloomquist)
      2  a506							; Original by Six/Style (Oliver VieBrooks)
      3  a506
      4  a506							; Fast POKE of hex value to screen
      5  a506							; also see HEXPOKE macro
      6  a506							; print hex  char $ of number in a at location referenced by screen_temp
      7  a506
      8  a506				   hexstr
      9  a506		       a0 00		      ldy	#$00
     10  a508		       48		      pha
     11  a509		       29 f0		      and	#$f0
     12  a50b		       18		      clc
     13  a50c		       4a		      lsr
     14  a50d		       4a		      lsr
     15  a50e		       4a		      lsr
     16  a50f		       4a		      lsr
     17  a510		       aa		      tax
     18  a511		       bd 00 00 	      lda	hexstring,x
     19  a514		       91 22		      sta	($22),y
     20  a516
     21  a516		       c8		      iny
     22  a517		       68		      pla
     23  a518		       29 0f		      and	#$0f
     24  a51a		       aa		      tax
     25  a51b		       bd 00 00 	      lda	hexstring,x
     26  a51e		       91 22		      sta	($22),y
     27  a520		       60		      rts
     28  a521
     29  a521
     30  a521							; print hex  char $ of number in a    SLOW!
     31  a521		       00	   hexx       dc.b	$00
     32  a522
     33  a522				   printhexstr
     34  a522		       8e 21 a5 	      stx	hexx
     35  a525		       48		      pha
     36  a526		       29 f0		      and	#$f0
     37  a528		       18		      clc
     38  a529		       4a		      lsr
     39  a52a		       4a		      lsr
     40  a52b		       4a		      lsr
     41  a52c		       4a		      lsr
     42  a52d		       aa		      tax
     43  a52e		       bd 00 00 	      lda	hexstring,x
     44  a531		       20 d2 ff 	      jsr	$ffd2
     45  a534
     46  a534		       68		      pla
     47  a535		       29 0f		      and	#$0f
     48  a537		       aa		      tax
     49  a538		       bd 00 00 	      lda	hexstring,x
     50  a53b		       20 d2 ff 	      jsr	$ffd2
     51  a53e		       ae 21 a5 	      ldx	hexx
     52  a541		       60		      rts
     53  a542
     54  a542				   hexstring
     55  a542		       30 31 32 33*	      .byte.b	"0123456789ABCDEF"
     56  a552
     57  a552
     58  a552							; ==============================================================
     59  a552							; Most defaults are NTSC.  This code overrides for PAL.
     60  a552							; ==============================================================
     61  a552
     62  a552				   setup_pal
      0  a552					      PLOT	9,13
      1  a552		       a0 09		      ldy	#9
      2  a554		       a2 0d		      ldx	#13
      3  a556		       18		      clc
      4  a557		       20 0a e5 	      jsr	$E50A
     64  a55a
     65  a55a		       ad e4 ed 	      lda	$EDE4
     66  a55d		       c9 0c		      cmp	#$0C
     67  a55f		       f0 0c		      beq	DOPAL
     68  a561
     69  a561							; NTSC System detected
      0  a561					      PRINTSTRING	ntscstring
      1  a561		       a0 00		      ldy	#>ntscstring
      2  a563		       a9 00		      lda	#<ntscstring
      3  a565		       20 1e cb 	      jsr	STROUT
     71  a568		       a9 00		      lda	#$00
     72  a56a		       85 4a		      sta	bank
     73  a56c		       4c d8 a1 	      jmp	showbank	; There's an rts there
     74  a56f
     75  a56f							; PAL System detected, make changes
     76  a56f				   DOPAL
      0  a56f					      PRINTSTRING	palstring
      1  a56f		       a0 00		      ldy	#>palstring
      2  a571		       a9 00		      lda	#<palstring
      3  a573		       20 1e cb 	      jsr	STROUT
     78  a576		       a9 01		      lda	#$01
     79  a578		       85 4a		      sta	bank
     80  a57a		       4c d8 a1 	      jmp	showbank	; There's an rts there
     81  a57d
     82  a57d				   palstring
     83  a57d		       70 61 6c 00	      .byte.b	"pal",0
     84  a581
     85  a581				   ntscstring
     86  a581		       6e 74 73 63*	      .byte.b	"ntsc",0
     87  a586
     88  a586							; EOF!
------- FILE vicmidi.asm
------- FILE polymode.asm LEVEL 2 PASS 1
      0  a586					      include	"polymode.asm"
      1  a586
      2  a586							;***************************************************************************
      3  a586							;***************  Determine next Channel in Poly Mode (set Y) **************
      4  a586							;***************************************************************************
      5  a586				   get_poly_voice
      6  a586		       a0 00		      ldy	#$00
      7  a588
      8  a588				   get_poly_voice_loop
      9  a588		       b9 61 00 	      lda	poly_flags,y	; 0=not in use, 1=in use
     10  a58b		       f0 61		      beq	get_poly_voice_x
     11  a58d		       c8		      iny
     12  a58e		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     13  a590		       d0 f6		      bne	get_poly_voice_loop
     14  a592
     15  a592							; No free voices, ignore
     16  a592		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note On code
     17  a594		       60		      rts
     18  a595
     19  a595				   get_poly_voice_x
     20  a595		       a9 01		      lda	#$01
     21  a597		       99 61 00 	      sta	poly_flags,y
     22  a59a		       60		      rts
     23  a59b
     24  a59b
     25  a59b							;***************************************************************************
     26  a59b							;********  Determine Channel to turn off in Poly Mode (set Y) **************
     27  a59b							;***************************************************************************
     28  a59b				   get_poly_voice_off
     29  a59b
     30  a59b		       a0 00		      ldy	#$00
     31  a59d
     32  a59d				   get_poly_voice_off_loop
     33  a59d		       b9 61 00 	      lda	poly_flags,y	; Is the channel in use?
     34  a5a0		       f0 61		      beq	poly_next	; No, so skip it
     35  a5a2
     36  a5a2		       b9 69 00 	      lda	lastnote,y	; Get last note on this voice
     37  a5a5		       c5 fc		      cmp	mididata0	; Compare to note received
     38  a5a7		       f0 fc		      beq	get_poly_voice_off_x	; Matched!
     39  a5a9
     40  a5a9				   poly_next
     41  a5a9		       c8		      iny		; Next channel
     42  a5aa		       c0 04		      cpy	#$04	; Note that we're only checking the first 3 voices - n/a to noise voice.
     43  a5ac		       d0 ef		      bne	get_poly_voice_off_loop
     44  a5ae
     45  a5ae							; No match to the note to turn off, ignore
     46  a5ae		       a0 04		      ldy	#$04	; Invalid channel, will be ignored by Note Off code
     47  a5b0		       ee 0f 90 	      inc	screen_colors	; DEBUG
     48  a5b3		       60		      rts
     49  a5b4
     50  a5b4				   get_poly_voice_off_x
     51  a5b4		       a9 00		      lda	#$00
     52  a5b6		       99 61 00 	      sta	poly_flags,y
     53  a5b9		       60		      rts
     54  a5ba
------- FILE vicmidi.asm
------- FILE keyboard.asm LEVEL 2 PASS 1
      0  a5ba					      include	"keyboard.asm"
      1  a5ba							;*******************************************************************************************
      2  a5ba							;********************************  keyboard stuff  *****************************************
      3  a5ba							;*******************************************************************************************
      4  a5ba
      5  a5ba							; --------------------------------------------------------------------------------------------------
      6  a5ba							;;;;;;;;;;;;;;; keyboard stuff
      7  a5ba							;previous keyboard column bits
      8  a5ba		       00 4e	   c0	      =	$4E	; 2,4,6,8,(...)
      9  a5ba		       00 4f	   c1	      =	$4F	; q,e,t,u,(...)
     10  a5ba		       00 50	   c2	      =	$50	; w,r,y,i,p,(...)
     11  a5ba		       00 51	   c3	      =	$51	; 1,3,5,7,(...)
     12  a5ba
     13  a5ba		       91 20	   kb_column  =	$9120
     14  a5ba		       91 21	   kb_row     =	$9121
     15  a5ba
     16  a5ba							; 9121   9120: (Write column value to this address)
     17  a5ba							;
     18  a5ba							;	  7f	  bf	  df	  ef	  f7	  fb	  fd	  fe
     19  a5ba							;
     20  a5ba							;  fe	  2	  q	  CBM	  Space   RunStop Control Lft_arr 1
     21  a5ba							;  fd	  4	  e	  s	  z	  Shift_L a	  w	  3
     22  a5ba							;  fb	  6	  t	  f	  c	  x	  d	  r	  5
     23  a5ba							;  f7	  8	  u	  h	  b	  v	  g	  y	  7
     24  a5ba							;  ef	  0	  o	  k	  m	  n	  j	  i	  9
     25  a5ba							;  df	  -	  @	  :	  .	  ,	  l	  p	  +
     26  a5ba							;  bf	  Home	  Up_arr  =	  Shift_R /	  ;	  *	  GBP
     27  a5ba							;  7f	  F7	  F5	  F3	  F1	  Down	  Right   Return  Del
     28  a5ba
     29  a5ba				   GetKey
     30  a5ba		       78		      sei
     31  a5bb							; this should not be done, we want to compare the OLD recorded status with new one
     32  a5bb							;lda #$0
     33  a5bb							;sta kb_column
     34  a5bb							;lda kb_row
     35  a5bb							;cmp #$FF
     36  a5bb							;beq NoKey	 ; no key at all pressed
     37  a5bb
     38  a5bb				   Check7F
     39  a5bb							;now check for each column
     40  a5bb		       a9 7f		      lda	#$7F
     41  a5bd		       8d 20 91 	      sta	kb_column
     42  a5c0		       ad 21 91 	      lda	kb_row
     43  a5c3		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     44  a5c5		       c5 4e		      cmp	c0
     45  a5c7		       f0 4e		      beq	CheckBF	; these arent the droids you are looking for move along
     46  a5c9		       85 4e		      sta	c0
     47  a5cb		       8d 00 1e 	      sta	$1E00
     48  a5ce		       4c 00 00 	      jmp	KeyDone
     49  a5d1				   CheckBF
     50  a5d1							;now check for each column
     51  a5d1		       a9 bf		      lda	#$BF
     52  a5d3		       8d 20 91 	      sta	kb_column
     53  a5d6		       ad 21 91 	      lda	kb_row
     54  a5d9		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     55  a5db		       c5 4f		      cmp	c1
     56  a5dd		       f0 4f		      beq	CheckFD	; these arent the droids you are looking for move along
     57  a5df		       85 4f		      sta	c1
     58  a5e1		       8d 01 1e 	      sta	$1E01
     59  a5e4		       4c 00 00 	      jmp	KeyDone
     60  a5e7				   CheckFD
     61  a5e7							;now check for each column
     62  a5e7		       a9 fd		      lda	#$FD
     63  a5e9		       8d 20 91 	      sta	kb_column
     64  a5ec		       ad 21 91 	      lda	kb_row
     65  a5ef		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     66  a5f1		       c5 50		      cmp	c2
     67  a5f3		       f0 50		      beq	CheckFE	; these arent the droids you are looking for move along
     68  a5f5		       85 50		      sta	c2
     69  a5f7		       8d 02 1e 	      sta	$1E02
     70  a5fa		       4c 00 00 	      jmp	KeyDone
     71  a5fd				   CheckFE
     72  a5fd							;now check for each column
     73  a5fd		       a9 fe		      lda	#$FE
     74  a5ff		       8d 20 91 	      sta	kb_column
     75  a602		       ad 21 91 	      lda	kb_row
     76  a605		       49 ff		      eor	#$FF	; inversed accumulator contains all bits in this column
     77  a607		       c5 51		      cmp	c3
     78  a609		       f0 51		      beq	KeyDone	; these arent the droids you are looking for move along
     79  a60b		       85 51		      sta	c3
     80  a60d		       8d 03 1e 	      sta	$1E03
     81  a610				   KeyDone
     82  a610		       58		      cli
     83  a611		       60		      rts
     84  a612
     85  a612							; ---------------------------------------------------------------------------
     86  a612
     87  a612				   setchars
     88  a612		       a2 00		      ldx	#$00
     89  a614		       a9 51		      lda	#$51
     90  a616				   setcharsloop1
     91  a616		       9d 00 1e 	      sta	$1E00,x
     92  a619		       e8		      inx
     93  a61a		       e0 00		      cpx	#$00
     94  a61c		       d0 f8		      bne	setcharsloop1
     95  a61e		       a2 00		      ldx	#$00
     96  a620		       a9 66		      lda	#$66
     97  a622				   setcharsloop2
     98  a622		       9d 00 1f 	      sta	$1F00,x
     99  a625		       e8		      inx
    100  a626		       e0 00		      cpx	#$00
    101  a628		       d0 f8		      bne	setcharsloop2
    102  a62a		       60		      rts
------- FILE vicmidi.asm
    690  a62b				   setwaveorg
------- FILE setwave.asm LEVEL 2 PASS 1
      0  a62b					      include	"setwave.asm"
      1  a62b							;A short generic routine for setting any shift register value for any pulse
      2  a62b							;channel in about 150 cpu clocks. Use it freely.
      3  a62b
      4  a62b							; USAGE: y = channel ($0a..$0c)
      5  a62b							;	  x = initial frequency
      6  a62b							;	  a = shift register contents
      7  a62b							;
      8  a62b							; WARNING for purists: self-modifying code, illegal opcodes.
      9  a62b							;
     10  a62b							; code align assertion: make sure that the loop is within a page.
     11  a62b							; oscillator assertion: make sure that the channel has been at $7e
     12  a62b							; for some time before calling this function.
     13  a62b							; put TMP and TMP2 in the zero page.
     14  a62b
     15  a62b		       8e 00 00 	      stx	initfreq	; 4
     16  a62e
     17  a62e		       8c 00 00 	      sty	ch0	; 4
     18  a631		       8c 00 00 	      sty	ch1	; 4
     19  a634		       be f6 ff 	      ldx	ldfqmasks-$a,y	; 4
     20  a637		       85 57		      sta	TMP	; 3
     21  a639
     22  a639		       09 7f		      ora	#$7f	; 2
     23  a63b
     24  a63b		       8f 0c 90 	      .byte.b	$8f,$0C,$90	; axs $900c  ; 4  [$900c] = a AND x	     *ILLEGAL OPCODE*
     25  a63e
     26  a63e		       a6 3c	   ch0	      =	*-2
     27  a63e		       84 58		      sty	TMP2	; 3
     28  a640		       a0 07		      ldy	#7	; 2
     29  a642
     30  a642				   l0
     31  a642		       a9 7f		      lda	#$7f	; 2
     32  a644		       07 57		      .byte.b	$07,TMP	; aso TMP		 ; 5  asl tmp; a = [tmp] OR $7f  *ILLEGAL OPCODE*
     33  a646		       8f 0c 90 	      .byte.b	$8F,$0C,$90	; axs $900c	 ; 4  [$900c] = a AND x	  *ILLEGAL OPCODE*
     34  a646		       a6 47	   ch1	      =	*-2
     35  a649		       88		      dey		; 2
     36  a64a		       d0 f6		      bne	l0	; 3
     37  a64c
     38  a64c		       a9 80		      lda	#128	; 2
     39  a64c		       a6 4d	   initfreq   =	*-1
     40  a64e		       ea		      nop		; 2
     41  a64f		       a4 58		      ldy	TMP2	; 3
     42  a651				   noset
     43  a651		       99 00 90 	      sta	$9000,y	; 5
     44  a654
     45  a654		       60		      rts		; 6	total clocks 11+4+3+2+16*7+16+6 eq 154
     46  a655
     47  a655				   ldfqmasks
     48  a655		       fe		      .byte.b	$fe	; $900a - 1 x 16 clocks/bit
     49  a656		       fd		      .byte.b	$fd	; $900b - 2 x	8 clocks/bit
     50  a657		       fb		      .byte.b	$fb	; $900c - 4 x	4 clocks/bit
     51  a658
     52  a658
     53  a658				   viznutwaveforms
     54  a658		       00		      .byte.b	0	; MIDI Program #1	default  0000000011111111
     55  a659		       02		      .byte.b	2	; MIDI Program #2	"10"	 0000001011111101
     56  a65a		       04		      .byte.b	4	; MIDI Program #3	"100"	 0000010011111011
     57  a65b		       06		      .byte.b	6	; MIDI Program #4	"110"	 0000011011111001
     58  a65c		       08		      .byte.b	8	; MIDI Program #5	"1000"	 0000100011110111
     59  a65d		       0a		      .byte.b	10	; MIDI Program #6	"1010"	 0000101011110101
     60  a65e		       0b		      .byte.b	11	; MIDI Program #7	"1011"	 0000110011110011
     61  a65f		       0e		      .byte.b	14	; MIDI Program #8	"1110"	 0000111011110001
     62  a660		       12		      .byte.b	18	; MIDI Program #9	"10010"  0001001011101101
     63  a661		       14		      .byte.b	20	; MIDI Program #10	"10100"  0001010011101011
     64  a662		       16		      .byte.b	22	; MIDI Program #11	"10110"  0001011011101001
     65  a663		       18		      .byte.b	24	; MIDI Program #12	"11000"  0001100011100111
     66  a664		       1a		      .byte.b	26	; MIDI Program #13	"11010"  0001101011100101
     67  a665		       24		      .byte.b	36	; MIDI Program #14	"100100" 0010010011011011
     68  a666		       2a		      .byte.b	42	; MIDI Program #15	"101010" 0010101011010101
     69  a667		       2c		      .byte.b	44	; MIDI Program #16	"101100" 0010110011010011
------- FILE vicmidi.asm
    692  a668
------- FILE lookup-ntsc.asm LEVEL 2 PASS 1
      0  a668					      include	"lookup-ntsc.asm"
      1  a668							; --------------------------------------------------------------------------------------------------
      2  a668							; Note Lookups NTSC - 128 bytes each, map MIDI Note# to a VIC register value
      3  a668							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a668
      5  a668				   voice1lookup_ntsc
      6  a668		       00		      byte.b	0
      7  a669		       00		      byte.b	0
      8  a66a		       00		      byte.b	0
      9  a66b		       00		      byte.b	0
     10  a66c		       00		      byte.b	0
     11  a66d		       00		      byte.b	0
     12  a66e		       00		      byte.b	0
     13  a66f		       00		      byte.b	0
     14  a670		       00		      byte.b	0
     15  a671		       00		      byte.b	0
     16  a672		       00		      byte.b	0
     17  a673		       00		      byte.b	0
     18  a674		       00		      byte.b	0
     19  a675		       00		      byte.b	0
     20  a676		       00		      byte.b	0
     21  a677		       00		      byte.b	0
     22  a678		       00		      byte.b	0
     23  a679		       00		      byte.b	0
     24  a67a		       00		      byte.b	0
     25  a67b		       00		      byte.b	0
     26  a67c		       00		      byte.b	0
     27  a67d		       00		      byte.b	0
     28  a67e		       00		      byte.b	0
     29  a67f		       00		      byte.b	0
     30  a680		       85		      byte.b	133
     31  a681		       8c		      byte.b	140
     32  a682		       92		      byte.b	146
     33  a683		       98		      byte.b	152
     34  a684		       9e		      byte.b	158
     35  a685		       a3		      byte.b	163
     36  a686		       a9		      byte.b	169
     37  a687		       ad		      byte.b	173
     38  a688		       b2		      byte.b	178
     39  a689		       b6		      byte.b	182
     40  a68a		       ba		      byte.b	186
     41  a68b		       be		      byte.b	190
     42  a68c		       c2		      byte.b	194
     43  a68d		       c5		      byte.b	197
     44  a68e		       c9		      byte.b	201
     45  a68f		       cc		      byte.b	204
     46  a690		       cf		      byte.b	207
     47  a691		       d1		      byte.b	209
     48  a692		       d4		      byte.b	212
     49  a693		       d6		      byte.b	214
     50  a694		       d9		      byte.b	217
     51  a695		       db		      byte.b	219
     52  a696		       dd		      byte.b	221
     53  a697		       df		      byte.b	223
     54  a698		       e0		      byte.b	224
     55  a699		       e2		      byte.b	226
     56  a69a		       e4		      byte.b	228
     57  a69b		       e5		      byte.b	229
     58  a69c		       e7		      byte.b	231
     59  a69d		       e8		      byte.b	232
     60  a69e		       e9		      byte.b	233
     61  a69f		       eb		      byte.b	235
     62  a6a0		       ec		      byte.b	236
     63  a6a1		       ed		      byte.b	237
     64  a6a2		       ee		      byte.b	238
     65  a6a3		       ef		      byte.b	239
     66  a6a4		       f0		      byte.b	240
     67  a6a5		       00		      byte.b	0
     68  a6a6		       00		      byte.b	0
     69  a6a7		       00		      byte.b	0
     70  a6a8		       00		      byte.b	0
     71  a6a9		       00		      byte.b	0
     72  a6aa		       00		      byte.b	0
     73  a6ab		       00		      byte.b	0
     74  a6ac		       00		      byte.b	0
     75  a6ad		       00		      byte.b	0
     76  a6ae		       00		      byte.b	0
     77  a6af		       00		      byte.b	0
     78  a6b0		       00		      byte.b	0
     79  a6b1		       00		      byte.b	0
     80  a6b2		       00		      byte.b	0
     81  a6b3		       00		      byte.b	0
     82  a6b4		       00		      byte.b	0
     83  a6b5		       00		      byte.b	0
     84  a6b6		       00		      byte.b	0
     85  a6b7		       00		      byte.b	0
     86  a6b8		       00		      byte.b	0
     87  a6b9		       00		      byte.b	0
     88  a6ba		       00		      byte.b	0
     89  a6bb		       00		      byte.b	0
     90  a6bc		       00		      byte.b	0
     91  a6bd		       00		      byte.b	0
     92  a6be		       00		      byte.b	0
     93  a6bf		       00		      byte.b	0
     94  a6c0		       00		      byte.b	0
     95  a6c1		       00		      byte.b	0
     96  a6c2		       00		      byte.b	0
     97  a6c3		       00		      byte.b	0
     98  a6c4		       00		      byte.b	0
     99  a6c5		       00		      byte.b	0
    100  a6c6		       00		      byte.b	0
    101  a6c7		       00		      byte.b	0
    102  a6c8		       00		      byte.b	0
    103  a6c9		       00		      byte.b	0
    104  a6ca		       00		      byte.b	0
    105  a6cb		       00		      byte.b	0
    106  a6cc		       00		      byte.b	0
    107  a6cd		       00		      byte.b	0
    108  a6ce		       00		      byte.b	0
    109  a6cf		       00		      byte.b	0
    110  a6d0		       00		      byte.b	0
    111  a6d1		       00		      byte.b	0
    112  a6d2		       00		      byte.b	0
    113  a6d3		       00		      byte.b	0
    114  a6d4		       00		      byte.b	0
    115  a6d5		       00		      byte.b	0
    116  a6d6		       00		      byte.b	0
    117  a6d7		       00		      byte.b	0
    118  a6d8		       00		      byte.b	0
    119  a6d9		       00		      byte.b	0
    120  a6da		       00		      byte.b	0
    121  a6db		       00		      byte.b	0
    122  a6dc		       00		      byte.b	0
    123  a6dd		       00		      byte.b	0
    124  a6de		       00		      byte.b	0
    125  a6df		       00		      byte.b	0
    126  a6e0		       00		      byte.b	0
    127  a6e1		       00		      byte.b	0
    128  a6e2		       00		      byte.b	0
    129  a6e3		       00		      byte.b	0
    130  a6e4		       00		      byte.b	0
    131  a6e5		       00		      byte.b	0
    132  a6e6		       00		      byte.b	0
    133  a6e7		       00		      byte.b	0
    134  a6e8
    135  a6e8				   voice2lookup_ntsc
    136  a6e8		       00		      byte.b	0
    137  a6e9		       00		      byte.b	0
    138  a6ea		       00		      byte.b	0
    139  a6eb		       00		      byte.b	0
    140  a6ec		       00		      byte.b	0
    141  a6ed		       00		      byte.b	0
    142  a6ee		       00		      byte.b	0
    143  a6ef		       00		      byte.b	0
    144  a6f0		       00		      byte.b	0
    145  a6f1		       00		      byte.b	0
    146  a6f2		       00		      byte.b	0
    147  a6f3		       00		      byte.b	0
    148  a6f4		       00		      byte.b	0
    149  a6f5		       00		      byte.b	0
    150  a6f6		       00		      byte.b	0
    151  a6f7		       00		      byte.b	0
    152  a6f8		       00		      byte.b	0
    153  a6f9		       00		      byte.b	0
    154  a6fa		       00		      byte.b	0
    155  a6fb		       00		      byte.b	0
    156  a6fc		       00		      byte.b	0
    157  a6fd		       00		      byte.b	0
    158  a6fe		       00		      byte.b	0
    159  a6ff		       00		      byte.b	0
    160  a700		       00		      byte.b	0
    161  a701		       00		      byte.b	0
    162  a702		       00		      byte.b	0
    163  a703		       00		      byte.b	0
    164  a704		       00		      byte.b	0
    165  a705		       00		      byte.b	0
    166  a706		       00		      byte.b	0
    167  a707		       00		      byte.b	0
    168  a708		       00		      byte.b	0
    169  a709		       00		      byte.b	0
    170  a70a		       00		      byte.b	0
    171  a70b		       00		      byte.b	0
    172  a70c		       85		      byte.b	133
    173  a70d		       8c		      byte.b	140
    174  a70e		       92		      byte.b	146
    175  a70f		       98		      byte.b	152
    176  a710		       9e		      byte.b	158
    177  a711		       a3		      byte.b	163
    178  a712		       a9		      byte.b	169
    179  a713		       ad		      byte.b	173
    180  a714		       b2		      byte.b	178
    181  a715		       b6		      byte.b	182
    182  a716		       ba		      byte.b	186
    183  a717		       be		      byte.b	190
    184  a718		       c2		      byte.b	194
    185  a719		       c5		      byte.b	197
    186  a71a		       c9		      byte.b	201
    187  a71b		       cc		      byte.b	204
    188  a71c		       cf		      byte.b	207
    189  a71d		       d1		      byte.b	209
    190  a71e		       d4		      byte.b	212
    191  a71f		       d6		      byte.b	214
    192  a720		       d9		      byte.b	217
    193  a721		       db		      byte.b	219
    194  a722		       dd		      byte.b	221
    195  a723		       df		      byte.b	223
    196  a724		       e0		      byte.b	224
    197  a725		       e2		      byte.b	226
    198  a726		       e4		      byte.b	228
    199  a727		       e5		      byte.b	229
    200  a728		       e7		      byte.b	231
    201  a729		       e8		      byte.b	232
    202  a72a		       e9		      byte.b	233
    203  a72b		       eb		      byte.b	235
    204  a72c		       ec		      byte.b	236
    205  a72d		       ed		      byte.b	237
    206  a72e		       ee		      byte.b	238
    207  a72f		       ef		      byte.b	239
    208  a730		       f0		      byte.b	240
    209  a731		       00		      byte.b	0
    210  a732		       00		      byte.b	0
    211  a733		       00		      byte.b	0
    212  a734		       00		      byte.b	0
    213  a735		       00		      byte.b	0
    214  a736		       00		      byte.b	0
    215  a737		       00		      byte.b	0
    216  a738		       00		      byte.b	0
    217  a739		       00		      byte.b	0
    218  a73a		       00		      byte.b	0
    219  a73b		       00		      byte.b	0
    220  a73c		       00		      byte.b	0
    221  a73d		       00		      byte.b	0
    222  a73e		       00		      byte.b	0
    223  a73f		       00		      byte.b	0
    224  a740		       00		      byte.b	0
    225  a741		       00		      byte.b	0
    226  a742		       00		      byte.b	0
    227  a743		       00		      byte.b	0
    228  a744		       00		      byte.b	0
    229  a745		       00		      byte.b	0
    230  a746		       00		      byte.b	0
    231  a747		       00		      byte.b	0
    232  a748		       00		      byte.b	0
    233  a749		       00		      byte.b	0
    234  a74a		       00		      byte.b	0
    235  a74b		       00		      byte.b	0
    236  a74c		       00		      byte.b	0
    237  a74d		       00		      byte.b	0
    238  a74e		       00		      byte.b	0
    239  a74f		       00		      byte.b	0
    240  a750		       00		      byte.b	0
    241  a751		       00		      byte.b	0
    242  a752		       00		      byte.b	0
    243  a753		       00		      byte.b	0
    244  a754		       00		      byte.b	0
    245  a755		       00		      byte.b	0
    246  a756		       00		      byte.b	0
    247  a757		       00		      byte.b	0
    248  a758		       00		      byte.b	0
    249  a759		       00		      byte.b	0
    250  a75a		       00		      byte.b	0
    251  a75b		       00		      byte.b	0
    252  a75c		       00		      byte.b	0
    253  a75d		       00		      byte.b	0
    254  a75e		       00		      byte.b	0
    255  a75f		       00		      byte.b	0
    256  a760		       00		      byte.b	0
    257  a761		       00		      byte.b	0
    258  a762		       00		      byte.b	0
    259  a763		       00		      byte.b	0
    260  a764		       00		      byte.b	0
    261  a765		       00		      byte.b	0
    262  a766		       00		      byte.b	0
    263  a767		       00		      byte.b	0
    264  a768
    265  a768				   voice3lookup_ntsc
    266  a768		       00		      byte.b	0
    267  a769		       00		      byte.b	0
    268  a76a		       00		      byte.b	0
    269  a76b		       00		      byte.b	0
    270  a76c		       00		      byte.b	0
    271  a76d		       00		      byte.b	0
    272  a76e		       00		      byte.b	0
    273  a76f		       00		      byte.b	0
    274  a770		       00		      byte.b	0
    275  a771		       00		      byte.b	0
    276  a772		       00		      byte.b	0
    277  a773		       00		      byte.b	0
    278  a774		       00		      byte.b	0
    279  a775		       00		      byte.b	0
    280  a776		       00		      byte.b	0
    281  a777		       00		      byte.b	0
    282  a778		       00		      byte.b	0
    283  a779		       00		      byte.b	0
    284  a77a		       00		      byte.b	0
    285  a77b		       00		      byte.b	0
    286  a77c		       00		      byte.b	0
    287  a77d		       00		      byte.b	0
    288  a77e		       00		      byte.b	0
    289  a77f		       00		      byte.b	0
    290  a780		       00		      byte.b	0
    291  a781		       00		      byte.b	0
    292  a782		       00		      byte.b	0
    293  a783		       00		      byte.b	0
    294  a784		       00		      byte.b	0
    295  a785		       00		      byte.b	0
    296  a786		       00		      byte.b	0
    297  a787		       00		      byte.b	0
    298  a788		       00		      byte.b	0
    299  a789		       00		      byte.b	0
    300  a78a		       00		      byte.b	0
    301  a78b		       00		      byte.b	0
    302  a78c		       00		      byte.b	0
    303  a78d		       00		      byte.b	0
    304  a78e		       00		      byte.b	0
    305  a78f		       00		      byte.b	0
    306  a790		       00		      byte.b	0
    307  a791		       00		      byte.b	0
    308  a792		       00		      byte.b	0
    309  a793		       00		      byte.b	0
    310  a794		       00		      byte.b	0
    311  a795		       00		      byte.b	0
    312  a796		       00		      byte.b	0
    313  a797		       00		      byte.b	0
    314  a798		       85		      byte.b	133
    315  a799		       8c		      byte.b	140
    316  a79a		       92		      byte.b	146
    317  a79b		       98		      byte.b	152
    318  a79c		       9e		      byte.b	158
    319  a79d		       a3		      byte.b	163
    320  a79e		       a9		      byte.b	169
    321  a79f		       ad		      byte.b	173
    322  a7a0		       b2		      byte.b	178
    323  a7a1		       b6		      byte.b	182
    324  a7a2		       ba		      byte.b	186
    325  a7a3		       be		      byte.b	190
    326  a7a4		       c2		      byte.b	194
    327  a7a5		       c5		      byte.b	197
    328  a7a6		       c9		      byte.b	201
    329  a7a7		       cc		      byte.b	204
    330  a7a8		       cf		      byte.b	207
    331  a7a9		       d1		      byte.b	209
    332  a7aa		       d4		      byte.b	212
    333  a7ab		       d6		      byte.b	214
    334  a7ac		       d9		      byte.b	217
    335  a7ad		       db		      byte.b	219
    336  a7ae		       dd		      byte.b	221
    337  a7af		       df		      byte.b	223
    338  a7b0		       e0		      byte.b	224
    339  a7b1		       e2		      byte.b	226
    340  a7b2		       e4		      byte.b	228
    341  a7b3		       e5		      byte.b	229
    342  a7b4		       e7		      byte.b	231
    343  a7b5		       e8		      byte.b	232
    344  a7b6		       e9		      byte.b	233
    345  a7b7		       eb		      byte.b	235
    346  a7b8		       ec		      byte.b	236
    347  a7b9		       ed		      byte.b	237
    348  a7ba		       ee		      byte.b	238
    349  a7bb		       ef		      byte.b	239
    350  a7bc		       f0		      byte.b	240
    351  a7bd		       00		      byte.b	0
    352  a7be		       00		      byte.b	0
    353  a7bf		       00		      byte.b	0
    354  a7c0		       00		      byte.b	0
    355  a7c1		       00		      byte.b	0
    356  a7c2		       00		      byte.b	0
    357  a7c3		       00		      byte.b	0
    358  a7c4		       00		      byte.b	0
    359  a7c5		       00		      byte.b	0
    360  a7c6		       00		      byte.b	0
    361  a7c7		       00		      byte.b	0
    362  a7c8		       00		      byte.b	0
    363  a7c9		       00		      byte.b	0
    364  a7ca		       00		      byte.b	0
    365  a7cb		       00		      byte.b	0
    366  a7cc		       00		      byte.b	0
    367  a7cd		       00		      byte.b	0
    368  a7ce		       00		      byte.b	0
    369  a7cf		       00		      byte.b	0
    370  a7d0		       00		      byte.b	0
    371  a7d1		       00		      byte.b	0
    372  a7d2		       00		      byte.b	0
    373  a7d3		       00		      byte.b	0
    374  a7d4		       00		      byte.b	0
    375  a7d5		       00		      byte.b	0
    376  a7d6		       00		      byte.b	0
    377  a7d7		       00		      byte.b	0
    378  a7d8		       00		      byte.b	0
    379  a7d9		       00		      byte.b	0
    380  a7da		       00		      byte.b	0
    381  a7db		       00		      byte.b	0
    382  a7dc		       00		      byte.b	0
    383  a7dd		       00		      byte.b	0
    384  a7de		       00		      byte.b	0
    385  a7df		       00		      byte.b	0
    386  a7e0		       00		      byte.b	0
    387  a7e1		       00		      byte.b	0
    388  a7e2		       00		      byte.b	0
    389  a7e3		       00		      byte.b	0
    390  a7e4		       00		      byte.b	0
    391  a7e5		       00		      byte.b	0
    392  a7e6		       00		      byte.b	0
    393  a7e7		       00		      byte.b	0
    394  a7e8
    395  a7e8
    396  a7e8				   voice4lookup_ntsc
    397  a7e8		       00		      byte.b	0
    398  a7e9		       00		      byte.b	0
    399  a7ea		       00		      byte.b	0
    400  a7eb		       00		      byte.b	0
    401  a7ec		       00		      byte.b	0
    402  a7ed		       00		      byte.b	0
    403  a7ee		       00		      byte.b	0
    404  a7ef		       00		      byte.b	0
    405  a7f0		       00		      byte.b	0
    406  a7f1		       00		      byte.b	0
    407  a7f2		       00		      byte.b	0
    408  a7f3		       00		      byte.b	0
    409  a7f4		       00		      byte.b	0
    410  a7f5		       00		      byte.b	0
    411  a7f6		       00		      byte.b	0
    412  a7f7		       00		      byte.b	0
    413  a7f8		       00		      byte.b	0
    414  a7f9		       00		      byte.b	0
    415  a7fa		       00		      byte.b	0
    416  a7fb		       00		      byte.b	0
    417  a7fc		       00		      byte.b	0
    418  a7fd		       00		      byte.b	0
    419  a7fe		       00		      byte.b	0
    420  a7ff		       00		      byte.b	0
    421  a800		       00		      byte.b	0
    422  a801		       00		      byte.b	0
    423  a802		       00		      byte.b	0
    424  a803		       00		      byte.b	0
    425  a804		       00		      byte.b	0
    426  a805		       00		      byte.b	0
    427  a806		       00		      byte.b	0
    428  a807		       00		      byte.b	0
    429  a808		       00		      byte.b	0
    430  a809		       00		      byte.b	0
    431  a80a		       00		      byte.b	0
    432  a80b		       00		      byte.b	0
    433  a80c		       85		      byte.b	133
    434  a80d		       8c		      byte.b	140
    435  a80e		       92		      byte.b	146
    436  a80f		       98		      byte.b	152
    437  a810		       9e		      byte.b	158
    438  a811		       a3		      byte.b	163
    439  a812		       a9		      byte.b	169
    440  a813		       ad		      byte.b	173
    441  a814		       b2		      byte.b	178
    442  a815		       b6		      byte.b	182
    443  a816		       ba		      byte.b	186
    444  a817		       be		      byte.b	190
    445  a818		       c2		      byte.b	194
    446  a819		       c5		      byte.b	197
    447  a81a		       c9		      byte.b	201
    448  a81b		       cc		      byte.b	204
    449  a81c		       cf		      byte.b	207
    450  a81d		       d1		      byte.b	209
    451  a81e		       d4		      byte.b	212
    452  a81f		       d6		      byte.b	214
    453  a820		       d9		      byte.b	217
    454  a821		       db		      byte.b	219
    455  a822		       dd		      byte.b	221
    456  a823		       df		      byte.b	223
    457  a824		       e0		      byte.b	224
    458  a825		       e2		      byte.b	226
    459  a826		       e4		      byte.b	228
    460  a827		       e5		      byte.b	229
    461  a828		       e7		      byte.b	231
    462  a829		       e8		      byte.b	232
    463  a82a		       e9		      byte.b	233
    464  a82b		       eb		      byte.b	235
    465  a82c		       ec		      byte.b	236
    466  a82d		       ed		      byte.b	237
    467  a82e		       ee		      byte.b	238
    468  a82f		       ef		      byte.b	239
    469  a830		       f0		      byte.b	240
    470  a831		       00		      byte.b	0
    471  a832		       00		      byte.b	0
    472  a833		       00		      byte.b	0
    473  a834		       00		      byte.b	0
    474  a835		       00		      byte.b	0
    475  a836		       00		      byte.b	0
    476  a837		       00		      byte.b	0
    477  a838		       00		      byte.b	0
    478  a839		       00		      byte.b	0
    479  a83a		       00		      byte.b	0
    480  a83b		       00		      byte.b	0
    481  a83c		       00		      byte.b	0
    482  a83d		       00		      byte.b	0
    483  a83e		       00		      byte.b	0
    484  a83f		       00		      byte.b	0
    485  a840		       00		      byte.b	0
    486  a841		       00		      byte.b	0
    487  a842		       00		      byte.b	0
    488  a843		       00		      byte.b	0
    489  a844		       00		      byte.b	0
    490  a845		       00		      byte.b	0
    491  a846		       00		      byte.b	0
    492  a847		       00		      byte.b	0
    493  a848		       00		      byte.b	0
    494  a849		       00		      byte.b	0
    495  a84a		       00		      byte.b	0
    496  a84b		       00		      byte.b	0
    497  a84c		       00		      byte.b	0
    498  a84d		       00		      byte.b	0
    499  a84e		       00		      byte.b	0
    500  a84f		       00		      byte.b	0
    501  a850		       00		      byte.b	0
    502  a851		       00		      byte.b	0
    503  a852		       00		      byte.b	0
    504  a853		       00		      byte.b	0
    505  a854		       00		      byte.b	0
    506  a855		       00		      byte.b	0
    507  a856		       00		      byte.b	0
    508  a857		       00		      byte.b	0
    509  a858		       00		      byte.b	0
    510  a859		       00		      byte.b	0
    511  a85a		       00		      byte.b	0
    512  a85b		       00		      byte.b	0
    513  a85c		       00		      byte.b	0
    514  a85d		       00		      byte.b	0
    515  a85e		       00		      byte.b	0
    516  a85f		       00		      byte.b	0
    517  a860		       00		      byte.b	0
    518  a861		       00		      byte.b	0
    519  a862		       00		      byte.b	0
    520  a863		       00		      byte.b	0
    521  a864		       00		      byte.b	0
    522  a865		       00		      byte.b	0
    523  a866		       00		      byte.b	0
    524  a867		       00		      byte.b	0
    525  a868
    526  a868							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-pal.asm LEVEL 2 PASS 1
      0  a868					      include	"lookup-pal.asm"
      1  a868							; --------------------------------------------------------------------------------------------------
      2  a868							; Note Lookups PAL - 128 bytes each, map MIDI Note# to a VIC register value
      3  a868							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  a868
      5  a868				   voice1lookup_pal
      6  a868		       00		      byte.b	0
      7  a869		       00		      byte.b	0
      8  a86a		       00		      byte.b	0
      9  a86b		       00		      byte.b	0
     10  a86c		       00		      byte.b	0
     11  a86d		       00		      byte.b	0
     12  a86e		       00		      byte.b	0
     13  a86f		       00		      byte.b	0
     14  a870		       00		      byte.b	0
     15  a871		       00		      byte.b	0
     16  a872		       00		      byte.b	0
     17  a873		       00		      byte.b	0
     18  a874		       00		      byte.b	0
     19  a875		       00		      byte.b	0
     20  a876		       00		      byte.b	0
     21  a877		       00		      byte.b	0
     22  a878		       00		      byte.b	0
     23  a879		       00		      byte.b	0
     24  a87a		       00		      byte.b	0
     25  a87b		       00		      byte.b	0
     26  a87c		       00		      byte.b	0
     27  a87d		       00		      byte.b	0
     28  a87e		       00		      byte.b	0
     29  a87f		       00		      byte.b	0
     30  a880		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
     31  a881		       82		      byte.b	130
     32  a882		       89		      byte.b	137
     33  a883		       90		      byte.b	144
     34  a884		       96		      byte.b	150
     35  a885		       9c		      byte.b	156
     36  a886		       a1		      byte.b	161
     37  a887		       a7		      byte.b	167
     38  a888		       ac		      byte.b	172
     39  a889		       b0		      byte.b	176
     40  a88a		       b5		      byte.b	181
     41  a88b		       b9		      byte.b	185
     42  a88c		       bd		      byte.b	189
     43  a88d		       c1		      byte.b	193
     44  a88e		       c4		      byte.b	196
     45  a88f		       c7		      byte.b	199
     46  a890		       ca		      byte.b	202
     47  a891		       cd		      byte.b	205
     48  a892		       d0		      byte.b	208
     49  a893		       d3		      byte.b	211
     50  a894		       d5		      byte.b	213
     51  a895		       d8		      byte.b	216
     52  a896		       da		      byte.b	218
     53  a897		       dc		      byte.b	220
     54  a898		       de		      byte.b	222
     55  a899		       e0		      byte.b	224
     56  a89a		       e2		      byte.b	226
     57  a89b		       e3		      byte.b	227
     58  a89c		       e5		      byte.b	229
     59  a89d		       e6		      byte.b	230
     60  a89e		       e8		      byte.b	232
     61  a89f		       e9		      byte.b	233
     62  a8a0		       ea		      byte.b	234
     63  a8a1		       eb		      byte.b	235
     64  a8a2		       ec		      byte.b	236
     65  a8a3		       ed		      byte.b	237
     66  a8a4		       ee		      byte.b	238
     67  a8a5		       00		      byte.b	0
     68  a8a6		       00		      byte.b	0
     69  a8a7		       00		      byte.b	0
     70  a8a8		       00		      byte.b	0
     71  a8a9		       00		      byte.b	0
     72  a8aa		       00		      byte.b	0
     73  a8ab		       00		      byte.b	0
     74  a8ac		       00		      byte.b	0
     75  a8ad		       00		      byte.b	0
     76  a8ae		       00		      byte.b	0
     77  a8af		       00		      byte.b	0
     78  a8b0		       00		      byte.b	0
     79  a8b1		       00		      byte.b	0
     80  a8b2		       00		      byte.b	0
     81  a8b3		       00		      byte.b	0
     82  a8b4		       00		      byte.b	0
     83  a8b5		       00		      byte.b	0
     84  a8b6		       00		      byte.b	0
     85  a8b7		       00		      byte.b	0
     86  a8b8		       00		      byte.b	0
     87  a8b9		       00		      byte.b	0
     88  a8ba		       00		      byte.b	0
     89  a8bb		       00		      byte.b	0
     90  a8bc		       00		      byte.b	0
     91  a8bd		       00		      byte.b	0
     92  a8be		       00		      byte.b	0
     93  a8bf		       00		      byte.b	0
     94  a8c0		       00		      byte.b	0
     95  a8c1		       00		      byte.b	0
     96  a8c2		       00		      byte.b	0
     97  a8c3		       00		      byte.b	0
     98  a8c4		       00		      byte.b	0
     99  a8c5		       00		      byte.b	0
    100  a8c6		       00		      byte.b	0
    101  a8c7		       00		      byte.b	0
    102  a8c8		       00		      byte.b	0
    103  a8c9		       00		      byte.b	0
    104  a8ca		       00		      byte.b	0
    105  a8cb		       00		      byte.b	0
    106  a8cc		       00		      byte.b	0
    107  a8cd		       00		      byte.b	0
    108  a8ce		       00		      byte.b	0
    109  a8cf		       00		      byte.b	0
    110  a8d0		       00		      byte.b	0
    111  a8d1		       00		      byte.b	0
    112  a8d2		       00		      byte.b	0
    113  a8d3		       00		      byte.b	0
    114  a8d4		       00		      byte.b	0
    115  a8d5		       00		      byte.b	0
    116  a8d6		       00		      byte.b	0
    117  a8d7		       00		      byte.b	0
    118  a8d8		       00		      byte.b	0
    119  a8d9		       00		      byte.b	0
    120  a8da		       00		      byte.b	0
    121  a8db		       00		      byte.b	0
    122  a8dc		       00		      byte.b	0
    123  a8dd		       00		      byte.b	0
    124  a8de		       00		      byte.b	0
    125  a8df		       00		      byte.b	0
    126  a8e0		       00		      byte.b	0
    127  a8e1		       00		      byte.b	0
    128  a8e2		       00		      byte.b	0
    129  a8e3		       00		      byte.b	0
    130  a8e4		       00		      byte.b	0
    131  a8e5		       00		      byte.b	0
    132  a8e6		       00		      byte.b	0
    133  a8e7		       00		      byte.b	0
    134  a8e8
    135  a8e8				   voice2lookup_pal
    136  a8e8		       00		      byte.b	0
    137  a8e9		       00		      byte.b	0
    138  a8ea		       00		      byte.b	0
    139  a8eb		       00		      byte.b	0
    140  a8ec		       00		      byte.b	0
    141  a8ed		       00		      byte.b	0
    142  a8ee		       00		      byte.b	0
    143  a8ef		       00		      byte.b	0
    144  a8f0		       00		      byte.b	0
    145  a8f1		       00		      byte.b	0
    146  a8f2		       00		      byte.b	0
    147  a8f3		       00		      byte.b	0
    148  a8f4		       00		      byte.b	0
    149  a8f5		       00		      byte.b	0
    150  a8f6		       00		      byte.b	0
    151  a8f7		       00		      byte.b	0
    152  a8f8		       00		      byte.b	0
    153  a8f9		       00		      byte.b	0
    154  a8fa		       00		      byte.b	0
    155  a8fb		       00		      byte.b	0
    156  a8fc		       00		      byte.b	0
    157  a8fd		       00		      byte.b	0
    158  a8fe		       00		      byte.b	0
    159  a8ff		       00		      byte.b	0
    160  a900		       00		      byte.b	0
    161  a901		       00		      byte.b	0
    162  a902		       00		      byte.b	0
    163  a903		       00		      byte.b	0
    164  a904		       00		      byte.b	0
    165  a905		       00		      byte.b	0
    166  a906		       00		      byte.b	0
    167  a907		       00		      byte.b	0
    168  a908		       00		      byte.b	0
    169  a909		       00		      byte.b	0
    170  a90a		       00		      byte.b	0
    171  a90b		       00		      byte.b	0
    172  a90c		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    173  a90d		       82		      byte.b	130
    174  a90e		       89		      byte.b	137
    175  a90f		       90		      byte.b	144
    176  a910		       96		      byte.b	150
    177  a911		       9c		      byte.b	156
    178  a912		       a1		      byte.b	161
    179  a913		       a7		      byte.b	167
    180  a914		       ac		      byte.b	172
    181  a915		       b0		      byte.b	176
    182  a916		       b5		      byte.b	181
    183  a917		       b9		      byte.b	185
    184  a918		       bd		      byte.b	189
    185  a919		       c1		      byte.b	193
    186  a91a		       c4		      byte.b	196
    187  a91b		       c7		      byte.b	199
    188  a91c		       ca		      byte.b	202
    189  a91d		       cd		      byte.b	205
    190  a91e		       d0		      byte.b	208
    191  a91f		       d3		      byte.b	211
    192  a920		       d5		      byte.b	213
    193  a921		       d8		      byte.b	216
    194  a922		       da		      byte.b	218
    195  a923		       dc		      byte.b	220
    196  a924		       de		      byte.b	222
    197  a925		       e0		      byte.b	224
    198  a926		       e2		      byte.b	226
    199  a927		       e3		      byte.b	227
    200  a928		       e5		      byte.b	229
    201  a929		       e6		      byte.b	230
    202  a92a		       e8		      byte.b	232
    203  a92b		       e9		      byte.b	233
    204  a92c		       ea		      byte.b	234
    205  a92d		       eb		      byte.b	235
    206  a92e		       ec		      byte.b	236
    207  a92f		       ed		      byte.b	237
    208  a930		       ee		      byte.b	238
    209  a931		       00		      byte.b	0
    210  a932		       00		      byte.b	0
    211  a933		       00		      byte.b	0
    212  a934		       00		      byte.b	0
    213  a935		       00		      byte.b	0
    214  a936		       00		      byte.b	0
    215  a937		       00		      byte.b	0
    216  a938		       00		      byte.b	0
    217  a939		       00		      byte.b	0
    218  a93a		       00		      byte.b	0
    219  a93b		       00		      byte.b	0
    220  a93c		       00		      byte.b	0
    221  a93d		       00		      byte.b	0
    222  a93e		       00		      byte.b	0
    223  a93f		       00		      byte.b	0
    224  a940		       00		      byte.b	0
    225  a941		       00		      byte.b	0
    226  a942		       00		      byte.b	0
    227  a943		       00		      byte.b	0
    228  a944		       00		      byte.b	0
    229  a945		       00		      byte.b	0
    230  a946		       00		      byte.b	0
    231  a947		       00		      byte.b	0
    232  a948		       00		      byte.b	0
    233  a949		       00		      byte.b	0
    234  a94a		       00		      byte.b	0
    235  a94b		       00		      byte.b	0
    236  a94c		       00		      byte.b	0
    237  a94d		       00		      byte.b	0
    238  a94e		       00		      byte.b	0
    239  a94f		       00		      byte.b	0
    240  a950		       00		      byte.b	0
    241  a951		       00		      byte.b	0
    242  a952		       00		      byte.b	0
    243  a953		       00		      byte.b	0
    244  a954		       00		      byte.b	0
    245  a955		       00		      byte.b	0
    246  a956		       00		      byte.b	0
    247  a957		       00		      byte.b	0
    248  a958		       00		      byte.b	0
    249  a959		       00		      byte.b	0
    250  a95a		       00		      byte.b	0
    251  a95b		       00		      byte.b	0
    252  a95c		       00		      byte.b	0
    253  a95d		       00		      byte.b	0
    254  a95e		       00		      byte.b	0
    255  a95f		       00		      byte.b	0
    256  a960		       00		      byte.b	0
    257  a961		       00		      byte.b	0
    258  a962		       00		      byte.b	0
    259  a963		       00		      byte.b	0
    260  a964		       00		      byte.b	0
    261  a965		       00		      byte.b	0
    262  a966		       00		      byte.b	0
    263  a967		       00		      byte.b	0
    264  a968
    265  a968				   voice3lookup_pal
    266  a968		       00		      byte.b	0
    267  a969		       00		      byte.b	0
    268  a96a		       00		      byte.b	0
    269  a96b		       00		      byte.b	0
    270  a96c		       00		      byte.b	0
    271  a96d		       00		      byte.b	0
    272  a96e		       00		      byte.b	0
    273  a96f		       00		      byte.b	0
    274  a970		       00		      byte.b	0
    275  a971		       00		      byte.b	0
    276  a972		       00		      byte.b	0
    277  a973		       00		      byte.b	0
    278  a974		       00		      byte.b	0
    279  a975		       00		      byte.b	0
    280  a976		       00		      byte.b	0
    281  a977		       00		      byte.b	0
    282  a978		       00		      byte.b	0
    283  a979		       00		      byte.b	0
    284  a97a		       00		      byte.b	0
    285  a97b		       00		      byte.b	0
    286  a97c		       00		      byte.b	0
    287  a97d		       00		      byte.b	0
    288  a97e		       00		      byte.b	0
    289  a97f		       00		      byte.b	0
    290  a980		       00		      byte.b	0
    291  a981		       00		      byte.b	0
    292  a982		       00		      byte.b	0
    293  a983		       00		      byte.b	0
    294  a984		       00		      byte.b	0
    295  a985		       00		      byte.b	0
    296  a986		       00		      byte.b	0
    297  a987		       00		      byte.b	0
    298  a988		       00		      byte.b	0
    299  a989		       00		      byte.b	0
    300  a98a		       00		      byte.b	0
    301  a98b		       00		      byte.b	0
    302  a98c		       00		      byte.b	0
    303  a98d		       00		      byte.b	0
    304  a98e		       00		      byte.b	0
    305  a98f		       00		      byte.b	0
    306  a990		       00		      byte.b	0
    307  a991		       00		      byte.b	0
    308  a992		       00		      byte.b	0
    309  a993		       00		      byte.b	0
    310  a994		       00		      byte.b	0
    311  a995		       00		      byte.b	0
    312  a996		       00		      byte.b	0
    313  a997		       00		      byte.b	0
    314  a998		       7b		      byte.b	123	; (122.60)  <- not reachable in PAL
    315  a999		       82		      byte.b	130
    316  a99a		       89		      byte.b	137
    317  a99b		       90		      byte.b	144
    318  a99c		       96		      byte.b	150
    319  a99d		       9c		      byte.b	156
    320  a99e		       a1		      byte.b	161
    321  a99f		       a7		      byte.b	167
    322  a9a0		       ac		      byte.b	172
    323  a9a1		       b0		      byte.b	176
    324  a9a2		       b5		      byte.b	181
    325  a9a3		       b9		      byte.b	185
    326  a9a4		       bd		      byte.b	189
    327  a9a5		       c1		      byte.b	193
    328  a9a6		       c4		      byte.b	196
    329  a9a7		       c7		      byte.b	199
    330  a9a8		       ca		      byte.b	202
    331  a9a9		       cd		      byte.b	205
    332  a9aa		       d0		      byte.b	208
    333  a9ab		       d3		      byte.b	211
    334  a9ac		       d5		      byte.b	213
    335  a9ad		       d8		      byte.b	216
    336  a9ae		       da		      byte.b	218
    337  a9af		       dc		      byte.b	220
    338  a9b0		       de		      byte.b	222
    339  a9b1		       e0		      byte.b	224
    340  a9b2		       e2		      byte.b	226
    341  a9b3		       e3		      byte.b	227
    342  a9b4		       e5		      byte.b	229
    343  a9b5		       e6		      byte.b	230
    344  a9b6		       e8		      byte.b	232
    345  a9b7		       e9		      byte.b	233
    346  a9b8		       ea		      byte.b	234
    347  a9b9		       eb		      byte.b	235
    348  a9ba		       ec		      byte.b	236
    349  a9bb		       ed		      byte.b	237
    350  a9bc		       ee		      byte.b	238
    351  a9bd		       00		      byte.b	0
    352  a9be		       00		      byte.b	0
    353  a9bf		       00		      byte.b	0
    354  a9c0		       00		      byte.b	0
    355  a9c1		       00		      byte.b	0
    356  a9c2		       00		      byte.b	0
    357  a9c3		       00		      byte.b	0
    358  a9c4		       00		      byte.b	0
    359  a9c5		       00		      byte.b	0
    360  a9c6		       00		      byte.b	0
    361  a9c7		       00		      byte.b	0
    362  a9c8		       00		      byte.b	0
    363  a9c9		       00		      byte.b	0
    364  a9ca		       00		      byte.b	0
    365  a9cb		       00		      byte.b	0
    366  a9cc		       00		      byte.b	0
    367  a9cd		       00		      byte.b	0
    368  a9ce		       00		      byte.b	0
    369  a9cf		       00		      byte.b	0
    370  a9d0		       00		      byte.b	0
    371  a9d1		       00		      byte.b	0
    372  a9d2		       00		      byte.b	0
    373  a9d3		       00		      byte.b	0
    374  a9d4		       00		      byte.b	0
    375  a9d5		       00		      byte.b	0
    376  a9d6		       00		      byte.b	0
    377  a9d7		       00		      byte.b	0
    378  a9d8		       00		      byte.b	0
    379  a9d9		       00		      byte.b	0
    380  a9da		       00		      byte.b	0
    381  a9db		       00		      byte.b	0
    382  a9dc		       00		      byte.b	0
    383  a9dd		       00		      byte.b	0
    384  a9de		       00		      byte.b	0
    385  a9df		       00		      byte.b	0
    386  a9e0		       00		      byte.b	0
    387  a9e1		       00		      byte.b	0
    388  a9e2		       00		      byte.b	0
    389  a9e3		       00		      byte.b	0
    390  a9e4		       00		      byte.b	0
    391  a9e5		       00		      byte.b	0
    392  a9e6		       00		      byte.b	0
    393  a9e7		       00		      byte.b	0
    394  a9e8
    395  a9e8
    396  a9e8				   voice4lookup_pal
    397  a9e8		       00		      byte.b	0
    398  a9e9		       00		      byte.b	0
    399  a9ea		       00		      byte.b	0
    400  a9eb		       00		      byte.b	0
    401  a9ec		       00		      byte.b	0
    402  a9ed		       00		      byte.b	0
    403  a9ee		       00		      byte.b	0
    404  a9ef		       00		      byte.b	0
    405  a9f0		       00		      byte.b	0
    406  a9f1		       00		      byte.b	0
    407  a9f2		       00		      byte.b	0
    408  a9f3		       00		      byte.b	0
    409  a9f4		       00		      byte.b	0
    410  a9f5		       00		      byte.b	0
    411  a9f6		       00		      byte.b	0
    412  a9f7		       00		      byte.b	0
    413  a9f8		       00		      byte.b	0
    414  a9f9		       00		      byte.b	0
    415  a9fa		       00		      byte.b	0
    416  a9fb		       00		      byte.b	0
    417  a9fc		       00		      byte.b	0
    418  a9fd		       00		      byte.b	0
    419  a9fe		       00		      byte.b	0
    420  a9ff		       00		      byte.b	0
    421  aa00		       00		      byte.b	0
    422  aa01		       00		      byte.b	0
    423  aa02		       00		      byte.b	0
    424  aa03		       00		      byte.b	0
    425  aa04		       00		      byte.b	0
    426  aa05		       00		      byte.b	0
    427  aa06		       00		      byte.b	0
    428  aa07		       00		      byte.b	0
    429  aa08		       00		      byte.b	0
    430  aa09		       00		      byte.b	0
    431  aa0a		       00		      byte.b	0
    432  aa0b		       00		      byte.b	0
    433  aa0c		       85		      byte.b	133	; (122.60)  <- not reachable in PAL
    434  aa0d		       8c		      byte.b	140
    435  aa0e		       92		      byte.b	146
    436  aa0f		       98		      byte.b	152
    437  aa10		       9e		      byte.b	158
    438  aa11		       a3		      byte.b	163
    439  aa12		       a9		      byte.b	169
    440  aa13		       ad		      byte.b	173
    441  aa14		       b2		      byte.b	178
    442  aa15		       b6		      byte.b	182
    443  aa16		       ba		      byte.b	186
    444  aa17		       be		      byte.b	190
    445  aa18		       c2		      byte.b	194
    446  aa19		       c5		      byte.b	197
    447  aa1a		       c9		      byte.b	201
    448  aa1b		       cc		      byte.b	204
    449  aa1c		       cf		      byte.b	207
    450  aa1d		       d1		      byte.b	209
    451  aa1e		       d4		      byte.b	212
    452  aa1f		       d6		      byte.b	214
    453  aa20		       d9		      byte.b	217
    454  aa21		       db		      byte.b	219
    455  aa22		       dd		      byte.b	221
    456  aa23		       df		      byte.b	223
    457  aa24		       e0		      byte.b	224
    458  aa25		       e2		      byte.b	226
    459  aa26		       e4		      byte.b	228
    460  aa27		       e5		      byte.b	229
    461  aa28		       e7		      byte.b	231
    462  aa29		       e8		      byte.b	232
    463  aa2a		       e9		      byte.b	233
    464  aa2b		       eb		      byte.b	235
    465  aa2c		       ec		      byte.b	236
    466  aa2d		       ed		      byte.b	237
    467  aa2e		       ee		      byte.b	238
    468  aa2f		       ef		      byte.b	239
    469  aa30		       f0		      byte.b	240
    470  aa31		       00		      byte.b	0
    471  aa32		       00		      byte.b	0
    472  aa33		       00		      byte.b	0
    473  aa34		       00		      byte.b	0
    474  aa35		       00		      byte.b	0
    475  aa36		       00		      byte.b	0
    476  aa37		       00		      byte.b	0
    477  aa38		       00		      byte.b	0
    478  aa39		       00		      byte.b	0
    479  aa3a		       00		      byte.b	0
    480  aa3b		       00		      byte.b	0
    481  aa3c		       00		      byte.b	0
    482  aa3d		       00		      byte.b	0
    483  aa3e		       00		      byte.b	0
    484  aa3f		       00		      byte.b	0
    485  aa40		       00		      byte.b	0
    486  aa41		       00		      byte.b	0
    487  aa42		       00		      byte.b	0
    488  aa43		       00		      byte.b	0
    489  aa44		       00		      byte.b	0
    490  aa45		       00		      byte.b	0
    491  aa46		       00		      byte.b	0
    492  aa47		       00		      byte.b	0
    493  aa48		       00		      byte.b	0
    494  aa49		       00		      byte.b	0
    495  aa4a		       00		      byte.b	0
    496  aa4b		       00		      byte.b	0
    497  aa4c		       00		      byte.b	0
    498  aa4d		       00		      byte.b	0
    499  aa4e		       00		      byte.b	0
    500  aa4f		       00		      byte.b	0
    501  aa50		       00		      byte.b	0
    502  aa51		       00		      byte.b	0
    503  aa52		       00		      byte.b	0
    504  aa53		       00		      byte.b	0
    505  aa54		       00		      byte.b	0
    506  aa55		       00		      byte.b	0
    507  aa56		       00		      byte.b	0
    508  aa57		       00		      byte.b	0
    509  aa58		       00		      byte.b	0
    510  aa59		       00		      byte.b	0
    511  aa5a		       00		      byte.b	0
    512  aa5b		       00		      byte.b	0
    513  aa5c		       00		      byte.b	0
    514  aa5d		       00		      byte.b	0
    515  aa5e		       00		      byte.b	0
    516  aa5f		       00		      byte.b	0
    517  aa60		       00		      byte.b	0
    518  aa61		       00		      byte.b	0
    519  aa62		       00		      byte.b	0
    520  aa63		       00		      byte.b	0
    521  aa64		       00		      byte.b	0
    522  aa65		       00		      byte.b	0
    523  aa66		       00		      byte.b	0
    524  aa67		       00		      byte.b	0
    525  aa68
    526  aa68							; EOF!
------- FILE vicmidi.asm
------- FILE lookup-alt.asm LEVEL 2 PASS 1
      0  aa68					      include	"lookup-alt.asm"
      1  aa68							; --------------------------------------------------------------------------------------------------
      2  aa68							; Note Lookups Alternate - 128 bytes each, map MIDI Note# to a VIC register value
      3  aa68							; From http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=3643
      4  aa68
      5  aa68				   voice1lookup_alt
      6  aa68		       00		      byte.b	0
      7  aa69		       00		      byte.b	0
      8  aa6a		       00		      byte.b	0
      9  aa6b		       00		      byte.b	0
     10  aa6c		       00		      byte.b	0
     11  aa6d		       00		      byte.b	0
     12  aa6e		       00		      byte.b	0
     13  aa6f		       00		      byte.b	0
     14  aa70		       00		      byte.b	0
     15  aa71		       00		      byte.b	0
     16  aa72		       00		      byte.b	0
     17  aa73		       00		      byte.b	0
     18  aa74		       00		      byte.b	0
     19  aa75		       00		      byte.b	0
     20  aa76		       00		      byte.b	0
     21  aa77		       00		      byte.b	0
     22  aa78		       00		      byte.b	0
     23  aa79		       00		      byte.b	0
     24  aa7a		       00		      byte.b	0
     25  aa7b		       00		      byte.b	0
     26  aa7c		       00		      byte.b	0
     27  aa7d		       00		      byte.b	0
     28  aa7e		       00		      byte.b	0
     29  aa7f		       00		      byte.b	0
     30  aa80		       ff		      byte.b	255
     31  aa81		       86		      byte.b	134
     32  aa82		       8d		      byte.b	141
     33  aa83		       93		      byte.b	147
     34  aa84		       99		      byte.b	153
     35  aa85		       9f		      byte.b	159
     36  aa86		       a4		      byte.b	164
     37  aa87		       aa		      byte.b	170
     38  aa88		       ae		      byte.b	174
     39  aa89		       b3		      byte.b	179
     40  aa8a		       b7		      byte.b	183
     41  aa8b		       bb		      byte.b	187
     42  aa8c		       bf		      byte.b	191
     43  aa8d		       c3		      byte.b	195
     44  aa8e		       c6		      byte.b	198
     45  aa8f		       c9		      byte.b	201
     46  aa90		       cc		      byte.b	204
     47  aa91		       cf		      byte.b	207
     48  aa92		       d2		      byte.b	210
     49  aa93		       d4		      byte.b	212
     50  aa94		       d7		      byte.b	215
     51  aa95		       d9		      byte.b	217
     52  aa96		       db		      byte.b	219
     53  aa97		       dd		      byte.b	221
     54  aa98		       df		      byte.b	223
     55  aa99		       e1		      byte.b	225
     56  aa9a		       e2		      byte.b	226
     57  aa9b		       e4		      byte.b	228
     58  aa9c		       e6		      byte.b	230
     59  aa9d		       e7		      byte.b	231
     60  aa9e		       e8		      byte.b	232
     61  aa9f		       ea		      byte.b	234
     62  aaa0		       eb		      byte.b	235
     63  aaa1		       ec		      byte.b	236
     64  aaa2		       ed		      byte.b	237
     65  aaa3		       ee		      byte.b	238
     66  aaa4		       ef		      byte.b	239
     67  aaa5		       00		      byte.b	0
     68  aaa6		       00		      byte.b	0
     69  aaa7		       00		      byte.b	0
     70  aaa8		       00		      byte.b	0
     71  aaa9		       00		      byte.b	0
     72  aaaa		       00		      byte.b	0
     73  aaab		       00		      byte.b	0
     74  aaac		       00		      byte.b	0
     75  aaad		       00		      byte.b	0
     76  aaae		       00		      byte.b	0
     77  aaaf		       00		      byte.b	0
     78  aab0		       00		      byte.b	0
     79  aab1		       00		      byte.b	0
     80  aab2		       00		      byte.b	0
     81  aab3		       00		      byte.b	0
     82  aab4		       00		      byte.b	0
     83  aab5		       00		      byte.b	0
     84  aab6		       00		      byte.b	0
     85  aab7		       00		      byte.b	0
     86  aab8		       00		      byte.b	0
     87  aab9		       00		      byte.b	0
     88  aaba		       00		      byte.b	0
     89  aabb		       00		      byte.b	0
     90  aabc		       00		      byte.b	0
     91  aabd		       00		      byte.b	0
     92  aabe		       00		      byte.b	0
     93  aabf		       00		      byte.b	0
     94  aac0		       00		      byte.b	0
     95  aac1		       00		      byte.b	0
     96  aac2		       00		      byte.b	0
     97  aac3		       00		      byte.b	0
     98  aac4		       00		      byte.b	0
     99  aac5		       00		      byte.b	0
    100  aac6		       00		      byte.b	0
    101  aac7		       00		      byte.b	0
    102  aac8		       00		      byte.b	0
    103  aac9		       00		      byte.b	0
    104  aaca		       00		      byte.b	0
    105  aacb		       00		      byte.b	0
    106  aacc		       00		      byte.b	0
    107  aacd		       00		      byte.b	0
    108  aace		       00		      byte.b	0
    109  aacf		       00		      byte.b	0
    110  aad0		       00		      byte.b	0
    111  aad1		       00		      byte.b	0
    112  aad2		       00		      byte.b	0
    113  aad3		       00		      byte.b	0
    114  aad4		       00		      byte.b	0
    115  aad5		       00		      byte.b	0
    116  aad6		       00		      byte.b	0
    117  aad7		       00		      byte.b	0
    118  aad8		       00		      byte.b	0
    119  aad9		       00		      byte.b	0
    120  aada		       00		      byte.b	0
    121  aadb		       00		      byte.b	0
    122  aadc		       00		      byte.b	0
    123  aadd		       00		      byte.b	0
    124  aade		       00		      byte.b	0
    125  aadf		       00		      byte.b	0
    126  aae0		       00		      byte.b	0
    127  aae1		       00		      byte.b	0
    128  aae2		       00		      byte.b	0
    129  aae3		       00		      byte.b	0
    130  aae4		       00		      byte.b	0
    131  aae5		       00		      byte.b	0
    132  aae6		       00		      byte.b	0
    133  aae7		       00		      byte.b	0
    134  aae8
    135  aae8				   voice2lookup_alt
    136  aae8		       00		      byte.b	0
    137  aae9		       00		      byte.b	0
    138  aaea		       00		      byte.b	0
    139  aaeb		       00		      byte.b	0
    140  aaec		       00		      byte.b	0
    141  aaed		       00		      byte.b	0
    142  aaee		       00		      byte.b	0
    143  aaef		       00		      byte.b	0
    144  aaf0		       00		      byte.b	0
    145  aaf1		       00		      byte.b	0
    146  aaf2		       00		      byte.b	0
    147  aaf3		       00		      byte.b	0
    148  aaf4		       00		      byte.b	0
    149  aaf5		       00		      byte.b	0
    150  aaf6		       00		      byte.b	0
    151  aaf7		       00		      byte.b	0
    152  aaf8		       00		      byte.b	0
    153  aaf9		       00		      byte.b	0
    154  aafa		       00		      byte.b	0
    155  aafb		       00		      byte.b	0
    156  aafc		       00		      byte.b	0
    157  aafd		       00		      byte.b	0
    158  aafe		       00		      byte.b	0
    159  aaff		       00		      byte.b	0
    160  ab00		       00		      byte.b	0
    161  ab01		       00		      byte.b	0
    162  ab02		       00		      byte.b	0
    163  ab03		       00		      byte.b	0
    164  ab04		       00		      byte.b	0
    165  ab05		       00		      byte.b	0
    166  ab06		       00		      byte.b	0
    167  ab07		       00		      byte.b	0
    168  ab08		       00		      byte.b	0
    169  ab09		       00		      byte.b	0
    170  ab0a		       00		      byte.b	0
    171  ab0b		       00		      byte.b	0
    172  ab0c		       ff		      byte.b	255
    173  ab0d		       86		      byte.b	134
    174  ab0e		       8d		      byte.b	141
    175  ab0f		       93		      byte.b	147
    176  ab10		       99		      byte.b	153
    177  ab11		       9f		      byte.b	159
    178  ab12		       a4		      byte.b	164
    179  ab13		       aa		      byte.b	170
    180  ab14		       ae		      byte.b	174
    181  ab15		       b3		      byte.b	179
    182  ab16		       b7		      byte.b	183
    183  ab17		       bb		      byte.b	187
    184  ab18		       bf		      byte.b	191
    185  ab19		       c3		      byte.b	195
    186  ab1a		       c6		      byte.b	198
    187  ab1b		       c9		      byte.b	201
    188  ab1c		       cc		      byte.b	204
    189  ab1d		       cf		      byte.b	207
    190  ab1e		       d2		      byte.b	210
    191  ab1f		       d4		      byte.b	212
    192  ab20		       d7		      byte.b	215
    193  ab21		       d9		      byte.b	217
    194  ab22		       db		      byte.b	219
    195  ab23		       dd		      byte.b	221
    196  ab24		       df		      byte.b	223
    197  ab25		       e1		      byte.b	225
    198  ab26		       e2		      byte.b	226
    199  ab27		       e4		      byte.b	228
    200  ab28		       e6		      byte.b	230
    201  ab29		       e7		      byte.b	231
    202  ab2a		       e8		      byte.b	232
    203  ab2b		       ea		      byte.b	234
    204  ab2c		       eb		      byte.b	235
    205  ab2d		       ec		      byte.b	236
    206  ab2e		       ed		      byte.b	237
    207  ab2f		       ee		      byte.b	238
    208  ab30		       ef		      byte.b	239
    209  ab31		       00		      byte.b	0
    210  ab32		       00		      byte.b	0
    211  ab33		       00		      byte.b	0
    212  ab34		       00		      byte.b	0
    213  ab35		       00		      byte.b	0
    214  ab36		       00		      byte.b	0
    215  ab37		       00		      byte.b	0
    216  ab38		       00		      byte.b	0
    217  ab39		       00		      byte.b	0
    218  ab3a		       00		      byte.b	0
    219  ab3b		       00		      byte.b	0
    220  ab3c		       00		      byte.b	0
    221  ab3d		       00		      byte.b	0
    222  ab3e		       00		      byte.b	0
    223  ab3f		       00		      byte.b	0
    224  ab40		       00		      byte.b	0
    225  ab41		       00		      byte.b	0
    226  ab42		       00		      byte.b	0
    227  ab43		       00		      byte.b	0
    228  ab44		       00		      byte.b	0
    229  ab45		       00		      byte.b	0
    230  ab46		       00		      byte.b	0
    231  ab47		       00		      byte.b	0
    232  ab48		       00		      byte.b	0
    233  ab49		       00		      byte.b	0
    234  ab4a		       00		      byte.b	0
    235  ab4b		       00		      byte.b	0
    236  ab4c		       00		      byte.b	0
    237  ab4d		       00		      byte.b	0
    238  ab4e		       00		      byte.b	0
    239  ab4f		       00		      byte.b	0
    240  ab50		       00		      byte.b	0
    241  ab51		       00		      byte.b	0
    242  ab52		       00		      byte.b	0
    243  ab53		       00		      byte.b	0
    244  ab54		       00		      byte.b	0
    245  ab55		       00		      byte.b	0
    246  ab56		       00		      byte.b	0
    247  ab57		       00		      byte.b	0
    248  ab58		       00		      byte.b	0
    249  ab59		       00		      byte.b	0
    250  ab5a		       00		      byte.b	0
    251  ab5b		       00		      byte.b	0
    252  ab5c		       00		      byte.b	0
    253  ab5d		       00		      byte.b	0
    254  ab5e		       00		      byte.b	0
    255  ab5f		       00		      byte.b	0
    256  ab60		       00		      byte.b	0
    257  ab61		       00		      byte.b	0
    258  ab62		       00		      byte.b	0
    259  ab63		       00		      byte.b	0
    260  ab64		       00		      byte.b	0
    261  ab65		       00		      byte.b	0
    262  ab66		       00		      byte.b	0
    263  ab67		       00		      byte.b	0
    264  ab68
    265  ab68				   voice3lookup_alt
    266  ab68		       00		      byte.b	0
    267  ab69		       00		      byte.b	0
    268  ab6a		       00		      byte.b	0
    269  ab6b		       00		      byte.b	0
    270  ab6c		       00		      byte.b	0
    271  ab6d		       00		      byte.b	0
    272  ab6e		       00		      byte.b	0
    273  ab6f		       00		      byte.b	0
    274  ab70		       00		      byte.b	0
    275  ab71		       00		      byte.b	0
    276  ab72		       00		      byte.b	0
    277  ab73		       00		      byte.b	0
    278  ab74		       00		      byte.b	0
    279  ab75		       00		      byte.b	0
    280  ab76		       00		      byte.b	0
    281  ab77		       00		      byte.b	0
    282  ab78		       00		      byte.b	0
    283  ab79		       00		      byte.b	0
    284  ab7a		       00		      byte.b	0
    285  ab7b		       00		      byte.b	0
    286  ab7c		       00		      byte.b	0
    287  ab7d		       00		      byte.b	0
    288  ab7e		       00		      byte.b	0
    289  ab7f		       00		      byte.b	0
    290  ab80		       00		      byte.b	0
    291  ab81		       00		      byte.b	0
    292  ab82		       00		      byte.b	0
    293  ab83		       00		      byte.b	0
    294  ab84		       00		      byte.b	0
    295  ab85		       00		      byte.b	0
    296  ab86		       00		      byte.b	0
    297  ab87		       00		      byte.b	0
    298  ab88		       00		      byte.b	0
    299  ab89		       00		      byte.b	0
    300  ab8a		       00		      byte.b	0
    301  ab8b		       00		      byte.b	0
    302  ab8c		       00		      byte.b	0
    303  ab8d		       00		      byte.b	0
    304  ab8e		       00		      byte.b	0
    305  ab8f		       00		      byte.b	0
    306  ab90		       00		      byte.b	0
    307  ab91		       00		      byte.b	0
    308  ab92		       00		      byte.b	0
    309  ab93		       00		      byte.b	0
    310  ab94		       00		      byte.b	0
    311  ab95		       00		      byte.b	0
    312  ab96		       00		      byte.b	0
    313  ab97		       00		      byte.b	0
    314  ab98		       ff		      byte.b	255
    315  ab99		       86		      byte.b	134
    316  ab9a		       8d		      byte.b	141
    317  ab9b		       93		      byte.b	147
    318  ab9c		       99		      byte.b	153
    319  ab9d		       9f		      byte.b	159
    320  ab9e		       a4		      byte.b	164
    321  ab9f		       aa		      byte.b	170
    322  aba0		       ae		      byte.b	174
    323  aba1		       b3		      byte.b	179
    324  aba2		       b7		      byte.b	183
    325  aba3		       bb		      byte.b	187
    326  aba4		       bf		      byte.b	191
    327  aba5		       c3		      byte.b	195
    328  aba6		       c6		      byte.b	198
    329  aba7		       c9		      byte.b	201
    330  aba8		       cc		      byte.b	204
    331  aba9		       cf		      byte.b	207
    332  abaa		       d2		      byte.b	210
    333  abab		       d4		      byte.b	212
    334  abac		       d7		      byte.b	215
    335  abad		       d9		      byte.b	217
    336  abae		       db		      byte.b	219
    337  abaf		       dd		      byte.b	221
    338  abb0		       df		      byte.b	223
    339  abb1		       e1		      byte.b	225
    340  abb2		       e2		      byte.b	226
    341  abb3		       e4		      byte.b	228
    342  abb4		       e6		      byte.b	230
    343  abb5		       e7		      byte.b	231
    344  abb6		       e8		      byte.b	232
    345  abb7		       ea		      byte.b	234
    346  abb8		       eb		      byte.b	235
    347  abb9		       ec		      byte.b	236
    348  abba		       ed		      byte.b	237
    349  abbb		       ee		      byte.b	238
    350  abbc		       ef		      byte.b	239
    351  abbd		       00		      byte.b	0
    352  abbe		       00		      byte.b	0
    353  abbf		       00		      byte.b	0
    354  abc0		       00		      byte.b	0
    355  abc1		       00		      byte.b	0
    356  abc2		       00		      byte.b	0
    357  abc3		       00		      byte.b	0
    358  abc4		       00		      byte.b	0
    359  abc5		       00		      byte.b	0
    360  abc6		       00		      byte.b	0
    361  abc7		       00		      byte.b	0
    362  abc8		       00		      byte.b	0
    363  abc9		       00		      byte.b	0
    364  abca		       00		      byte.b	0
    365  abcb		       00		      byte.b	0
    366  abcc		       00		      byte.b	0
    367  abcd		       00		      byte.b	0
    368  abce		       00		      byte.b	0
    369  abcf		       00		      byte.b	0
    370  abd0		       00		      byte.b	0
    371  abd1		       00		      byte.b	0
    372  abd2		       00		      byte.b	0
    373  abd3		       00		      byte.b	0
    374  abd4		       00		      byte.b	0
    375  abd5		       00		      byte.b	0
    376  abd6		       00		      byte.b	0
    377  abd7		       00		      byte.b	0
    378  abd8		       00		      byte.b	0
    379  abd9		       00		      byte.b	0
    380  abda		       00		      byte.b	0
    381  abdb		       00		      byte.b	0
    382  abdc		       00		      byte.b	0
    383  abdd		       00		      byte.b	0
    384  abde		       00		      byte.b	0
    385  abdf		       00		      byte.b	0
    386  abe0		       00		      byte.b	0
    387  abe1		       00		      byte.b	0
    388  abe2		       00		      byte.b	0
    389  abe3		       00		      byte.b	0
    390  abe4		       00		      byte.b	0
    391  abe5		       00		      byte.b	0
    392  abe6		       00		      byte.b	0
    393  abe7		       00		      byte.b	0
    394  abe8
    395  abe8
    396  abe8				   voice4lookup_alt
    397  abe8		       00		      byte.b	0
    398  abe9		       00		      byte.b	0
    399  abea		       00		      byte.b	0
    400  abeb		       00		      byte.b	0
    401  abec		       00		      byte.b	0
    402  abed		       00		      byte.b	0
    403  abee		       00		      byte.b	0
    404  abef		       00		      byte.b	0
    405  abf0		       00		      byte.b	0
    406  abf1		       00		      byte.b	0
    407  abf2		       00		      byte.b	0
    408  abf3		       00		      byte.b	0
    409  abf4		       00		      byte.b	0
    410  abf5		       00		      byte.b	0
    411  abf6		       00		      byte.b	0
    412  abf7		       00		      byte.b	0
    413  abf8		       00		      byte.b	0
    414  abf9		       00		      byte.b	0
    415  abfa		       00		      byte.b	0
    416  abfb		       00		      byte.b	0
    417  abfc		       00		      byte.b	0
    418  abfd		       00		      byte.b	0
    419  abfe		       00		      byte.b	0
    420  abff		       00		      byte.b	0
    421  ac00		       00		      byte.b	0
    422  ac01		       00		      byte.b	0
    423  ac02		       00		      byte.b	0
    424  ac03		       00		      byte.b	0
    425  ac04		       00		      byte.b	0
    426  ac05		       00		      byte.b	0
    427  ac06		       00		      byte.b	0
    428  ac07		       00		      byte.b	0
    429  ac08		       00		      byte.b	0
    430  ac09		       00		      byte.b	0
    431  ac0a		       00		      byte.b	0
    432  ac0b		       00		      byte.b	0
    433  ac0c		       ff		      byte.b	255
    434  ac0d		       86		      byte.b	134
    435  ac0e		       8d		      byte.b	141
    436  ac0f		       93		      byte.b	147
    437  ac10		       99		      byte.b	153
    438  ac11		       9f		      byte.b	159
    439  ac12		       a4		      byte.b	164
    440  ac13		       aa		      byte.b	170
    441  ac14		       ae		      byte.b	174
    442  ac15		       b3		      byte.b	179
    443  ac16		       b7		      byte.b	183
    444  ac17		       bb		      byte.b	187
    445  ac18		       bf		      byte.b	191
    446  ac19		       c3		      byte.b	195
    447  ac1a		       c6		      byte.b	198
    448  ac1b		       c9		      byte.b	201
    449  ac1c		       cc		      byte.b	204
    450  ac1d		       cf		      byte.b	207
    451  ac1e		       d2		      byte.b	210
    452  ac1f		       d4		      byte.b	212
    453  ac20		       d7		      byte.b	215
    454  ac21		       d9		      byte.b	217
    455  ac22		       db		      byte.b	219
    456  ac23		       dd		      byte.b	221
    457  ac24		       df		      byte.b	223
    458  ac25		       e1		      byte.b	225
    459  ac26		       e2		      byte.b	226
    460  ac27		       e4		      byte.b	228
    461  ac28		       e6		      byte.b	230
    462  ac29		       e7		      byte.b	231
    463  ac2a		       e8		      byte.b	232
    464  ac2b		       ea		      byte.b	234
    465  ac2c		       eb		      byte.b	235
    466  ac2d		       ec		      byte.b	236
    467  ac2e		       ed		      byte.b	237
    468  ac2f		       ee		      byte.b	238
    469  ac30		       ef		      byte.b	239
    470  ac31		       00		      byte.b	0
    471  ac32		       00		      byte.b	0
    472  ac33		       00		      byte.b	0
    473  ac34		       00		      byte.b	0
    474  ac35		       00		      byte.b	0
    475  ac36		       00		      byte.b	0
    476  ac37		       00		      byte.b	0
    477  ac38		       00		      byte.b	0
    478  ac39		       00		      byte.b	0
    479  ac3a		       00		      byte.b	0
    480  ac3b		       00		      byte.b	0
    481  ac3c		       00		      byte.b	0
    482  ac3d		       00		      byte.b	0
    483  ac3e		       00		      byte.b	0
    484  ac3f		       00		      byte.b	0
    485  ac40		       00		      byte.b	0
    486  ac41		       00		      byte.b	0
    487  ac42		       00		      byte.b	0
    488  ac43		       00		      byte.b	0
    489  ac44		       00		      byte.b	0
    490  ac45		       00		      byte.b	0
    491  ac46		       00		      byte.b	0
    492  ac47		       00		      byte.b	0
    493  ac48		       00		      byte.b	0
    494  ac49		       00		      byte.b	0
    495  ac4a		       00		      byte.b	0
    496  ac4b		       00		      byte.b	0
    497  ac4c		       00		      byte.b	0
    498  ac4d		       00		      byte.b	0
    499  ac4e		       00		      byte.b	0
    500  ac4f		       00		      byte.b	0
    501  ac50		       00		      byte.b	0
    502  ac51		       00		      byte.b	0
    503  ac52		       00		      byte.b	0
    504  ac53		       00		      byte.b	0
    505  ac54		       00		      byte.b	0
    506  ac55		       00		      byte.b	0
    507  ac56		       00		      byte.b	0
    508  ac57		       00		      byte.b	0
    509  ac58		       00		      byte.b	0
    510  ac59		       00		      byte.b	0
    511  ac5a		       00		      byte.b	0
    512  ac5b		       00		      byte.b	0
    513  ac5c		       00		      byte.b	0
    514  ac5d		       00		      byte.b	0
    515  ac5e		       00		      byte.b	0
    516  ac5f		       00		      byte.b	0
    517  ac60		       00		      byte.b	0
    518  ac61		       00		      byte.b	0
    519  ac62		       00		      byte.b	0
    520  ac63		       00		      byte.b	0
    521  ac64		       00		      byte.b	0
    522  ac65		       00		      byte.b	0
    523  ac66		       00		      byte.b	0
    524  ac67		       00		      byte.b	0
    525  ac68
    526  ac68							; EOF!
------- FILE vicmidi.asm
    696  ac68
    697  ac68							; EOF!
